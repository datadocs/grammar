with my_data as ( select 'text1'::varchar(1000) as my_column union all select 'text1'::varchar(1000) as my_column union all select 'text1'::varchar(1000) as my_column ) select string_agg(my_column,', ') as my_string_agg from my_data;
with my_data as ( select 1 as dummy, 'text1'::varchar(1000) as my_column union all select 1 as dummy, 'text1'::varchar(1000) as my_column union all select 1 as dummy, 'text1'::varchar(1000) as my_column ) select string_agg(my_column,', ') as my_string_agg from my_data group by dummy;
select count(*), count(s), min(s), max(s) from strings;
select count(*), count(s), min(s), max(s) from strings where s is null;
select string_agg(s, ' '), string_agg(s, ''), string_agg('', ''), string_agg('hello', ' ') from strings;
select g, count(*), count(s), min(s), max(s), string_agg(s, ' ') from strings group by g order by g;
select g, count(*), count(s), min(s), max(s), string_agg(distinct g order by g desc) from strings group by g order by g;
select g, count(*), count(s), min(s), max(s), string_agg(distinct s order by s asc) from strings group by g order by g;
select g, count(*), count(s), min(s), max(s), string_agg(s, ' ') from strings where s is null or s <> 'hello' group by g order by g;
select count(*), count(b), min(b), max(b) from booleans;
select count(*), count(b), min(b), max(b) from booleans where b is null;
select g, count(*), count(b), min(b), max(b) from booleans group by g order by g;
select g, count(*), count(b), min(b), max(b) from booleans where b is null or b=true group by g order by g;
select count(*), count(i), min(i), max(i), sum(i) from integers;
select count(*), count(i), min(i), max(i), sum(i) from integers where i is null;
select g, count(*), count(i), min(i), max(i), sum(i) from integers group by g order by g;
select g, count(*), count(i), min(i), max(i), sum(i) from integers where i is null or i > 15 group by g order by g;
select count(), count(1), count(*), count(null), count('hello'), count(date '1992-02-02');
select sum(1), sum(null), sum(33.3);
select min(1), min(null), min(33.3), min('hello'), min(true), min(date '1992-02-02'), min(timestamp '2008-01-01 00:00:01');
select max(1), max(null), max(33.3), max('hello'), max(true), max(date '1992-02-02'), max(timestamp '2008-01-01 00:00:01');
select first(1), first(null), first(33.3), first('hello'), first(true), first(date '1992-02-02'), first(timestamp '2008-01-01 00:00:01');
select last(1), last(null), last(33.3), last('hello'), last(true), last(date '1992-02-02'), last(timestamp '2008-01-01 00:00:01');
select avg(1), avg(null), avg(33.3);
select string_agg('hello');
select string_agg('hello', ' '), string_agg('hello', null), string_agg(null, ' '), string_agg(null, null), string_agg('', '');
select string_agg(distinct val order by val desc) from test_val;
select count(null), string_agg(distinct val order by val asc) from test_val;
select null as a, null as b, null as c, null as d, 1 as id union select 'кирилл' as a, 'müller' as b, '我是谁' as c, 'ascii' as d, 2 as id order by 1;
select count(*), count(s) from test;
select a, count(*), count(s) from test group by a order by a;
select s, sum(a) from test group by s order by s;
select count(*), count(s), count(distinct s) from test;
select a, count(*), count(s), count(distinct s) from test group by a order by a;
select a, count(*), count(s), count(distinct s) from test where s is not null group by a order by a;
select min(s), max(s) from test_strings;
select approx_count_distinct(1);
select approx_count_distinct(null);
select approx_count_distinct('hello');
select approx_count_distinct(10), approx_count_distinct('hello') from range(100);
select count( a),approx_count_distinct(a),approx_count_distinct(b) from t;
select approx_count_distinct(a) from t group by a %2;
select count(*) from t where a < 10;
select approx_count_distinct(a) over (partition by a%2) from t where a < 10;
select count( t),approx_count_distinct(t) from timestamp;
select count( t),approx_count_distinct(t) from dates;
select count(t),approx_count_distinct(t) from names;
select approx_count_distinct(cname) from customers;
select case when ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) ) then true else false end from (select approx_quantile(r, 0.5) as approx_quantile ,quantile(r,0.5) as true_quantile from quantile) as t;
select case when ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) ) then true else false end from (select approx_quantile(r, 1.0) as approx_quantile ,quantile(r, 1.0) as true_quantile from quantile) as t;
select case when ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) ) then true else false end from (select approx_quantile(r, 0.0) as approx_quantile ,quantile(r, 0.0) as true_quantile from quantile) as t;
select approx_quantile(null, 0.5) as approx_quantile ,quantile(null, 0.5) as true_quantile;
select case when ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) ) then true else false end from (select approx_quantile(42, 0.5) as approx_quantile ,quantile(42, 0.5) as true_quantile) as t;
select approx_quantile(null, 0.5) as approx_quantile ,quantile(null, 0.5) as true_quantile from quantile;
select approx_quantile(1, 0.5) as approx_quantile ,quantile(1, 0.5) as true_quantile from quantile;
select case when ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) ) then true else false end from (select approx_quantile(r, 0.1) as approx_quantile ,quantile(r, 0.1) as true_quantile from quantile) as t;
select case when ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) ) then true else false end from (select approx_quantile(r, 0.9) as approx_quantile ,quantile(r, 0.9) as true_quantile from quantile) as t;
select [ (a[1] between (q[1] - 100) and (q[1] + 100)), (a[2] between (q[2] - 100) and (q[2] + 100)), (a[3] between (q[3] - 100) and (q[3] + 100)), ] from ( select approx_quantile(r, [0.25, 0.5, 0.75]) as a, quantile(r, [0.25, 0.5, 0.75]) as q, from quantile ) tbl;
select case when (approx_quantile between (true_quantile - (sumr * 0.01)) and (true_quantile + (sumr * 0.01))) then true else false end from (select approx_quantile(r, 0.1) as approx_quantile, quantile(r, 0.1) as true_quantile, sum(r) as sumr from quantile) as t;
select case when (approx_quantile between (true_quantile - (sumr * 0.01)) and (true_quantile + (sumr * 0.01))) then true else false end from (select approx_quantile(r, 0.9) as approx_quantile, quantile(r, 0.9) as true_quantile, sum(r) as sumr from quantile) as t;
select case when (approx_quantile between (true_quantile - (sumr * 0.01)) and (true_quantile + (sumr * 0.01))) then true else false end from (select approx_quantile(r, 0.5) as approx_quantile, quantile(r, 0.5) as true_quantile, sum(r) as sumr from quantile) as t;
select argmin(null,null);
select argmin(1,1);
select argmin(i,i) from range (100) tbl(i);
select argmin(i,i) from range (100) tbl(i) where 1 = 0;
select argmax(null,null);
select argmax(1,1);
select argmax(i,i) from range (100) tbl(i);
select argmax(i,i) from range (100) tbl(i) where 1 = 0;
select argmin(a,b), argmax(a,b) from args;
select argmin(a,b), argmax(a,b) from args group by a%2 order by argmin(a,b);
select argmin(b,a), argmax(b,a) from blobs ;
select argmin(a,b), argmax(a,b) from blobs ;
select argmin(a,b) over ( partition by a%2) from args;
select argmax(a,b) over ( partition by a%2) from args;
select argmin(name,salary),argmax(name,salary) from names;
select argmin(salary,name),argmax(salary,name) from names;
select min_by(name,salary),max_by(name,salary) from names;
select arg_min(name,salary),arg_max(name,salary) from names;
select arg_min(`varchar`, `smallint`) from tbl;
select arg_min(`varchar`, `integer`) from tbl;
select arg_min(`varchar`, `bigint`) from tbl;
select arg_min(`varchar`, `hugeint`) from tbl;
select arg_min(`varchar`, `float`) from tbl;
select arg_min(`varchar`, `double`) from tbl;
select arg_min(`smallint`, `varchar`) from tbl except select min(`smallint`) from tbl;
select arg_min(`integer`, `varchar`) from tbl except select min(`integer`) from tbl;
select arg_min(`bigint`, `varchar`) from tbl except select min(`bigint`) from tbl;
select arg_min(`hugeint`, `varchar`) from tbl except select min(`hugeint`) from tbl;
select arg_min(`float`, `varchar`) from tbl except select min(`float`) from tbl;
select arg_min(`double`, `varchar`) from tbl except select min(`double`) from tbl;
select arg_max(`varchar`, `smallint`) from tbl;
select arg_max(`varchar`, `integer`) from tbl;
select arg_max(`varchar`, `bigint`) from tbl;
select arg_max(`varchar`, `hugeint`) from tbl;
select arg_max(`varchar`, `float`) from tbl;
select arg_max(`varchar`, `double`) from tbl;
select arg_max(`smallint`, `varchar`) from tbl except select max(`smallint`) from tbl;
select arg_max(`integer`, `varchar`) from tbl except select max(`integer`) from tbl;
select arg_max(`bigint`, `varchar`) from tbl except select max(`bigint`) from tbl;
select arg_max(`hugeint`, `varchar`) from tbl except select max(`hugeint`) from tbl;
select arg_max(`float`, `varchar`) from tbl except select max(`float`) from tbl;
select arg_max(`double`, `varchar`) from tbl except select max(`double`) from tbl;
select avg(3), avg(null);
select avg(3::smallint), avg(null::smallint);
select avg(3::double), avg(null::double);
select avg(nextval('seq'));
select avg(i), avg(1), avg(distinct i), avg(null) from integers;
select avg(i) from integers where i > 100;
select avg(i), avg(j), avg(k) from vals;
select avg(n)::double - '3002399751580331'::double from bigints;
select bit_and(3), bit_and(null);
select bit_and(nextval('seq'));
select bit_and(i), bit_and(1), bit_and(distinct i), bit_and(null) from integers;
select bit_and(i) from integers where i > 100;
select bit_or(3), bit_or(null);
select bit_or(nextval('seq'));
select bit_or(i), bit_or(1), bit_or(distinct i), bit_or(null) from integers;
select bit_or(i) from integers where i > 100;
select bit_xor(3), bit_xor(null);
select bit_xor(nextval('seq'));
select bit_xor(i), bit_xor(1), bit_xor(distinct i), bit_xor(null) from integers;
select bit_xor(i) from integers where i > 100;
select bool_or(null);
select bool_and(null);
select bool_or(true) from range(100);
select bool_and(true) from range(100);
select bool_or(d > '2021-02-09') as or_result, bool_and(d > '2021-02-09') as and_result from t;
select d,bool_or(d > '2021-02-09') as or_result, bool_and(d > '2021-02-09') as and_result from t group by d;
select bool_or(d > '2021-02-09') over (partition by d) from t order by d;
select bool_and(d > '2021-02-09') over (partition by d) from t order by d;
select corr(null,null);
select corr(1,1);
select k, corr(v, v2) from aggr group by k;
select corr(v, v2) from aggr;
select corr(v, v2) over (partition by k) from aggr;
select count(*), count(1), count(100), count(null), count(distinct 1);
select count(*), count(1), count(i), count(coalesce(i, 1)), count(distinct i), count(distinct 1) from integers;
select count(1 order by 1);
select i, count(*) from integers group by i order by i;
select i, count() from integers group by i order by i;
select covar_pop(3,3), covar_pop(null,3), covar_pop(3,null), covar_pop(null,null);
select covar_samp(3,3), covar_samp(null,3), covar_samp(3,null), covar_samp(null,null);
select covar_pop(nextval('seqx'),nextval('seqy'));
select covar_pop(x,y), covar_pop(x,1), covar_pop(1,y), covar_pop(x,null), covar_pop(null,y) from integers;
select covar_samp(x,y), covar_samp(x,1), covar_samp(1,y), covar_samp(x,null), covar_samp(null,y) from integers;
select covar_pop(x,y), covar_samp(x,y) from integers where x > 100;
select covar_pop(null, null), covar_samp(null, null) from integers;
select count(i), count(distinct i), sum(i), sum(distinct i) from distinctagg;
select count(i), count(distinct i), sum(i), sum(distinct i) from distinctagg group by j order by j;
select string_agg(s,','), string_agg(distinct s, ',') from strings;
select count(*), count(i), stddev_samp(i), sum(i), sum(distinct i), first(i), last(i), max(i), min(i) from integers where i > 100;
select count(*) from emptyaggr;
select sum(i), count(i), count(distinct i), count(*), avg(i), count(*)+1, count(i)+1, min(i), min(i+1), min(i)+1 from emptyaggr;
select entropy(null);
select entropy(1);
select entropy(k) from aggr ;
select entropy(2) from range(100);
select entropy(k) from aggr group by k%2;
select entropy(name) from names;
select entropy(k) over (partition by k%2) from aggr;
select first(b) from tbl where a=2;
select arbitrary(b) from tbl where a=2;
select first(b) from tbl where a=1;
select first(b) from tbl where a=1 group by a;
select first(b) from tbl where a=0;
select first(b) from tbl where a=0 group by b;
select a, first(b) from tbl group by a order by a;
select first(i) from (values (null::int32)) tbl(i);
select j * 2 from integer group by j * 2 order by j * 2;
select integer.j * 2 from integer group by j * 2 order by j * 2;
select j * 2 from integer group by integer.j * 2 order by j * 2;
select j * 2 from integer group by j * 2 order by integer.j * 2;
select integer.j * 2 from integer group by j * 2 order by integer.j * 2;
select j * 2 from integer group by integer.j * 2 order by integer.j * 2;
select integer.j * 2 from integer group by integer.j * 2 order by j * 2;
select integer.j * 2 from integer group by integer.j * 2 order by integer.j * 2;
select j * 2 as i from integer group by j * 2 order by i;
select histogram(null);
select histogram(1);
select histogram('、');
select histogram(2) from range(100);
select histogram(g) from hist_data;
select histogram(e) from hist_data;
select histogram(g) from hist_data where g < 3;
select histogram(name) from names;
select histogram(cast('2021-08-20' as timestamp_s));
select histogram(cast('2021-08-20' as timestamp_ms));
select histogram(cast('2021-08-20' as timestamp_ns));
select histogram(cast('15:05:42' as time));
select histogram(cast('2022-01-02' as date));
select g,histogram(g) over (partition by g%2) from hist_data;
select histogram(e) from enums;
select c0, histogram(c1) from tmp group by c0;
select favg(n) - '2251799813685248.5'::double from doubles;
select fsum(n)::bigint from doubles;
select sumkahan(n)::bigint from doubles;
select kahan_sum(n)::bigint from doubles;
select kurtosis(null);
select kurtosis(1);
select kurtosis(i) from (values (0), (0), (0), (0), (0), (0)) tbl(i);
select kurtosis(10) from range (5);
select kurtosis(k), kurtosis(v), kurtosis(v2) from aggr;
select kurtosis(v2) from aggr group by v;
select kurtosis(v2) over (partition by v) from aggr;
select last(i) from five;
select i % 3 as g, last(i) from five group by 1 order by 1;
select last(i order by 5-i) from five;
select i % 3 as g, last(i order by 5-i) from five group by 1 order by 1;
select i::integer % 3 as g, last(i order by 5-i) from five group by 1 order by 1;
select last(d), last(dt), last(t), last(s) from five_dates;
select i % 3 as g, last(d), last(dt), last(t), last(s) from five_dates group by 1 order by 1;
select last(d order by 5-i), last(dt order by 5-i), last(t order by 5-i), last(s order by 5-i) from five_dates;
select i % 3 as g, last(d order by 5-i), last(dt order by 5-i), last(t order by 5-i), last(s order by 5-i) from five_dates group by 1 order by 1;
select last(s), last(l), last(r) from five_complex;
select i % 3 as g, last(s), last(l), last(r) from five_complex group by 1 order by 1;
select last(s order by 5-i), last(l order by 5-i), last(r order by 5-i) from five_complex;
select i % 3 as g, last(s order by 5-i), last(l order by 5-i), last(r order by 5-i) from five_complex group by 1 order by 1;
select last(b) from tbl where a=2;
select last(b) from tbl where a=1;
select last(b) from tbl where a=1 group by a;
select last(b) from tbl where a=0;
select last(b) from tbl where a=0 group by b;
select a, last(b) from tbl group by a order by a;
select last(i) from (values (null::int32)) tbl(i);
select list_extract(list(i), 1) from list_extract_test group by g;
select list_extract(list(i), 2) from list_extract_test group by g;
select list_extract(list(i), 3) from list_extract_test group by g;
with t as ( values ('a',1), ('c',3), ('b',2) ) select list(col0 order by col1) from t;
select g, list(i order by i asc) from list_extract_test group by g;
select g, list(i order by i asc nulls first) from list_extract_test group by g;
select g, list(i order by i asc nulls last) from list_extract_test group by g;
select g, list(i order by i desc) from list_extract_test group by g;
select g, list(i order by i desc nulls first) from list_extract_test group by g;
select g, list(i order by i desc nulls last) from list_extract_test group by g;
select g, list(i order by i asc) filter (where i <> 3) from list_extract_test group by g;
select g, list(i order by i asc) filter (where i is null) from list_extract_test group by g;
select g, list(i order by i asc) filter (where i = 1337) from list_extract_test group by g;
select mad(null), mad(1);
select mad(null), mad(1) from range(2000);
select mad(r::tinyint) from tinys;
select mad(r::decimal(4,1)) from tinys;
select mad(null::tinyint) from tinys;
select mad(null::decimal(4,1)) from tinys;
select mad(42::tinyint) from tinys;
select mad(42::decimal(4,1)) from tinys;
select mad(r::smallint) from numerics;
select mad(r::integer) from numerics;
select mad(r::bigint) from numerics;
select mad(r::hugeint) from numerics;
select mad(r::float) from numerics;
select mad(r::double) from numerics;
select mad(r::decimal(8,1)) from numerics;
select mad(r::decimal(12,1)) from numerics;
select mad(r::decimal(18,1)) from numerics;
select mad(r::decimal(24,1)) from numerics;
select mad(null::smallint) from numerics;
select mad(null::integer) from numerics;
select mad(null::bigint) from numerics;
select mad(null::hugeint) from numerics;
select mad(null::float) from numerics;
select mad(null::double) from numerics;
select mad(null::decimal(8,1)) from numerics;
select mad(null::decimal(12,1)) from numerics;
select mad(null::decimal(18,1)) from numerics;
select mad(null::decimal(24,1)) from numerics;
select mad(42::smallint) from numerics;
select mad(42::integer) from numerics;
select mad(42::bigint) from numerics;
select mad(42::hugeint) from numerics;
select mad(42::float) from numerics;
select mad(42::double) from numerics;
select mad(42::decimal(8,1)) from numerics;
select mad(42::decimal(12,1)) from numerics;
select mad(42::decimal(18,1)) from numerics;
select mad(42::decimal(24,1)) from numerics;
select mad(('2018-01-01'::date + interval (r) day)::date) from numerics;
select mad('2018-01-01'::timestamp + interval (r) hour) from numerics;
select mad('00:00:00'::time + interval (r) second) from numerics;
select mad(x) from (values ('127'::decimal(3,0)), ('-128'::decimal(3,0))) tbl(x);
select mad(x) from (values ('32767'::decimal(5,0)), ('-32768'::decimal(5,0))) tbl(x);
select mad(x) from (values ('2147483647'::decimal(10,0)), ('-2147483648'::decimal(10,0))) tbl(x);
select mad(x) from (values ('294247-01-10'::date), ('290309-12-22 (bc)'::date)) tbl(x);
select mad(x) from (values ('294247-01-10 04:00:54.775806'::timestamp), ('290309-12-22 (bc) 00:00:00'::timestamp) ) tbl(x);
select mad(x) from (values ('23:59:59.999999'::time), ('00:00:00'::time)) tbl(x);
select median(null), median(1);
select median(null), median(1) from range(2000);
select median(r) from quantile;
select median(r::float) from quantile;
select median(r::double) from quantile;
select median(r::tinyint) from quantile where r < 100;
select median(r::smallint) from quantile;
select median(r::integer) from quantile;
select median(r::bigint) from quantile;
select median(r::hugeint) from quantile;
select median(r::decimal(10,2)) from quantile;
select median(null) from quantile;
select median(42) from quantile;
select min(l) from lists where l[1]>2;
select min(l) from lists where l[0]>2;
select mode(null);
select mode(1);
select mode(v) from aggr;
select mode(2) from range(100);
select case when ( value = 10 or value = 20) then true else false end from (select mode(v) as value from aggr) as t;
select k, mode(v) from aggr group by k order by k;
select mode(name) from names;
select k, v, mode(v) over (partition by k) from aggr order by k, v;
select mode(v) from dates;
select k, mode(v) from dates group by k;
select k, v, mode(v) over (partition by k) from dates order by k, v;
select mode(v) from times;
select k, mode(v) from times group by k;
select k, v, mode(v) over (partition by k) from times order by k, v;
select mode(v) from timestamps;
select k, mode(v) from timestamps group by k;
select k, v, mode(v) over (partition by k) from timestamps order by k, v;
select mode(v) from intervals;
select k, mode(v) from intervals group by k;
select k, v, mode(v) over (partition by k) from intervals order by k, v;
select mode(v) from hugeints;
select k, mode(v) from hugeints group by k;
select k, v, mode(v) over (partition by k) from hugeints order by k, v;
select c0, sum(c1), min(c1), max(c1) from t1 group by c0 order by 1, 2, 3, 4;
select year, sum(val), count(val), count(*) from timeseries group by year order by year;
select year, list(val), string_agg(val, ',') from timeseries group by year order by year;
select a, b, c, d, e from manycolumns group by 1, 2, 3, 4, 5;
select count(distinct i), min(i), max(i), sum(i) / count(i) from (select t::tinyint t1 from tinyints group by t1) tbl(i);
select count(distinct i), min(i), max(i), sum(i) / count(i) from (select t::smallint t1 from smallints group by t1) tbl(i);
select extract(year from d), extract(month from d) from dates group by 1, 2;
select product(null);
select product(1);
select product(i) from integers;
select product(2) from range(100);
select product(2) from range(100) tbl(i) where i % 2 != 0;
select product(i) from integers group by i%2;
select product(i) over (partition by i%2) from integers;
select quantile_cont(r, 0.5) from quantile;
select quantile_cont(r::decimal(10,2), 0.5) from quantile;
select quantile_cont(r, 1.0) from quantile;
select quantile_cont(r, 0.0) from quantile;
select quantile_cont(null, 0.5) from quantile;
select quantile_cont(42, 0.5) from quantile;
select quantile_cont(null, 0.5);
select quantile_cont(42, 0.5);
select quantile_cont(r, 0.25), quantile_cont(r, 0.5), quantile_cont(r, 0.75) from quantile;
select quantile_cont(d::smallint, 0.25), quantile_cont(d::smallint, 0.5), quantile_cont(d::smallint, 0.75) from range(0,100) tbl(d);
select quantile_cont(d::integer, 0.25), quantile_cont(d::integer, 0.5), quantile_cont(d::integer, 0.75) from range(0,100) tbl(d);
select quantile_cont(d::bigint, 0.25), quantile_cont(d::bigint, 0.5), quantile_cont(d::bigint, 0.75) from range(0,100) tbl(d);
select quantile_cont(d::hugeint, 0.25), quantile_cont(d::hugeint, 0.5), quantile_cont(d::hugeint, 0.75) from range(0,100) tbl(d);
select quantile_cont(d::float, 0.25), quantile_cont(d::float, 0.5), quantile_cont(d::float, 0.75) from range(0,100) tbl(d);
select quantile_cont(d::double, 0.25), quantile_cont(d::double, 0.5), quantile_cont(d::double, 0.75) from range(0,100) tbl(d);
select mod(r,1000) as g, quantile_cont(r, 0.25) from quantile group by 1 order by 1;
select quantile_cont('2021-01-01'::timestamp + interval (r) second, 0.5) from quantile;
select quantile_cont(('1990-01-01'::date + interval (r/100) day)::date, 0.5) from quantile;
select quantile_cont('00:00:00'::time + interval (r/100) second, 0.5) from quantile;
select quantile_cont(1, 0.1) from quantile;
select quantile_cont(t, 0.5) from (values (120::tinyint), (122::tinyint)) tbl(t);
select quantile_cont(t, 0.5) from tinyints;
select quantile_cont(t, 0.5) from (values (32764::smallint), (32766::smallint)) tbl(t);
select quantile_cont(t, 0.5) from smallints;
select quantile_cont(t, 0.5) from (values (2147483642::integer), (2147483644::integer)) tbl(t);
select quantile_cont(t, 0.5) from integers;
select quantile_cont(t, 0.5) from (values (9223372036854775794::bigint), (9223372036854775796::bigint)) tbl(t);
select quantile_cont(t, 0.5) from bigints;
select quantile_cont('2021-01-01'::timestamp + interval (r/100) hour, [0.25, 0.5, 0.75]) from quantiles;
select quantile_cont('1990-01-01'::date + interval (r/100) day, [0.25, 0.5, 0.75]) from quantiles;
select quantile_cont('00:00:00'::time + interval (r/100) second, [0.25, 0.5, 0.75]) from quantiles;
select quantile_cont(r, [0.25, 0.5, 0.75]) from quantiles;
select quantile_cont(d::smallint, [0.25, 0.5, 0.75]) from range(0,100) tbl(d);
select quantile_cont(d::integer, [0.25, 0.5, 0.75]) from range(0,100) tbl(d);
select quantile_cont(d::bigint, [0.25, 0.5, 0.75]) from range(0,100) tbl(d);
select quantile_cont(d::hugeint, [0.25, 0.5, 0.75]) from range(0,100) tbl(d);
select quantile_cont(d::float, [0.25, 0.5, 0.75]) from range(0,100) tbl(d);
select quantile_cont(d::double, [0.25, 0.5, 0.75]) from range(0,100) tbl(d);
select mod(r,1000) as g, quantile_cont(r, [0.25, 0.5, 0.75]) from quantiles group by 1 order by 1;
select quantile_cont(1, [0.25, 0.5, 0.75]) from quantiles;
select quantile_cont(r, []) from quantiles;
select quantile_disc(r, 0.5) from quantile;
select quantile_disc(r::decimal(10,2), 0.5) from quantile;
select quantile_disc(r, 1.0) from quantile;
select quantile_disc(r, 0.0) from quantile;
select quantile_disc(null, 0.5) from quantile;
select quantile_disc(42, 0.5) from quantile;
select quantile_disc(null, 0.5);
select quantile_disc(42, 0.5);
select quantile_disc(r, 0.1), quantile_disc(r, 0.5), quantile_disc(r, 0.9) from quantile;
select quantile_disc(d::smallint, 0.1), quantile_disc(d::smallint, 0.5), quantile_disc(d::smallint, 0.9) from range(0,100) tbl(d);
select quantile_disc(d::integer, 0.1), quantile_disc(d::integer, 0.5), quantile_disc(d::integer, 0.9) from range(0,100) tbl(d);
select quantile_disc(d::bigint, 0.1), quantile_disc(d::bigint, 0.5), quantile_disc(d::bigint, 0.9) from range(0,100) tbl(d);
select quantile_disc(d::hugeint, 0.1), quantile_disc(d::hugeint, 0.5), quantile_disc(d::hugeint, 0.9) from range(0,100) tbl(d);
select quantile_disc(d::float, 0.1), quantile_disc(d::float, 0.5), quantile_disc(d::float, 0.9) from range(0,100) tbl(d);
select quantile_disc(d::double, 0.1), quantile_disc(d::double, 0.5), quantile_disc(d::double, 0.9) from range(0,100) tbl(d);
select quantile_disc(d::varchar, 0.1), quantile_disc(d::varchar, 0.5), quantile_disc(d::varchar, 0.9) from range(0,100) tbl(d);
select quantile_disc(null::varchar, 0.1) from range(0,100) tbl(d);
select quantile_disc('prefix-' || d::varchar || '-suffix', 0.1) from range(0,100) tbl(d);
select median(d::varchar) from range(0,100) tbl(d);
select median(d::varchar) from range(0,100) tbl(d) where d > 100;
select mod(r,10) as g, quantile_disc(r, 0.1) from quantile group by 1 order by 1;
select quantile_disc('2021-01-01'::timestamp + interval (r) hour, 0.5) from quantile;
select quantile_disc('1990-01-01'::date + interval (r) day, 0.5) from quantile;
select quantile_disc('00:00:00'::time + interval (r) second, 0.5) from quantile;
select quantile_disc(interval (r) second, 0.5) from quantile;
select quantile_disc(1, 0.1) from quantile;
select quantile_disc(r, [0.1, 0.5, 0.9]) from quantiles;
select quantile_disc(d::smallint, [0.1, 0.5, 0.9]) from range(0,100) tbl(d);
select quantile_disc(d::integer, [0.1, 0.5, 0.9]) from range(0,100) tbl(d);
select quantile_disc(d::bigint, [0.1, 0.5, 0.9]) from range(0,100) tbl(d);
select quantile_disc(d::hugeint, [0.1, 0.5, 0.9]) from range(0,100) tbl(d);
select quantile_disc(d::float, [0.1, 0.5, 0.9]) from range(0,100) tbl(d);
select quantile_disc(d::double, [0.1, 0.5, 0.9]) from range(0,100) tbl(d);
select quantile_disc(d::varchar, [0.1, 0.5, 0.9]) from range(0,100) tbl(d);
select mod(r,10) as g, quantile_disc(r, [0.1, 0.5, 0.9]) from quantiles group by 1 order by 1;
select quantile_disc(1, [0.1, 0.5, 0.9]) from quantiles;
select quantile_disc(r, []) from quantiles;
select quantile_disc('2021-01-01'::timestamp + interval (r) hour, [0.1, 0.5, 0.9]) from quantiles;
select quantile_disc('1990-01-01'::date + interval (r) day, [0.1, 0.5, 0.9]) from quantiles;
select quantile_disc('00:00:00'::time + interval (r) second, [0.1, 0.5, 0.9]) from quantiles;
select quantile_disc(interval (r) second, [0.1, 0.5, 0.9]) from quantiles;
select regr_avgx(null,null);
select regr_avgx(1,1);
select regr_avgy(null,null);
select regr_avgy(1,1);
select regr_count(null,null);
select regr_count(1,1);
select regr_slope(null,null);
select regr_slope(1,1);
select regr_r2(null,null);
select regr_r2(1,1);
select regr_r2(1e230*i, 0) from range(5) tbl(i);
select regr_r2(0, i) from range(5) tbl(i);
select regr_sxx(2e230*i, 0) from range(5) tbl(i);
select regr_sxx(null,null);
select regr_sxx(1,1);
select regr_syy(null,null);
select regr_syy(1,1);
select regr_sxy(null,null);
select regr_sxy(1,1);
select regr_intercept(null,null);
select regr_intercept(1,1);
select k, regr_avgx(v, v2) from aggr group by k;
select k, regr_avgy(v, v2) from aggr group by k;
select k, count(*), regr_count(v, v2) from aggr group by k;
select k, regr_slope(v, v2) from aggr group by k;
select k, regr_r2(v, v2) from aggr group by k;
select k, regr_sxx(v, v2) from aggr group by k;
select k, regr_syy(v, v2) from aggr group by k;
select k, regr_sxy(v, v2) from aggr group by k;
select k, regr_intercept(v, v2) from aggr group by k;
select regr_avgx(v, v2) from aggr ;
select regr_avgy(v, v2) from aggr ;
select regr_count(v, v2) from aggr ;
select regr_slope(v, v2) from aggr ;
select regr_r2(v, v2) from aggr ;
select regr_sxx(v, v2) from aggr ;
select regr_syy(v, v2) from aggr ;
select regr_sxy(v, v2) from aggr;
select regr_intercept(v, v2) from aggr;
select regr_avgx(v, v2) over (partition by k) from aggr;
select regr_avgy(v, v2) over (partition by k) from aggr;
select regr_count(v, v2) over (partition by k) from aggr;
select regr_slope(v, v2) over (partition by k) from aggr;
select regr_r2(v, v2) over (partition by k) from aggr;
select regr_sxx(v, v2) over (partition by k) from aggr;
select regr_syy(v, v2) over (partition by k) from aggr;
select regr_sxy(v, v2) over (partition by k) from aggr;
select regr_intercept(v, v2) over (partition by k) from aggr;
select count(1), min(1), first(1), last(1),max(1), sum(1), string_agg('hello', ',');
select count(null), min(null), first(null), last(null), max(null), sum(null), string_agg(null, null);
select first(null);
select last(null);
select null as a, null as b, 1 as id union select cast('00:00:00' as time) as a, cast('12:34:56' as time) as b, 2 as id order by 1;
select count(1), min(1), first(1), last(1), max(1), sum(1), string_agg('hello', ',') from integers;
select count(null), min(null), first(null), last(null), max(null), sum(null), string_agg(null, null) from integers;
select sem(null);
select sem(1);
select k, sem(v),sem(v2) from aggr group by k;
select sem(v),sem(v2) from aggr;
select sem(v) over (partition by k) from aggr;
select count(*) as total_rows, count(*) filter (where i <= 5) as lte_five, count(*) filter (where i % 2 = 1) as odds from generate_series(1,11) tbl(i);
select count(*) filter (where i % 2 = 1) as odds, count(*) filter (where i <= 5) as lte_five, count(*) as total_rows from generate_series(1,11) tbl(i);
select count(*) filter (where i <= 5) as lte_five, count(*) filter (where i % 2 = 1) as odds, count(*) as total_rows from generate_series(1,11) tbl(i);
select sum(pay) filter (where gender = 'male'), sum(pay) filter (where gender = 'female'), sum(pay) from issue3105;
select sum(pay), sum(pay) filter (where gender = 'male'), sum(pay) filter (where gender = 'female') from issue3105;
select sum(pay) filter (where gender = 'male'), sum(pay), sum(pay) filter (where gender = 'female') from issue3105;
select skewness(null);
select skewness(1);
select skewness (10) from range (5);
select skewness(k), skewness(v), skewness(v2) from aggr;
select skewness(v2) from aggr group by v;
select skewness(v2) over (partition by v) from aggr order by v;
select count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) from dummy;
select g, count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) from dummy group by g order by g;
select g, finalize(count_star_state),finalize(count_state), finalize(sum_state), finalize(avg_state)::integer, finalize(min_state), finalize(max_state) from state order by g;
select sum(d)*2 from dummy;
select g, sum(d)*2 combined_sum from dummy group by g order by g;
select count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) from dummy where false;
select count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) from (select null::integer d);
select count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) from (select null::integer d, g from dummy);
select argmin(a,b), argmax(a,b) from (values (1,1), (2,2), (8,8), (10,10)) s(a,b);
select g, first(d), last(d), fsum(d), favg(d), product(d), bit_xor(d), bool_and(d > 5) from dummy group by g order by g;
select corr(d, d+1), covar_pop(d, d+1)from dummy;
select g, finalize(count_star_state),finalize(count_state), finalize(sum_state), finalize(avg_state)::integer, finalize(min_state), finalize(max_state) from state_view order by g;
select stddev_samp(1);
select var_samp(1);
select round(stddev_samp(val), 1) from stddev_test;
select round(stddev_samp(val), 1) from stddev_test where val is not null;
select grp, sum(val), round(stddev_samp(val), 1), min(val) from stddev_test group by grp order by grp;
select grp, sum(val), round(stddev_samp(val), 1), min(val) from stddev_test where val is not null group by grp order by grp;
select round(stddev_pop(val), 1) from stddev_test;
select round(stddev_pop(val), 1) from stddev_test where val is not null;
select grp, sum(val), round(stddev_pop(val), 1), min(val) from stddev_test group by grp order by grp;
select grp, sum(val), round(stddev_pop(val), 1), min(val) from stddev_test where val is not null group by grp order by grp;
select round(var_samp(val), 1) from stddev_test;
select round(variance(val), 1) from stddev_test;
select round(var_samp(val), 1) from stddev_test where val is not null;
select grp, sum(val), round(var_samp(val), 1), min(val) from stddev_test group by grp order by grp;
select grp, sum(val), round(var_samp(val), 1), min(val) from stddev_test where val is not null group by grp order by grp;
select round(var_pop(val), 1) from stddev_test;
select round(var_pop(val), 1) from stddev_test where val is not null;
select grp, sum(val), round(var_pop(val), 2), min(val) from stddev_test group by grp order by grp;
select grp, sum(val), round(var_pop(val), 2), min(val) from stddev_test where val is not null group by grp order by grp;
select round(stddev(val), 1) from stddev_test_alias;
select stddev(0) from range(10);
select string_agg('a',',');
select string_agg('a',','), string_agg(null,','), string_agg('a', null), string_agg(null,null);
select g, string_agg(x,'|') from strings group by g order by g;
select string_agg(x,',') from strings where g > 100;
select string_agg(1, 2);
select group_concat('a', ',');
select group_concat('a');
select g, group_concat(x) from strings group by g order by g;
select string_agg(x order by x asc), string_agg(x, '|' order by x asc) from strings;
select string_agg(x order by x desc), string_agg(x,'|' order by x desc) from strings;
select g, string_agg(x order by x asc), string_agg(x, '|' order by x asc) from strings group by g order by 1;
select g, string_agg(x order by x desc), string_agg(x, '|' order by x desc) from strings group by g order by 1;
select string_agg(g::varchar, ',' order by concat(x, y) asc) from strings order by 1;
select string_agg(g::varchar, ',' order by x, y) from strings order by 1;
select string_agg(x, ',' order by x desc), string_agg(x, ',' order by x asc) from strings;
select y, string_agg(x, ',' order by x desc) filter (where g < 3) from strings group by y order by 1;
select g, string_agg(distinct y, ',' order by x desc) filter (where g < 4) from strings group by g order by 1;
select i1.i, (select string_agg(i::varchar, ',' order by i1.i+i) from integers where i<=i1.i) c1 from integers i1 order by 1 nulls last;
select count(*) from (select g, string_agg(x,',') from strings group by g) t1;
select g, string_agg(x order by x desc) from strings group by g order by 1, 2;
select g, string_agg(x,',' order by x desc) from strings group by g order by 1, 2;
select sum(i) from integers;
select sum(1) from integers;
select sum(-1) from integers;
select sum(-1) from integers where i=-1;
select sum(-1) from integers where i>10000;
select sum(b) from bigints;
select sum(n order by abs(n))::bigint from doubles;
select distinct t1 from t order by t1, t2;
select distinct on (1) t1, t2 from t order by t1, t2;
select distinct t1 from t union select distinct t1 from t order by t1;
select distinct t1 from t union all select distinct t1 from t order by t1;
select distinct a, b from test order by a, b;
select distinct test.a, b from test order by a, b;
select distinct a from test order by a;
select distinct b from test order by b;
select distinct a, sum(b) from test group by a order by a;
select distinct max(b) from test group by a;
select distinct case when a > 11 then 11 else a end from test;
select distinct on (i) i, j from integers where i <> 2;
select distinct on (j) i, j from integers where i <> 2;
select distinct on (j, i) i, j from integers where i <> 2;
select distinct on (j + 1, i * 3) i, j from integers where i <> 2;
select distinct on (1) i, j from integers order by i;
select distinct on (1) i, j from integers order by i limit 1;
select distinct on (1) i, j from integers order by i limit 1 offset 1;
select distinct on (2) i, j from integers order by 2;
select distinct on (2) j, k from integers order by 2;
select distinct on (3) i, j, k from integers order by 2;
select distinct on (3) i, j, k from integers order by 3;
select distinct on (2) j, (select i from integers) from integers order by 2;
select distinct on (2) j, (select distinct on (i) i from integers order by 1) from integers order by 2;
select distinct on (i) i, j from integers order by j;
select * from (select distinct on (i) i, j from integers) tbl1 where i <> 2;
select distinct on (i) i, j from integers order by k;
select distinct on (i) i, j, k from integers order by k;
select distinct on (integers.i) i, j from integers order by 1, 2;
select distinct on (i) integers.i, integers.j from integers order by 1, 2;
select distinct on (integers.i) integers.i, integers.j from integers order by i, j;
select distinct i%2 from integers order by 1;
select distinct i % 2 from integers where i<3 order by i;
select distinct on (1) i % 2, i from integers where i<3 order by i;
select distinct integers.i from integers order by i desc;
select distinct i from integers order by integers.i desc;
select distinct integers.i from integers order by integers.i desc;
select i%2, sum(i), sum(g) from integers group by 1 order by 1;
select i%2, sum(i), sum(g) from integers group by i order by 1;
select (g+i)%2, sum(i), sum(g) from integers group by 1 order by 1;
select (g+i)%2, sum(i), sum(g) from integers group by g, i order by 1, 2;
select g, i, g%2, sum(i), sum(g) from integers group by 1, 2, 3 order by 1, 2, 3, 4;
select t_k0, count(*) from t group by t_k0 order by 1;
select sum(a), count(*), avg(a) from test;
select count(*) from test;
select sum(a), count(*) from test where a = 11;
select sum(a), sum(b), sum(a) + sum (b) from test;
select sum(a+2), sum(a) + 2 * count(*) from test;
select b, sum(a), sum(a+2), avg(a) from test group by b order by b;
select b, sum(a) from test group by b order by count(a);
select b, sum(a) from test group by b order by count(a) desc;
select b, sum(a), count(*), sum(a+2) from test group by b order by b;
select b % 2 as f, sum(a) from test group by f order by f;
select b, sum(a), count(*), sum(a+2) from test where a <= 12 group by b order by b;
select i, i + 10 from integers group by i order by i;
select i, sum(j), first(j) from integers group by i order by i;
select i, sum(j), last(j) from integers group by i order by i;
select 1 as k, sum(i) from integers group by k order by 2;
select 1 as i, sum(i) from integers group by i order by 2;
select i % 2 as k, sum(i) from integers group by k, k order by 1;
select i, sum(i) from integers group by i order by 1;
select i, i % 2 as i, sum(i) from integers group by i order by 1;
select test.b, sum(a) from test group by b order by count(a) desc;
select i % 2 as k, sum(i) from integers where i is not null group by k having k>0;
select i % 2 as k, sum(i) from integers where i is not null group by k having i%2>0;
select i % 2 as k, sum(i) from integers where i is not null group by 1 having i%2>0;
select i, i % 2 as i, sum(i) from integers group by i order by i, 3;
select i, i % 2 as k, sum(i) from integers group by i order by k, 3;
select i, i % 2 as k, sum(i) from integers group by i order by i;
select i, sum(i) from integers group by i order by i;
select (10-i) as k, sum(i) from integers group by k order by first(i);
select a, sum(b) from test group by a order by a;
select i, j, sum(k), count(*), count(k) from integers group by i, j order by 1, 2;
select k, sum(v) from intlists group by k order by 2;
select k, least(v, 21) as c, sum(v) from intlists group by k, c order by 2, 3;
select k, sum(v) from strlists group by k order by 2;
select k, least(v, 21) as c, sum(v) from strlists group by k, c order by 2, 3;
select k, sum(v) from structs group by k order by 2;
select k, least(v, 21) as c, sum(v) from structs group by k, c order by 2, 3;
select k, sum(v) from struct_lint_lstr group by k order by 2;
select k, least(v, 21) as c, sum(v) from struct_lint_lstr group by k, c order by 2, 3;
select k, sum(v) from r2l3r4l5i4i2l3v group by k order by 2;
select k, least(v, 21) as c, sum(v) from r2l3r4l5i4i2l3v group by k, c order by 2, 3;
select k, sum(v) from longlists group by k order by 2;
select k, least(v, 21) as c, sum(v) from longlists group by k, c order by 2, 3;
select [1,2,3] a, count(*) from range(5) tbl(b) group by a;
select {'x': 1, 'y': 2, 'z': 3} a, count(*) from range(5) tbl(b) group by a;
select i, sum(j) from integers group by i order by i;
select grouping(course), course, count(*) from students group by course order by 1, 2, 3;
select grouping_id(course), course, count(*) from students group by course order by 1, 2, 3;
select grouping(course), grouping(type), course, type, count(*) from students group by course, type order by 1, 2, 3, 4, 5;
select course, type, count(*) from students group by course, type order by 1, 2, 3;
select course, type, count(*) from students group by (course, type) order by 1, 2, 3;
select course, count(*) from students group by rollup (course) order by 1, 2;
select course, type, count(*) from students group by rollup (course, type) order by 1, 2, 3;
select course, type, count(*) from students group by rollup ((course, type)) order by 1, 2, 3;
select course, type, count(*) from students group by rollup (course, type, course) order by 1, 2, 3;
select course, type, count(*) from students group by rollup (course), rollup (type) order by 1, 2, 3;
select b, sum(a) as sum from test group by b having b=21 order by b;
select b, sum(a) from test group by b having sum(a) < 20 order by b;
select b, sum(a) as sum from test group by b having sum < 20 order by b;
select b, sum(a) as sum from test group by b having sum(a) < 20 order by b;
select b, sum(a) as sum from test group by b having count(*) = 1 order by b;
select b, sum(a) from test group by b having sum(a)+10>28;
select b, sum(a) from test group by b having sum(a)>(select sum(t.a)*0.5 from test t);
select test.b, sum(a) from test group by test.b having sum(a)=(select sum(a) from test t where test.b=t.b) order by test.b;
select test.b, sum(a) from test group by test.b having sum(a)*2=(select sum(a)+sum(t.a) from test t where test.b=t.b) order by test.b;
select test.b, sum(a) from test group by test.b having sum(a)*2+2=(select sum(a)+sum(t.a)+count(t.a) from test t where test.b=t.b) order by test.b;
select test.b, sum(a) from test group by test.b order by (select sum(a) from test t where test.b=t.b) desc;
select sum(a) from test where a=13 having sum(a) > 11;
select sum(a) from test where a=13 having sum(a) > 20;
select sum(a) from test having sum(a)>10;
select sum(a) from test having sum(a)<10;
select sum(a) from test having count(*)>1;
select sum(a) from test having count(*)>10;
select * from qt qualify row_number() over (partition by b order by c) = 1 order by b;
select a, b, c, row_number() over (partition by b order by c) as row_num from qt qualify row_num = 1 order by b;
select * from exam qualify rank() over (order by mark desc) = 4;
select * from exam qualify rank() over (partition by student order by mark desc) = 2 order by student;
select * from exam qualify first_value(mark) over (partition by student order by mark) >= 60 order by mark;
select * from exam qualify last_value(mark) over (partition by student order by mark) >= 85 order by mark;
select * from power qualify rank() over (partition by plant order by date desc) = 2 order by plant;
select * from (select plant, date, avg(mwh) over (partition by plant order by date asc range between interval 3 days preceding and interval 3 days following) as avgmwh from power order by plant, avgmwh desc) qualify row_number() over (partition by plant order by avgmwh desc) = 1 order by plant;
select b, sum(a) as sum from test group by b qualify row_number() over (partition by b) >= 1 and sum < 20 order by b;
select * from qt qualify row_number() over (partition by b order by c) = (select max(c) from qt) order by b;
select unique1 from tenk1 qualify cast(cume_dist() over (partition by four order by ten)*10 as integer) = 5 order by four, ten;
select unique1 from tenk1 qualify first_value(ten) over (partition by four order by ten) = 1 order by four, ten;
select unique1 from tenk1 qualify lead(ten * 2, 1, -1) over (partition by four order by ten) = -1 order by four, ten;
select * from (select b from test as t group by b qualify rank() over (partition by t.b) = 1) qualify row_number() over (partition by b) = 1;
select * from test qualify row_number() over (partition by test.b) = (select max(a) from qt group by qt.b qualify rank() over (partition by qt.b) = 1 order by qt.b);
select plus1(3);
select plus1(5);
select b, sum(a) from test.v group by b qualify row_number() over (partition by b) = 1;
select * from test;
select * from test where k=2;
select * from test where k=3;
select * from test where m=2;
select stats(m) from test limit 1;
select * from test where i='1';
select * from test where i=1;
select stats(i) from test limit 1;
select * from constrainty;
select * from test2;
select count(j), sum(j) from test;
select * from tbl2;
select * from tbl;
select * from tbl5;
select * from entry;
select * from entry4;
select * from entry3;
select i from t2 order by i;
select i from t1 order by i;
select i from t3 order by i;
select i from t2 order by i;
select * from tbl;
select * from tbl1;
select * from tbl3;
select * from tbl4;
select * from v1;
select * from t2;
select * from vw2;
select * from vw;
select * from vw;
select * from vw1;
select * from vw3;
select * from vw4;
select count(*), count(i), sum(i) from integers;
select i % 2 as p, sum(i) as sum_i from integers group by p order by 1;
select alias(i % 2) as p, alias(sum(i)) as sum_i from integers group by p order by 1;
select i + 1 + 1 + 1 as k, abs(i) as l from integers where i=1 order by 1;
select alias(i + 1 + 1 + 1) as k, alias(abs(i)) as l from integers where i=1 order by 1;
select alias(i) as k, alias(i in (1)) as l, alias(i >= 10) as m, alias(1=0) as n from integers where i=1 order by 1;
select alias(case when i=1 then 19 else 0 end) as k, alias(i::varchar) as l from integers where i=1 order by 1;
select a, b, a * 2 as c, b * (a * 2) as d from test order by a;
select alias(a), alias(b), alias(a * 2) as c, alias(b * (a * 2)) as d from test order by a;
select alias(hello) from test;
select alias(x) from (select hello as x from test) tbl;
select hello from (select 42) tbl(`hello`);
select i, count(*) as k from integers group by i having k=1 order by i;
select 1 as i, count(*) from integers group by i having i=2;
select i as j, count(*) as i from integers group by j having integers.i=1 order by i;
select i as j, count(*) as i from integers group by j having j=1 order by i;
select count(i) as j from integers having j=5;
select count(i) as j from integers having j=j;
select count(*) from (select i, sum(random()) as k from integers group by i having k=k) tbl(i, k);
select test from test;
select main.test from main, test;
select test from main, test;
select main.test from structs, test;
select null;
select null union all select cast(1 as boolean);
select null union all select null;
select null union all select null union all select null union all select null union all select cast(1 as boolean);
select (select null) union all select cast(1 as boolean);
select * from (select null) tbl(i) union all select cast(1 as boolean);
select * from (select (select null) union all select cast(1 as boolean)) tbl(i);
select * from (select null) tbl(i) union all select null;
select bool_and(i) from (select * from (select null) tbl(i) union all select cast(1 as boolean)) tbl(i);
select * from (select null) tbl(i), (select null) tbl2(j);
select bool_and(i), bool_and(j) from (select null) tbl(i), (select null) tbl2(j);
select null as a, null as b, 1 as id union select cast(1 as boolean) as a, cast(0 as boolean) as b, 2 as id;
select cast(1 as boolean) as a, cast(0 as boolean) as b, 1 as id union select null as a, null as b, 2 as id;
select null::integer as a, null::integer as b, 1 as id union select cast(1 as boolean) as a, cast(0 as boolean) as b, 2 as id;
select cast(1 as boolean) as a, cast(0 as boolean) as b, 1 as id union select null::integer as a, null::integer as b, 2 as id;
select * from v1 union all select cast(1 as boolean);
select * from v2;
select * from v2 union all select cast(1 as boolean);
select [null];
select [null] union all select [true];
select {'x': null};
select {'x': null} union all select {'x': true};
with cte as (select null) select * from cte;
with cte as (select null) select * from cte union all select cast(1 as boolean);
select true=1;
select true=0;
select false=0;
select false=1;
select 1=true;
select 0=true;
select 0=false;
select 1=false;
select true='1';
select true='0';
select false='0';
select false='1';
select true='true';
select true='false';
select false='false';
select false='true';
select '1'=true;
select '0'=true;
select '0'=false;
select '1'=false;
select cast(0.55 as date) as x;
select cast(-0.55 as date) as x;
select '1e308'::float;
select '1e310'::double;
select '-1e308'::float;
select '-1e310'::double;
select cast(0.5::float as float) as x;
select cast(0.55::float as float) as x;
select cast(1.5::float as float) as x;
select cast(-0.5::float as float) as x;
select cast(-0.55::float as float) as x;
select cast(-1.5::float as float) as x;
select cast(1=1 as varchar);
select cast(1=0 as varchar);
select cast('true' as boolean);
select cast('t' as boolean);
select cast('false' as boolean);
select cast('f' as boolean);
select cast(cast('12345' as integer) as boolean);
select cast(cast('0' as integer) as boolean);
select cast(cast('1' as tinyint) as boolean);
select cast(cast('0' as tinyint) as boolean);
select cast(cast('1' as smallint) as boolean);
select cast(cast('0' as smallint) as boolean);
select cast(cast('1' as integer) as boolean);
select cast(cast('1' as bigint) as boolean);
select cast(cast('0' as bigint) as boolean);
select cast(cast('1' as decimal) as boolean);
select cast(cast('0' as decimal) as boolean);
select cast(cast('1' as decimal(1,0)) as boolean);
select cast(cast('0' as decimal(1,0)) as boolean);
select cast(cast('1' as decimal(9,0)) as boolean);
select cast(cast('0' as decimal(9,0)) as boolean);
select cast(cast('1' as decimal(38,0)) as boolean);
select cast(cast('0' as decimal(38,0)) as boolean);
select cast(cast('1' as float) as boolean);
select cast(cast('0' as float) as boolean);
select cast(cast('1' as double) as boolean);
select cast(cast('0' as double) as boolean);
select cast(cast('1' as hugeint) as boolean);
select cast(cast('0' as hugeint) as boolean);
select cast('1e1' as integer);
select cast(' 1e1' as integer);
select cast('1e1' as double);
select cast(' 1e1' as double);
select (1=1)::varchar, (1=0)::varchar, null::boolean::varchar;
select 1::tinyint::varchar, 12::tinyint::varchar, (-125)::tinyint::varchar;
select 1::smallint::varchar, 12442::smallint::varchar, (-32153)::smallint::varchar;
select 1::integer::varchar, 12442952::integer::varchar, (-2000000111)::integer::varchar;
select 1::bigint::varchar, 1244295295289253::bigint::varchar, (-2000000111551166)::bigint::varchar;
select 2::float::varchar, 0.5::float::varchar, (-128.5)::float::varchar;
select 2::double::varchar, 0.5::double::varchar, (-128.5)::double::varchar;
select try_cast('hello' as integer);
select try_cast(3 as bigint), cast(3 as bigint), try_cast(2 as bigint), cast(3 as integer);
select try_cast from try_cast;
select try_cast(try_cast as bigint) from try_cast;
select try_cast(try_cast(try_cast as integer) as integer) from try_cast;
select * from test where (t::date) = '2021-02-04'::date;
select * from test where (t::date) = '2021-02-04';
select bigcolumn from mytable;
with cte as (select 42 `a`) select a from cte;
with `cte` as (select 42) select * from cte;
select integers.i from integers order by i;
select integers.i as i from integers group by i order by `integers`.`i`;
select integers.i as `zzz` from integers group by `zzz` order by `integers`.`i`;
with `cte`(`zzz`) as ( select integers.i as `zzz` from integers group by `zzz` ) select * from cte order by zzz;
select i from integers order by integers.i;
select i, j from integers order by integers.i;
select j from integers order by integers.j;
select tbl.k from (select j from integers) tbl(k) order by k;
select structs.s.i.k, `structs`.`s`.`i`.`k`, `structs`.`s`.`i`.`k` from structs;
select `structs`.`s`.`i`.`k` from structs group by `structs`.`s`.`i`.`k`;
select structs.s.i.k from structs group by structs.s.i.k;
select * from a join b using(x);
select * from a join b using(`x`);
select * from a join b using (hello);
select * from a join b using (hello, `hello`);
select * from a join b using (hello) join c using (hello);
select * from a join b using (hello) join c using (`hello`);
select * from a join b using (hello) join c using (hello) join d using (hello);
select * from a join b using (`hello`) join c using (`hello`) join d using (hello);
select * from a join b using (hello) join c using (hello) join d using (hello) join e using (hello);
select * from a full outer join b using (hello);
select * from a full outer join b using (hello) full outer join c using (hello);
select * from a full outer join b using (hello) full outer join c using (hello) full outer join d using (hello);
select * from a full outer join b using (hello) full outer join c using (hello) full outer join d using (hello) full outer join e using (hello);
select * from (select 1 `hello`, 2 `hello`) t1, (select 1 `hello`, 2 `hello`) t2;
select * from (select 1 `hello`, 2 `hello`) t1 join (select 1 `hello`, 2 `hello`) t2 using (hello);
select colname, colname2, colname3, colname4, colname5 from tablename;
select nextval('sequence1');
select sum(i) from integers;
select * from s1.integers;
select test_helper_last_error() like '%did you mean "hello"?%';
select test_helper_last_error() like '%did you mean "test.bye"?%';
select information_schema.foo(42);
select my_extract({'a': {'b': 42}});
select my_subquery_extract({'a': {'b': 42}});
select cte_sq(3,4);
select nested_cte(2, '2,2,2,2');
select ifelse(1, ifelse(1,'a','b'), 'c');
select ifelse(1, ifelse(0,'a','b'), 'c');
select ifelse(0, ifelse(1,'a','b'), 'c');
select ifelse(1, ifelse(1,a,'b'), 'c') from integers;
select mod_two(a), sum(a) from integers group by mod_two(a);
select double_add(1, 2, 3);
select triple_add1(1, 2, 3, 4);
select triple_add2(1, 2, 3, 4);
select add((select min(a) from integers), (select max(a) from integers));
select (select add(i1.a, a) from integers) from integers i1;
with ppterms as (select unnest(string_split_regex(regexp_replace(lower(strip_accents('quáck bárk')), '[^a-z]', ' ', 'g'), '\s+')) as term), qtermids as (select termid from fts_main_documents.dict as dict, ppterms where dict.term = ppterms.term), qterms as (select termid, docid from fts_main_documents.terms as terms where termid in (select qtermids.termid from qtermids)), subscores as ( select docs.docid, len, term_tf.termid, tf, df, (log((3 - df + 0.5) / (df + 0.5))* ((tf * (1.2 + 1)/(tf + 1.2 * (1 - 0.75 + 0.75 * (len / 4)))))) as subscore from (select termid, docid, count(*) as tf from qterms group by docid, termid) as term_tf join (select docid from qterms group by docid)  as cdocs on term_tf.docid = cdocs.docid join fts_main_documents.docs as docs on term_tf.docid = docs.docid join fts_main_documents.dict as dict on term_tf.termid = dict.termid) select name, score from (select docid, sum(subscore) as score from subscores group by docid) as scores join fts_main_documents.docs as docs on scores.docid = docs.docid order by score desc limit 1000;
select parameterized_cte(42);
select in_with_cte(1);
select in_with_cte(2);
select plus42(42);
select plus42(a) from integers;
select plus42(3) + a from integers;
select plus42(a) + plus1(a) from integers;
select deep_cte(42);
select in_next_n(3, 'seq', 5);
select in_next_n(12, 'seq', 5);
select in_next_n2(17, 'seq', 5);
select test('seq1', 'seq2', i) from integers;
select one();
select having_macro(1);
select having_macro(6);
select union_macro(1, 2, 3);
select union_macro(1, 2, 1);
select union_macro(1, 1, 2);
select in_expression_list(1, 2, 3);
select in_expression_list(1, 2, 1);
select in_expression_list(1, 1, 2);
select two();
select add_macro(a,a) from integers;
select add_macro(a,2) + add_macro(3,b) from integers, floats;
select ifelse(1,'true','false');
select ifelse(0,'true','false');
select ifelse(a = 1, 'true', 'false') from integers;
select ifelse(a = 0, 'true', 'false') from integers;
select ifelse(1, 'random', random());
select macros.add_macro(40,2);
select myavg(a) from integers;
select weird_avg(a) from integers;
select add_default5(3);
select add_default5(3, b := 6);
select two_default_params();
select two_default_params(a := 5);
select two_default_params(b := 3);
select subquery(1);
select subquery(null);
select subquery(3) + a from integers;
select subquery(a) from integers;
select a1(3);
select a1(3) + a from integers;
select a2(3);
select * from xt(200,'andrew');
select * from xt2(100,'m%');
select * from xt(id,1);
select * from test_tbl where id>=(select max(id) from xt(id,30));
select * from greek_tbl where id<=(select min(id) from xt(id,30));
select schema_name, function_name, function_type, description, return_type, parameters, parameter_types, varargs, macro_definition from duckdb_functions() where function_type = 'table_macro' and ( function_name = 'sgreek' or function_name = 'xt') order by function_name;
select distinct val from card_select();
select * from card_select(_suit:='clubs');
select * from card_select(_name:='king', _val_max:=13) order by suit;
select * from card_select(_name:='king', _val_max:=13, _suit:='hearts', _val_min:=10);
select suit from card_select_args(1, 13, _name:='king' ) order by suit;
select * from card_dfl();
select * from sc(name, suit, 4);
select * from sc2(50.0, 2);
select * from sc3(name);
select * from sc3(suit);
select sum(col0) from my_values(10.0,5.0);
select max(col0) from my_values_union(1.0,2.0,3.0,20.0);
select * from dates_between('2021-01-01', '2021-02-04');
select * from fibonacci(1, 2, 5, 10);
select * from car_pool_cube(producer, model, hcnt:=4.0);
select * from car_pool_rollup(model, yyyy, hcnt:=4);
select * from car_pool_groups(model, yyyy, hcnt:=2);
select nextval('minseq') from generate_series(0,20);
select nextval('seq1') from generate_series(0,20);
select nextval('seq2') from generate_series(0,20);
select nextval('seq5') from generate_series(0,20);
select nextval('seq');
select currval('seq');
select nextval('seq'), nextval('seq');
select nextval(null);
select currval(null);
select nextval(a) from (values ('seq'), (null), ('seq')) tbl1(a);
select currval(a) from (values ('seq'), (null), ('seq')) tbl1(a);
select nextval('"seq"');
select currval('"seq"');
select nextval('a.seq'), nextval('b.seq');
select currval('a.seq'), currval('b.seq');
select nextval('"a"."seq"'), nextval('"b".seq');
select currval('"a"."seq"'), currval('"b".seq');
select nextval('s'||'e'||'q');
select s, nextval('seq') from strings;
select s, currval('seq') from strings;
select s, nextval(s) from strings;
select s, currval(s) from strings;
select count(*) from test2;
select * from test order by 1;
select count(distinct a) from test;
select * from integers;
select * from integers2 order by i;
select i from integers2 order by i;
select j from integers2 order by i;
select "42" from integers;
select `table ``.`.`col ``.`, `col ``.` from `table ``.`;
select * from test.hello;
select i from test_table;
select j from main.main_table;
select k from out_of_path.oop_table;
select j from main_table;
select abs(i) from test_table;
select sum(i) from test_table;
select main.current_setting('search_path');
select main.current_setting('schema');
select current_schema();
select current_schemas(false);
select current_setting('search_path');
select * from temp.s1;
select * from s1;
select i from integers;
select i from integers2;
select i from integers3;
select type, name from sqlite_master where name='👤' order by name;
select v3c2+1 from v3 where v3c1 > 42;
select j from v1 where j > 41;
select x from v1 t1(x) where x > 41;
select j, j2 from v1;
select j, j2, x from v1;
select i from v1;
select * from collate_test where s='muhleisen';
select * from collate_test where s='hello';
select collate_test.s, collate_join_table.s, i from collate_test join collate_join_table on (collate_test.s=collate_join_table.s) order by 1;
select * from collate_test order by s;
select distinct s from collate_test;
select count(*) from collate_test where 'mórritz' between s and t;
select * from collate_test where s='mühleisen';
select * from collate_test where s='world';
select collate_test.s, collate_join_table.s, i from collate_test join collate_join_table on (collate_test.s=collate_join_table.s) order by i;
select * from collate_test where s='hellô';
select count(*) from collate_test where 'bla'='bla';
select * from strings where 'goethe' > s order by 1;
select * from strings order by s;
select pk from tab0 where (col0 between 67 and 0 or col0 > 17 and (col0 > 3));
select pk from tab0 where col0 < 84 or col0 < 8 ;
select * from pkt1;
select * from pkt2;
select * from fkt1;
select * from fkt2;
select * from employee;
select * from employee where managerid=2;
select * from album;
select * from song;
select * from integers order by 1, 2;
select * from integers order by i;
select * from numbers;
select * from test;
select * from test order by a;
select * from integers order by i, j;
select * from integers where i > 0 order by 1;
select count(*) from cranlogs;
select * from cranlogs limit 5;
select county_id, county_desc, vtd_desc, name_prefx_cd from ncvoters;
select count(*) from greek_utf8;
select * from greek_utf8 order by 1;
select i, nfc_normalize(j) j, k from `test/sql/copy/csv/data/real/greek_utf8.csv` t(i, j, k);
select count(*) from movie_info;
select count(*) from lineitem;
select l_partkey, l_comment from lineitem where l_orderkey=1 order by l_linenumber;
select year, uniquecarrier, origin, origincityname, div5longestgtime from ontime;
select count(*) from voters;
select count(*) from `test/sql/copy/csv/data/real/voter.tsv`;
select count(*) from web_page;
select * from web_page order by column00 limit 3;
select * from test order by column0;
select a, b from test;
select typeof(testdoubleerror), typeof(testdouble), typeof(testtext), typeof(testinteger) from test limit 1;
select a, column1, c from test order by a;
select a, b, a_1 from test order by a;
select a, b, a_1, a_1_1 from test order by a;
select column0, column1, column2 from test order by column0;
select a, column01, column12 from test;
select a, a_8, a_9, column12 from test;
select a, a_8, a_9, column12, column11, column12_1 from test;
select column00, column01, column02, column03, column04, column05, column06, column07, column08, column09, column10, column11, column12 from test;
select number, text, date from test order by number;
select column0, column1 from test order by column0;
select id from test;
select typeof(testinteger), typeof(testdouble), typeof(testdate), typeof(testtext) from test limit 1;
select testinteger, testdouble, testdate, testtext from test where testdouble is not null ;
select typeof(testinteger), typeof(testdouble), typeof(testdate), typeof(testtext) from test limit 1;
select linenr, mixed_string, mixed_double from test limit 3;
select typeof(linenr), typeof(mixed_string), typeof(mixed_double) from test limit 1;
select linenr, mixed_string, mixed_double from test where linenr > 27000 limit 3;
select a, b, t, d, ts from test order by a;
select typeof(a), typeof(b), typeof(t), typeof(d), typeof(ts) from test limit 1;
select a, b, t, tf, d, df from test order by a;
select typeof(a), typeof(b), typeof(t), typeof(tf), typeof(d), typeof(df) from test limit 1;
select i from test order by i;
select typeof(i), typeof(b) from test limit 1;
select rsid, chr, pos, refb, altb from t1;
select rsid, chr, pos, refb, altb from t2;
select rsid, chr, pos, refb, altb from t3;
select id, value, replace(filename, '\\', '/') from read_csv_auto('data/csv/hive-partitioning/simple/*/*/test.csv', filename=1, header=1) order by id;
select id, value, part, date from read_csv_auto('data/csv/hive-partitioning/simple/*/*/test.csv', hive_partitioning=1, header=1) order by id;
select id, value, part, date from read_csv_auto('data/csv/hive-partitioning/different_order/*/*/test.csv', hive_partitioning=1, header=1) order by id;
select * from dates order by 1;
select * from read_csv('test/sql/copy/csv/data/glob/a?/*.csv', auto_detect=1) order by 1;
select * from read_csv('test/sql/copy/csv/data/glob/a?/a*.csv', auto_detect=1) order by 1;
select * from read_csv('test/sql/*/*/data/*/a?/a*.csv', auto_detect=1) order by 1;
select a, b like '%a1.csv%' from read_csv('test/sql/*/*/data/*/a?/a*.csv', auto_detect=1, filename=1) t1(a,b) order by 1;
select * from read_csv('test/sql/copy/csv/data/glob/*/*.csv', columns=struct_pack(d := 'string'), header=1) order by 1;
select a, b like '%a_.csv' from read_csv('test/sql/copy/csv/data/glob/*/*.csv', columns=struct_pack(d := 'string'), header=1, filename=1) t(a,b) order by 1;
select count(*) from glob('test/sql/copy/csv/data/glob/*/*.csv');
select count(*) from glob('test\sql\copy\csv\data\glob\*\*.csv');
select count(*) from glob('test//sql////copy//csv/////data///glob///*//////*.csv');
select count(*) from glob('test/sql/copy/csv/data/glob/*/a*a.csv');
select count(*) from glob('/rewoiarwiouw3rajkawrasdf790273489*.csv') limit 10;
select count(*) from glob('~/rewoiarwiouw3rajkawrasdf790273489*.py') limit 10;
select * from read_csv('s3://test-bucket/read_csv_glob_s3/glob/a?/*.csv', auto_detect=1) order by 1;
select * from read_csv('s3://test-bucket/read_csv_glob_s3/*/a?/a*.csv', auto_detect=1) order by 1;
select a, b like '%a1.csv%' from read_csv('s3://test-bucket/read_csv_glob_s3/gl*/a?/a*.csv', auto_detect=1, filename=1) t1(a,b) order by 1;
select * from read_csv('s3://test-bucket/read_csv_glob_s3/glob/[aei]*/*.csv', columns=struct_pack(d := 'string'), header=1) order by 1;
select a, b like '%a_.csv' from read_csv('s3://test-bucket/read_csv_glob_s3/glob/[aei]*/*.csv', columns=struct_pack(d := 'string'), header=1, filename=1) t(a,b) order by 1;
select count(*) from glob('s3://test-bucket/read_csv_glob_s3/glob/[aei]*/*.csv');
select count(*) from glob('s3://test-bucket/read_csv_glob_s3/glob/[aei]*/a*a.csv');
select count(*) from glob('s3://test-bucket/read_csv_glob_s3/glob/rewoiarwiouw3rajkawrasdf790273489*.csv') limit 10;
select * from read_csv('s3://test-bucket/read_csv_glob_s3/glob/f*/f\*.csv', auto_detect=1) order by 1;
select * from test order by 1;
select * from `__test_dir__/overwrite.csv`;
with recursive t(i) as ( select 1, null::date union all ( select i+1, d from t, r where i<5 ) ) select * from t order by i;
with recursive t(i) as ( select 1, null::date union all ( select i+1, d from t, read_csv('test/sql/copy/csv/data/test/date.csv', columns=struct_pack(d := 'date'), header=0, auto_detect=0) where i<5 ) ) select * from t order by i;
with recursive t(i) as ( select 1, null::date union all ( select i+1, d from t, read_csv('test/sql/copy/csv/data/test/date.csv', header=0, auto_detect=1) r(d) where i<5 ) ) select * from t order by i;
select * from abac_tbl;
select count(bam) from test where bam = '!';
select b from blobs;
select count(*) from lineitem;
select a, b, c from lineitem order by a;
select count(a), sum(a) from test;
select * from test order by 1 limit 3;
select * from test2 order by 1 limit 3;
select * from test3 order by 1 limit 3;
select * from test4 order by 1 limit 3;
select count(a), count(b), count(c), min(length(b)), max(length(b)), sum(a), sum(c) from test;
select l_partkey from lineitem where l_orderkey=1 order by l_linenumber;
select sum(a) from test;
select * from test_null_option order by 1 limit 3;
select * from test_unicode_1 order by 1 limit 4;
select * from test_unicode_2 order by 1 limit 4;
select sum(col_a) from test_unicode_2;
select * from test_unicode_4;
select * from read_csv_auto('test/sql/copy/csv/data/real/web_page.csv');
select * from read_csv_auto('test/sql/copy/csv/data/lineitem1k.tbl.gz');
select * from read_csv_auto('https://raw.githubusercontent.com/duckdb/duckdb/master/test/sql/copy/csv/data/real/web_page.csv');
select * from read_csv_auto('https://raw.githubusercontent.com/duckdb/duckdb/master/test/sql/copy/csv/data/lineitem1k.tbl.gz');
select cast(d as string) from date_test;
select * from dates;
select * from dates order by d;
select * from new_dates order by 1;
select * from timestamps;
select * from new_timestamps order by 1;
select count(foo) from test;
select * from no_quote;
select * from read_csv('test/sql/copy/csv/data/no_quote.csv', auto_detect=1, header=1, quote='');
select * from long_escaped_value;
select * from long_escaped_value_unicode;
select * from greek_utf8;
select * from integers as too_little_columns;
select * from integers as too_many_columns;
select * from nullable_type;
select * from movie_info;
select objectid, name from test order by objectid limit 10;
select * from lineitem;
select length(b) from test order by a;
select sum(a), sum(c) from test;
select * from ncvoters;
select count(*) from nfcstrings;
select sum(b) from test;
select string_split_regex(a, '[\r\n]+') from test order by a;
select l_partkey, rtrim(l_comment) from lineitem where l_orderkey=1 order by l_linenumber;
select * from people;
select * from people2;
select col1, typeof(col1) from `test/sql/copy/csv/data/test/timestampoffset.csv` t1(col1);
select * from web_page order by wp_web_page_sk limit 3;
select * from web_page;
select sum(a), min(length(b)), max(length(b)), sum(length(b)), sum(c) from test;
select * from `__test_dir__/test.tsv`;
select * from read_csv('__test_dir__/test.tsv', sep='\t', columns={'id': 'integer', 'name': 'varchar'}, header=1);
select * from `data/csv/issue2628_中文.csv`;
select * from `data/csv/*中文.csv`;
select * from `data/csv/中文/*.csv` order by 1;
select * from `data/csv/中*/*.csv` order by 1;
select data from `data/parquet-testing/case_insensitive.parquet`;
select * from `data/parquet-testing/decimals.parquet`;
select * from `data/parquet-testing/decimals.parquet` where l0=0.1;
select * from `data/parquet-testing/decimals.parquet` where l0=-0.1;
select * from `data/parquet-testing/enum.parquet`;
select data from parquet_scan(`data/parquet-testing/fixed.parquet`);
select sum(i) from `__test_dir__/integers.parquet`;
select sum(i) from `__test_dir__/integers.csv` tbl(i);
select count(*) from parquet_scan(`data/parquet-testing/glob/t?.parquet`);
select count(*) from parquet_scan(`data/parquet-testing/glob/*`);
select count(*) from parquet_scan(`data/parquet-testing/glob/*.parquet`);
select count(*) from parquet_scan(`data/parquet-testing/g*/*.parquet`);
select count(*) from parquet_scan(`data/parquet-testing/g*/t1.parquet`);
select id from `data/parquet-testing/p2.parquet` limit 10;
select id from `data/parquet-testing/p2.parquet` limit 100;
select id_with_null from `data/parquet-testing/p2.parquet` limit 100;
select min(id), max(id), sum(id), count(id), min(id_with_null), max(id_with_null), sum(id_with_null), count(id_with_null) from `data/parquet-testing/p2.parquet`;
select min(id_int), max(id_int), sum(id_int), count(id_int) from `data/parquet-testing/p2.parquet`;
select * from `data/parquet-testing/7-set.snappy.arrow2.parquet`;
select id_string from `data/parquet-testing/p2strings.parquet` limit 10;
select count(backlink_count) from parquet_scan('data/parquet-testing/bug1554.parquet') where http_status_code=200;
select http_status_code, count(backlink_count) from parquet_scan('data/parquet-testing/bug1554.parquet') group by http_status_code order by http_status_code;
select count(*) from some_bools where val = 1;
select count(*) from some_bools where val = '1'::bool;
select has_image_link from parquet_scan('data/parquet-testing/bug1588.parquet') where has_image_link = 1;
select count(*) from parquet_scan('data/parquet-testing/bug1588.parquet') where has_image_link = 1;
select count(*) from parquet_scan('data/parquet-testing/bug1588.parquet') where has_image_link = '1'::bool;
select count(*) from parquet_scan('data/parquet-testing/bug1588.parquet') where (has_image_link = 1 and (has_image_alt_text = 0 or is_image_alt_text_empty = 1));
select backlink_count from parquet_scan('data/parquet-testing/bug1589.parquet') limit 1;
select `inner`['str_field'] from parquet_scan('data/parquet-testing/bug1618_struct_strings.parquet');
select `inner`['f64_field'] from parquet_scan('data/parquet-testing/bug1618_struct_strings.parquet');
select `inner` from parquet_scan('data/parquet-testing/bug1618_struct_strings.parquet');
select struct_extract("inner", 'f64_field') from parquet_scan('data/parquet-testing/struct.parquet');
select (`inner`).`f64_field` from parquet_scan('data/parquet-testing/struct.parquet');
select `inner`['f64_field'] from parquet_scan('data/parquet-testing/struct.parquet');
select * from parquet_scan('data/parquet-testing/bug2267.parquet');
select assignedlicenses[1] from parquet_scan('data/parquet-testing/bug2267.parquet');
select * from v1;
select * from `__test_dir__/map.parquet`;
select * from v2;
select * from v3;
select * from v4;
select list from `__test_dir__/list_bug_test.parquet` where id = 5000;
select * from parquet_scan('data/parquet-testing/timestamp.parquet') order by 1;
select * from parquet_scan('data/parquet-testing/timestamp-ms.parquet') order by 1;
select * from parquet_scan('data/parquet-testing/blob.parquet');
select * from parquet_scan('data/parquet-testing/binary_string.parquet',binary_as_string=false);
select * from parquet_scan('data/parquet-testing/binary_string.parquet',binary_as_string=true);
select * from parquet_scan('data/parquet-testing/binary_string.parquet');
select * from parquet_scan('data/parquet-testing/adam_genotypes.parquet');
select i, j, replace(filename, '\\', '/') from parquet_scan('data/parquet-testing/glob*/t?.parquet', filename=1) order by i;
select i, j, replace(filename, '\\', '/') as file from parquet_scan('data/parquet-testing/glob*/t?.parquet', filename=1) where file='data/parquet-testing/glob2/t1.parquet';
select count(filename) from parquet_scan('data/parquet-testing/p2.parquet', filename=1) where id < 1000;
select replace(filename, '\\', '/') from parquet_scan('data/parquet-testing/glob*/t?.parquet', filename=1) where i=2;
select i, j, replace(filename, '\\', '/') from test_copy;
select sum(i), max(filename) from parquet_scan('__test_dir__/test_table_large.parquet', filename=1) where i>5000;
select i, j, replace(filename, '\\', '/') as file from parquet_scan(['data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t2.parquet'], filename=1) where file like '%t1%';
select orgunitid from tbl limit 10;
select count(*) from tbl;
select count(*) from tbl where namevalidfrom <= '2017-03-01' and namevalidto >= '2017-03-01' and parentnamevalidfrom <= '2017-03-01' and parentnamevalidto >= '2017-03-01' and customercode = 'code';
select min(sfc_key), max(sfc_key), min(gps_time), max(gps_time), min(intensity), max(intensity), min(classification), max(classification), min(return_number), max(return_number), min(number_of_returns), max(number_of_returns) from parquet_scan('data/parquet-testing/sorted.zstd_18_131072_small.parquet');
select * from parquet_scan('data/parquet-testing/glob*/t?.parquet') order by i;
select * from parquet_scan('data/parquet-testing/glob/t[0-9].parquet') order by i;
select * from parquet_scan('data/parquet-testing/glob/*') order by i;
select * from parquet_scan('data/parquet-testing/glob/*.parquet') order by i;
select * from parquet_scan('data/parquet-testing/g*/*.parquet') order by i;
select * from parquet_scan('data/parquet-testing/g*/t1.parquet') order by i;
select * from parquet_scan('__working_directory__/data/parquet-testing/g*/t1.parquet') order by i;
select * from parquet_scan('data\parquet-testing\g*\t1.parquet') order by i;
select * from vals order by 1;
select * from vals order by 1, 2;
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/glob/t?.parquet');
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/glob/t[0-9].parquet');
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/glob/*');
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/glob/*.parquet');
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/g*/*.parquet');
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/g*/t1.parquet');
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/with*/*.parquet');
select id, value, part, date from parquet_scan('data/parquet-testing/hive-partitioning/simple/*/*/test.parquet', hive_partitioning=1) order by id;
select id, value, part, date from parquet_scan('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', hive_partitioning=1) order by id;
select id, date from parquet_scan('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', hive_partitioning=1) where date = '2013-01-01';
select count(*) from parquet_scan(['data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t2.parquet']);
select count(*) from parquet_scan(['data/parquet-testing/glob/*.parquet', 'data/parquet-testing/glob/t2.parquet']);
select count(*) from parquet_scan(['data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t1.parquet']);
select * from parquet_scan('data/parquet-testing/cache/cache1.parquet');
select * from parquet_scan('__test_dir__/cached.parquet');
select * from parquet_scan('data/parquet-testing/glob/t1.parquet');
select * from parquet_scan('data/parquet-testing/glob2/t1.parquet');
select * from parquet_scan('data/parquet-testing/nan-float.parquet') order by 1;
select * from parquet_scan('data/parquet-testing/nullbyte.parquet');
select * from parquet_scan('data/parquet-testing/nullbyte_multiple.parquet');
select * from parquet_scan('data/parquet-testing/pandas-date.parquet') order by 1;
select a from `__test_dir__/evolution_*.parquet` order by a;
select a from parquet_scan(['__test_dir__/evolution_2.parquet', '__test_dir__/evolution_1.parquet', '__test_dir__/evolution_*.parquet']) order by a;
select a from `__test_dir__/evolution_*.parquet` order by 1;
select b from parquet_scan(['__test_dir__/evolution_2.parquet', '__test_dir__/evolution_1.parquet']) order by 1;
select count(*) from `__test_dir__/evolution_*.parquet` where a=2;
select count(*) from `__test_dir__/evolution_*.parquet` where a>=2;
select id, a from `__test_dir__/evolution_*.parquet` where id=2;
select id, a from `__test_dir__/evolution_*.parquet` where id=27777;
select id, a from `__test_dir__/evolution_*.parquet` where id>=39998 order by id;
select "önë", "c1", "🦆" from parquet_scan('data/parquet-testing/silly-names.parquet') order by 1;
select stats_min, stats_max, stats_min_value, stats_max_value from parquet_metadata('data/parquet-testing/boolean_stats.parquet');
select stats_min, stats_max, stats_min_value, stats_max_value from parquet_metadata('data/parquet-testing/signed_stats.parquet');
select * from `data/parquet-testing/signed_stats.parquet`;
select stats_min, stats_max, stats_min_value, stats_max_value from parquet_metadata('data/parquet-testing/unsigned_stats.parquet');
select * from `data/parquet-testing/unsigned_stats.parquet`;
select stats_min, stats_max, stats_min_value, stats_max_value from parquet_metadata('data/parquet-testing/date_stats.parquet');
select * from `data/parquet-testing/date_stats.parquet`;
select stats_min, stats_max, stats_min_value, stats_max_value from parquet_metadata('data/parquet-testing/varchar_stats.parquet');
select * from `data/parquet-testing/varchar_stats.parquet`;
select stats_min, stats_max, stats_min_value, stats_max_value from parquet_metadata('data/parquet-testing/decimal_stats.parquet');
select * from `data/parquet-testing/decimal_stats.parquet`;
select stats_min, stats_max, stats_min_value, stats_max_value from parquet_metadata('data/parquet-testing/arrow/int32_decimal.parquet');
select * from `data/parquet-testing/arrow/int32_decimal.parquet`;
select stats_min, stats_max, stats_min_value, stats_max_value from parquet_metadata('data/parquet-testing/arrow/int64_decimal.parquet');
select * from `data/parquet-testing/arrow/int64_decimal.parquet`;
select stats_min, stats_max, stats_min_value, stats_max_value from parquet_metadata('data/parquet-testing/data-types.parquet');
select * from `data/parquet-testing/data-types.parquet`;
select * from parquet_scan('__test_dir__/uncompressed.parquet');
select * from parquet_scan('__test_dir__/snappy.parquet');
select * from parquet_scan('__test_dir__/gzip.parquet');
select * from parquet_scan('__test_dir__/zstd.parquet');
select * from parquet_scan('data/parquet-testing/zstd.parquet') order by 1;
select * from parquet_scan('data/parquet-testing/aws1.snappy.parquet') limit 100;
select count(*), min(i), max(i), sum(i) from parquet_scan('data/parquet-testing/manyrowgroups.parquet') t(i);
select count(*), min(i), max(i), sum(i) from parquet_scan('data/parquet-testing/manyrowgroups*') t(i);
select * from parquet_scan('data/parquet-testing/decimal/fixed_length_decimal.parquet');
select * from parquet_scan('data/parquet-testing/decimal/fixed_length_decimal_legacy.parquet');
select * from parquet_scan('data/parquet-testing/decimal/decimal_dc.parquet') limit 10;
select * from parquet_scan('data/parquet-testing/decimal/pandas_decimal.parquet') limit 10;
select count(*) from parquet_scan('data/parquet-testing/userdata1.parquet') where id > 500;
select count(*) from parquet_scan('data/parquet-testing/userdata1.parquet') where id < 500;
select count(*) from parquet_scan('data/parquet-testing/userdata1.parquet') where id > 100 and id < 900;
select count(*) from parquet_scan('data/parquet-testing/userdata1.parquet') where id between 100 and 900;
select registration_dttm, id, first_name, birthdate, salary from parquet_scan('data/parquet-testing/userdata1.parquet') where id = 42;
select count(*) from parquet_scan('data/parquet-testing/userdata1.parquet') where id = 42;
select count(*) from parquet_scan('data/parquet-testing/userdata1.parquet') where salary < 1000;
select first_name, gender from parquet_scan('data/parquet-testing/userdata1.parquet') where first_name = 'mark' and gender <> '';
select gender, first_name from parquet_scan('data/parquet-testing/userdata1.parquet') where first_name = 'mark' and gender <> '';
select count(*) from parquet_scan('data/parquet-testing/userdata1.parquet') where gender = 'male' and first_name = 'mark';
select last_name from parquet_scan('data/parquet-testing/userdata1.parquet') where first_name > 'mark' and country > 'germany' and salary > 0 order by last_name limit 10;
select length(l_comment) from parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet') where l_orderkey = 1 order by l_comment;
select * from parquet_scan('data/parquet-testing/date.parquet') where d < cast('1978-01-01' as date);
select * from parquet_scan('data/parquet-testing/date.parquet') where d > cast('1982-01-01' as date) and d < cast('1986-01-01' as date);
select * from parquet_scan('data/parquet-testing/date.parquet') where d >= cast('1990-01-01' as date);
select count(*) from parquet_scan('data/parquet-testing/date.parquet') where d > cast('1970-01-01' as date);
select count(*) from parquet_scan('data/parquet-testing/date.parquet') where d >= cast('1982-01-01' as date) and d < cast('1985-01-01' as date);
select count(*) from parquet_scan('data/parquet-testing/date.parquet') where d < cast('1970-01-01' as date);
select count(*) from parquet_scan('data/parquet-testing/date.parquet') where d between cast('1975-01-01' as date) and cast('1976-01-01' as date);
select count(*) from parquet_scan('data/parquet-testing/date.parquet') where d >= cast('1975-01-01' as date) and d < cast('1976-01-01' as date);
select count(*) from parquet_scan('data/parquet-testing/date.parquet') where d < cast('1975-01-01' as date) and d > cast('1976-01-01' as date);
select count(*) from parquet_scan('data/parquet-testing/date.parquet') where d < cast('1975-01-01' as date) or d > cast('1976-01-01' as date);
select count(*) from parquet_scan('data/parquet-testing/date.parquet') where d < cast('1975-01-01' as date) or d >= cast('1976-01-01' as date);
select count(*) from parquet_scan('data/parquet-testing/date.parquet') where d is null;
select * from parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet');
select * from parquet_scan('data/parquet-testing/map.parquet') sq limit 3;
select * from parquet_scan('data/parquet-testing/arrow/nested_lists.snappy.parquet');
select unnest(a) from parquet_scan('data/parquet-testing/arrow/nested_lists.snappy.parquet');
select * from parquet_scan('data/parquet-testing/arrow/list_columns.parquet');
select id, url from parquet_scan('data/parquet-testing/apkwan.parquet') limit 10;
select * from (select id, unnest(url) u from parquet_scan('data/parquet-testing/apkwan.parquet')) sq where u is not null limit 10;
select id, authors from parquet_scan('data/parquet-testing/apkwan.parquet') limit 10;
select id, unnest(authors) from parquet_scan('data/parquet-testing/apkwan.parquet') limit 20;
select id, struct_extract(unnest(authors), 'name'), struct_extract(unnest(authors), 'id') from parquet_scan('data/parquet-testing/apkwan.parquet') limit 20;
select count(col1) from parquet_scan('data/parquet-testing/bug687_nulls.parquet');
select id, first_name, last_name, email from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/userdata1.parquet') limit 10;
select id, first_name, last_name, email from parquet_scan('https://github.com/cwida/duckdb/blob/master/data/parquet-testing/userdata1.parquet?raw=true') limit 10;
select id, first_name, last_name, email from parquet_scan('https://github.com:443/cwida/duckdb/blob/master/data/parquet-testing/userdata1.parquet?raw=true') limit 10;
select id, first_name, last_name, email from parquet_scan('https://github.com/cwida/duckdb-data/releases/download/v1.0/us+er+da+ta.parquet') limit 1;
select id, first_name, last_name, email from parquet_scan('https://github.com/cwida/duckdb-data/releases/download/v1.0/us%2ber%2bda%2bta.parquet') limit 1;
select count(backlink_count) from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/bug1554.parquet') where http_status_code=200;
select http_status_code, count(backlink_count) from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/bug1554.parquet') group by http_status_code order by http_status_code;
select has_image_link from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/bug1588.parquet') where has_image_link = 1;
select backlink_count from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/bug1589.parquet') limit 1;
select "inner"['str_field'] from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/bug1618_struct_strings.parquet');
select "inner"['f64_field'] from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/bug1618_struct_strings.parquet');
select "inner" from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/bug1618_struct_strings.parquet');
select "inner"['f64_field'] from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/struct.parquet');
select * from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/bug2267.parquet');
select assignedlicenses[1] from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/bug2267.parquet');
select * from parquet_scan(['https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/glob/t1.parquet', 'https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/glob/t2.parquet']);
select * from parquet_scan('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/arrow/nation.dict-malformed.parquet') limit 2;
select * from parquet_scan('data/parquet-testing/arrow/alltypes_plain.parquet');
select * from `data/parquet-testing/arrow/alltypes_plain.parquet`;
select tbl.* from `data/parquet-testing/arrow/alltypes_plain.parquet` tbl;
select tbl.a from `data/parquet-testing/arrow/alltypes_plain.parquet` tbl(a);
select * from parquet_scan('data/parquet-testing/unsigned.parquet');
select * from parquet_scan('data/parquet-testing/arrow/alltypes_plain.snappy.parquet');
select * from parquet_scan('data/parquet-testing/arrow/alltypes_dictionary.parquet');
select * from parquet_scan('data/parquet-testing/data-types.parquet');
select count(*) from parquet_scan('data/parquet-testing/userdata1.parquet');
select count(*) from userdata1;
select count(registration_dttm), count(id), count(first_name), count(last_name), count(email), count(gender), count(ip_address), count(cc), count(country), count(birthdate), count(salary), count(title), count(comments) from userdata1;
select min(registration_dttm), max(registration_dttm) from userdata1;
select min(id), max(id) from userdata1;
select first(id) over w, last(id) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(first_name), max(first_name) from userdata1;
select first(first_name) over w, last(first_name) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(last_name), max(last_name) from userdata1;
select first(last_name) over w, last(last_name) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(email), max(email) from userdata1;
select first(email) over w, last(email) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(gender), max(gender) from userdata1;
select first(gender) over w, last(gender) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(ip_address), max(ip_address) from userdata1;
select first(ip_address) over w, last(ip_address) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(cc), max(cc) from userdata1;
select first(cc) over w, last(cc) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(country), max(country) from userdata1;
select first(country) over w, last(country) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(birthdate), max(birthdate) from userdata1;
select first(birthdate) over w, last(birthdate) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(salary), max(salary) from userdata1;
select first(salary) over w, last(salary) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(title), max(title) from userdata1;
select first(title) over w, last(title) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select min(comments), max(comments) from userdata1;
select first(comments) over w, last(comments) over w from userdata1 window w as (order by id range between unbounded preceding and unbounded following) limit 1;
select count(*), count(b), sum(case when b then 1 else 0 end) from (select unnest(l) b from list_of_bools);
select count(*), count(b), sum(case when b then 1 else 0 end) from (select unnest(l) b from `__test_dir__/list_of_bools.parquet`);
select count(*), count(b), sum(b) from (select unnest(l) b from many_ints);
select count(*), count(b), sum(b) from (select unnest(l) b from `__test_dir__/many_ints.parquet`);
select count(*), count(b), sum(case when b then 1 else 0 end) from (select unnest(l) b from many_bools);
select count(*), count(b), sum(case when b then 1 else 0 end) from (select unnest(l) b from `__test_dir__/many_bools.parquet`);
select * from `__test_dir__/all_types.parquet`;
select count(*), count(b), bool_and(b), bool_or(b), sum(case when b then 1 else 0 end) true_count, sum(case when b then 0 else 1 end) false_count from bools;
select count(*), count(b), bool_and(b), bool_or(b), sum(case when b then 1 else 0 end) true_count, sum(case when b then 0 else 1 end) false_count from `__test_dir__/bools.parquet`;
select typeof(b) from `__test_dir__/bools.parquet` limit 1;
select * from `__test_dir__/dates.parquet`;
select typeof(d) from `__test_dir__/dates.parquet` limit 1;
select * from `__test_dir__/dates.parquet` where d=`1992-01-01`;
select * from `__test_dir__/decimals.parquet` where dec_col=42;
select * from `__test_dir__/decimals.parquet` where dec_col=-43;
select * from `__test_dir__/decimals.parquet` where dec_col=43;
select stats(dec4), stats(dec9), stats(dec18), stats(dec38) from `__test_dir__/decimals.parquet` limit 1;
select * from `__test_dir__/enums.parquet`;
select * from `__test_dir__/hugeints.parquet`;
select typeof(h) from `__test_dir__/hugeints.parquet` limit 1;
select * from `__test_dir__/intervals.parquet` order by 1;
select * from `__test_dir__/signed.parquet` except select * from signed;
select * from signed except select * from `__test_dir__/signed.parquet`;
select * from `__test_dir__/signed.parquet` where d=42;
select count(*) from `__test_dir__/signed.parquet` where d>42;
select count(*) from `__test_dir__/signed.parquet` where d>=42;
select count(*) from `__test_dir__/signed.parquet` where d<42;
select count(*) from `__test_dir__/signed.parquet` where d<=42;
select typeof(d)='smallint' from `__test_dir__/signed.parquet` limit 1;
select typeof(d)='integer' from `__test_dir__/signed.parquet` limit 1;
select typeof(d)='bigint' from `__test_dir__/signed.parquet` limit 1;
select typeof(d)='hugeint' from `__test_dir__/signed.parquet` limit 1;
select typeof(d)='float' from `__test_dir__/signed.parquet` limit 1;
select typeof(d)='double' from `__test_dir__/signed.parquet` limit 1;
select encodings from parquet_metadata('__test_dir__/strings.parquet');
select * from `__test_dir__/strings.parquet`;
select * from `__test_dir__/timestamps.parquet`;
select * from `__test_dir__/timestamps.parquet` where d='1992-01-01 12:03:27';
select typeof(d) from `__test_dir__/timestamps.parquet` limit 1;
select * from `__test_dir__/unsigned.parquet` except select * from unsigned;
select * from unsigned except select * from `__test_dir__/unsigned.parquet`;
select * from `__test_dir__/unsigned.parquet` where d=42;
select count(*) from `__test_dir__/unsigned.parquet` where d>42;
select count(*) from `__test_dir__/unsigned.parquet` where d>=42;
select count(*) from `__test_dir__/unsigned.parquet` where d<42;
select count(*) from `__test_dir__/unsigned.parquet` where d<=42;
select typeof(d)='smallint' from `__test_dir__/unsigned.parquet` limit 1;
select typeof(d)='integer' from `__test_dir__/unsigned.parquet` limit 1;
select typeof(d)='bigint' from `__test_dir__/unsigned.parquet` limit 1;
select typeof(d)='hugeint' from `__test_dir__/unsigned.parquet` limit 1;
select typeof(d)='float' from `__test_dir__/unsigned.parquet` limit 1;
select typeof(d)='double' from `__test_dir__/unsigned.parquet` limit 1;
select * from `__test_dir__/uuid.parquet` order by 1;
select * from parquet_scan('__test_dir__/scalar.parquet');
select count(*) from parquet_scan('__test_dir__/empty.parquet');
select * from parquet_scan('data/parquet-testing/arrow/alltypes_dictionary.parquet');
select * from parquet_scan('__test_dir__/alltypes_dictionary.parquet');
select * from parquet_scan('data/parquet-testing/bug687_nulls.parquet') limit 10;
select * from parquet_scan('__test_dir__/bug687_nulls.parquet') limit 10;
select count(*) from parquet_scan('__test_dir__/bug1637_booleans.parquet') where x;
select * from parquet_scan('data/parquet-testing/userdata1.parquet') order by 1 limit 10;
select * from parquet_scan('__test_dir__/userdata1.parquet') order by 1 limit 10;
select * from parquet_scan('__test_dir__/userdata1-gzip.parquet') order by 1 limit 10;
select * from parquet_scan('__test_dir__/userdata1-uncompressed.parquet') order by 1 limit 10;
select * from parquet_scan('__test_dir__/userdata1-zstd.parquet') order by 1 limit 10;
select i from parquet_scan('__test_dir__/complex_list.parquet');
select i from parquet_scan('__test_dir__/test_list.parquet');
select * from parquet_scan('__test_dir__/test_list.parquet');
select * from `__test_dir__/test_empty_list.parquet`;
select * from `__test_dir__/test_null_list.parquet`;
select sum(i) from (select unnest(l) from big_list) t(i);
select sum(i) from (select unnest(l) from `__test_dir__/big_list.parquet`) t(i);
select * from `__test_dir__/int_map.parquet`;
select * from `__test_dir__/string_map.parquet`;
select * from `__test_dir__/list_map.parquet`;
select stats_min_value, stats_max_value, stats_min, stats_max from parquet_metadata('__test_dir__/bigvarchar.parquet');
select stats_min_value::smallint, stats_max_value::smallint, stats_min::smallint, stats_max::smallint from parquet_metadata('__test_dir__/smallint_stats.parquet.parquet');
select stats_min_value::integer, stats_max_value::integer, stats_min::integer, stats_max::integer from parquet_metadata('__test_dir__/integer_stats.parquet.parquet');
select stats_min_value::bigint, stats_max_value::bigint, stats_min::bigint, stats_max::bigint from parquet_metadata('__test_dir__/bigint_stats.parquet.parquet');
select stats_min_value::hugeint, stats_max_value::hugeint, stats_min::hugeint, stats_max::hugeint from parquet_metadata('__test_dir__/hugeint_stats.parquet.parquet');
select stats_min_value::float, stats_max_value::float, stats_min::float, stats_max::float from parquet_metadata('__test_dir__/float_stats.parquet.parquet');
select stats_min_value::double, stats_max_value::double, stats_min::double, stats_max::double from parquet_metadata('__test_dir__/double_stats.parquet.parquet');
select stats_min_value::smallint from parquet_metadata('__test_dir__/smallint_stats.parquet.parquet') except select min from smallint_limits;
select stats_min_value::integer from parquet_metadata('__test_dir__/integer_stats.parquet.parquet') except select min from integer_limits;
select stats_min_value::bigint from parquet_metadata('__test_dir__/bigint_stats.parquet.parquet') except select min from bigint_limits;
select stats_min_value::hugeint from parquet_metadata('__test_dir__/hugeint_stats.parquet.parquet') except select min from hugeint_limits;
select stats_min_value::float from parquet_metadata('__test_dir__/float_stats.parquet.parquet') except select min from float_limits;
select stats_min_value::double from parquet_metadata('__test_dir__/double_stats.parquet.parquet') except select min from double_limits;
select stats_max_value::smallint from parquet_metadata('__test_dir__/smallint_stats.parquet.parquet') except select max from smallint_limits;
select stats_max_value::integer from parquet_metadata('__test_dir__/integer_stats.parquet.parquet') except select max from integer_limits;
select stats_max_value::bigint from parquet_metadata('__test_dir__/bigint_stats.parquet.parquet') except select max from bigint_limits;
select stats_max_value::hugeint from parquet_metadata('__test_dir__/hugeint_stats.parquet.parquet') except select max from hugeint_limits;
select stats_max_value::float from parquet_metadata('__test_dir__/float_stats.parquet.parquet') except select max from float_limits;
select stats_max_value::double from parquet_metadata('__test_dir__/double_stats.parquet.parquet') except select max from double_limits;
select stats_min::smallint from parquet_metadata('__test_dir__/smallint_stats.parquet.parquet') except select min from smallint_limits;
select stats_min::integer from parquet_metadata('__test_dir__/integer_stats.parquet.parquet') except select min from integer_limits;
select stats_min::bigint from parquet_metadata('__test_dir__/bigint_stats.parquet.parquet') except select min from bigint_limits;
select stats_min::hugeint from parquet_metadata('__test_dir__/hugeint_stats.parquet.parquet') except select min from hugeint_limits;
select stats_min::float from parquet_metadata('__test_dir__/float_stats.parquet.parquet') except select min from float_limits;
select stats_min::double from parquet_metadata('__test_dir__/double_stats.parquet.parquet') except select min from double_limits;
select stats_max::smallint from parquet_metadata('__test_dir__/smallint_stats.parquet.parquet') except select max from smallint_limits;
select stats_max::integer from parquet_metadata('__test_dir__/integer_stats.parquet.parquet') except select max from integer_limits;
select stats_max::bigint from parquet_metadata('__test_dir__/bigint_stats.parquet.parquet') except select max from bigint_limits;
select stats_max::hugeint from parquet_metadata('__test_dir__/hugeint_stats.parquet.parquet') except select max from hugeint_limits;
select stats_max::float from parquet_metadata('__test_dir__/float_stats.parquet.parquet') except select max from float_limits;
select stats_max::double from parquet_metadata('__test_dir__/double_stats.parquet.parquet') except select max from double_limits;
select stats_min_value::smallint from parquet_metadata('__test_dir__/smallint_stats.parquet.parquet');
select stats_min_value::integer from parquet_metadata('__test_dir__/integer_stats.parquet.parquet');
select stats_min_value::bigint from parquet_metadata('__test_dir__/bigint_stats.parquet.parquet');
select stats_min_value::hugeint from parquet_metadata('__test_dir__/hugeint_stats.parquet.parquet');
select stats_min_value::float from parquet_metadata('__test_dir__/float_stats.parquet.parquet');
select stats_min_value::double from parquet_metadata('__test_dir__/double_stats.parquet.parquet');
select stats_max_value::smallint from parquet_metadata('__test_dir__/smallint_stats.parquet.parquet');
select stats_max_value::integer from parquet_metadata('__test_dir__/integer_stats.parquet.parquet');
select stats_max_value::bigint from parquet_metadata('__test_dir__/bigint_stats.parquet.parquet');
select stats_max_value::hugeint from parquet_metadata('__test_dir__/hugeint_stats.parquet.parquet');
select stats_max_value::float from parquet_metadata('__test_dir__/float_stats.parquet.parquet');
select stats_max_value::double from parquet_metadata('__test_dir__/double_stats.parquet.parquet');
select stats_min::smallint from parquet_metadata('__test_dir__/smallint_stats.parquet.parquet');
select stats_min::integer from parquet_metadata('__test_dir__/integer_stats.parquet.parquet');
select stats_min::bigint from parquet_metadata('__test_dir__/bigint_stats.parquet.parquet');
select stats_min::hugeint from parquet_metadata('__test_dir__/hugeint_stats.parquet.parquet');
select stats_min::float from parquet_metadata('__test_dir__/float_stats.parquet.parquet');
select stats_min::double from parquet_metadata('__test_dir__/double_stats.parquet.parquet');
select stats_max::smallint from parquet_metadata('__test_dir__/smallint_stats.parquet.parquet');
select stats_max::integer from parquet_metadata('__test_dir__/integer_stats.parquet.parquet');
select stats_max::bigint from parquet_metadata('__test_dir__/bigint_stats.parquet.parquet');
select stats_max::hugeint from parquet_metadata('__test_dir__/hugeint_stats.parquet.parquet');
select stats_max::float from parquet_metadata('__test_dir__/float_stats.parquet.parquet');
select stats_max::double from parquet_metadata('__test_dir__/double_stats.parquet.parquet');
select stats_null_count from parquet_metadata('__test_dir__/stats.parquet');
select count(*) from `__test_dir__/stats.parquet` where i is null;
select * from parquet_scan('__test_dir__/test_struct.parquet');
select * from parquet_scan('__test_dir__/test_struct_nulls.parquet');
select * from parquet_scan('__test_dir__/struct_nested.parquet');
select * from parquet_scan('__test_dir__/struct_nested_null.parquet');
select * from parquet_scan('__test_dir__/single_struct.parquet');
select * from parquet_scan('__test_dir__/single_struct_null.parquet');
select * from parquet_scan('__test_dir__/nested_single_struct.parquet');
select i from `http://test-bucket-public.duckdb-minio.com:9000/root-dir/test_${url_style}_url_style.parquet` limit 3;
select i from `http://duckdb-minio.com:9000/test-bucket-public/root-dir/test_${url_style}_url_style.parquet` limit 3;
select i from `s3://test-bucket-public/root-dir/test_${url_style}_url_style.parquet` limit 3;
select i from `http://test-bucket-public.duckdb-minio.com:9000/root-dir/test_default_url_style.parquet` limit 3;
select id, value, "key_!-_.*()" from parquet_scan('s3://test-bucket/hive-partitioning/simple/*/test.parquet', hive_partitioning=1);
select min(id), max(id) from parquet_scan('s3://test-bucket/hive-partitioning/medium/*/*/test.parquet', hive_partitioning=1) where part2=2;
select min(id), max(id) from parquet_scan('s3://test-bucket/hive-partitioning/medium/*/*/test.parquet', hive_partitioning=1) where part2=1;
select min(id), max(id) from read_csv_auto('s3://test-bucket/hive-partitioning/medium/*/*/test.csv', hive_partitioning=1) where part2=2;
select min(id), max(id) from read_csv_auto('s3://test-bucket/hive-partitioning/medium/*/*/test.csv', hive_partitioning=1) where part2=1;
select * from web_page limit 10;
select * from `s3://test-bucket/multipart/web_page.parquet` limit 10;
select * from `s3://test-bucket/multipart/web_page.csv` limit 10;
select * from `s3://test-bucket-public/url_encode/just because you can doesnt mean you should.parquet` limit 1;
select * from `s3://test-bucket-public/url_encode/just+dont+use+plus+or+spaces+please.parquet` limit 1;
select * from `http://test-bucket-public.duckdb-minio.com:9000/url_encode/just because you can doesnt mean you should.parquet` limit 1;
select * from `http://test-bucket-public.duckdb-minio.com:9000/url_encode/just%2bdont%2buse%2bplus%2bor%2bspaces%2bplease.parquet` limit 1;
select * from `http://test-bucket-public.duckdb-minio.com:9000/url_encode/just+dont+use+plus+or+spaces+please.parquet` limit 1;
select * from tbl1;
select * from tbl2;
select * from tbl3;
select * from range(5) tbl1(i) join range(5) tbl2(i) on tbl1.i=tbl2.i;
select i, i from range(5) tbl(i);
select * from (select i, i from range(5) tbl(i)) tbl;
select * from (select i, i, i, i from range(5) tbl(i)) tbl;
select * from t1;
select * from (select * from range(5) tbl1(i) join range(5) tbl2(i) on tbl1.i=tbl2.i) tbl;
select * from t3;
select * from t4;
select * from t;
select * from t_1;
with recursive cte as (select 42) select * from cte;
with recursive t(y, arr) as ( select 1, array[1,2,3,4,5,6] union all select y+1, arr[:loc] from t, p where y < 10 ) select * from t;
with recursive t(y, arr) as ( select 1, array[1,2,3,4,5,6] union all select y+1, arr from t, p where y < 10 and y = loc ) select * from t;
with recursive t(y, arr) as ( select 1, array[1,2,3,4,5,6] union all select y+1, arr[:loc] from t, p where y < 10 and y = loc ) select * from t;
with recursive t(arr) as ( select array[1,2,3,4,5,6] union all select arr[arr[1]+1:6] from t where arr[1] < 6 ) select * from t;
with recursive t as ( select 1 as x union select t1.x + t2.x + t3.x as x from t t1, t t2, t t3 where t1.x < 100 ) select * from t order by 1;
with recursive t as ( select 1 as x union select (t1.x + t2.x + t3.x)::hugeint as x from t t1, t t2, t t3 where t1.x < 100 ) select * from t order by 1;
with recursive t as ( select 1 as x union select sum(x) as x from t, a where x < 1000000 ) select * from t order by 1 nulls last;
with recursive t as ( select 1 as x union select sum(x) as x from t, a where x < 1000000 and t.x=a.i ) select * from t order by 1 nulls last;
with recursive t as ( select 1 as x union select sum(x) from (select sum(x) from t) t1(x), a where x < 1000 ) select * from t order by 1 nulls last;
with recursive t as ( select 1 as x union select (select x + 1 from t) as x from t where x < 5 ) select * from t order by 1 nulls last;
with recursive t as ( select 1 as x union select (select t.x+t2.x from t t2 limit 1) as x from t where x < 10 ) select * from t order by 1 nulls last;
with recursive parents_tab (id , value , parent ) as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1) ), parents_tab2(id , value , parent ) as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1) ), parents as ( select * from parents_tab union all select id, value+2, parent from parents_tab2 ) select * from parents;
with recursive parents_tab (id , value , parent ) as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1) ), parents_tab2(id , value , parent ) as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1) ) select * from parents_tab union all select id, value+2, parent from parents_tab2;
with parents_tab (id , value , parent ) as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1) ), parents_tab2(id , value , parent ) as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1) ), parents as ( select * from parents_tab union all select id, value+2, parent from parents_tab2 ) select * from parents;
select * from vparents;
with my_list(value) as (values (1), (2), (3)) select * from my_list limit 0 offset 1;
with cte1 as (select i as j from a) select * from cte1;
with cte1 as (select i as j from a) select x from cte1 t1(x);
with cte1(xxx) as (select i as j from a) select xxx from cte1;
with cte1(xxx) as (select i as j from a) select x from cte1 t1(x);
with cte1 as (select i as j from a), cte2 as (select ref.j as k from cte1 as ref), cte3 as (select ref2.j+1 as i from cte1 as ref2) select * from cte2 , cte3;
with cte1 as (select i as j from a), cte2 as (select ref.j as k from cte1 as ref), cte3 as (select ref2.j+1 as i from cte1 as ref2) select * from cte2 union all select * from cte3;
with cte3 as (select ref2.j as i from cte1 as ref2), cte1 as (select i as j from a), cte2 as (select ref.j+1 as k from cte1 as ref) select * from cte2 union all select * from cte3;
with cte1 as (select i as j from a) select * from cte1 cte11, cte1 cte12;
with cte1 as (select i as j from a) select * from cte1 where j = (select max(j) from cte1 as cte2);
with cte1(x, y) as (select 42 a, 84 b) select zzz, y from cte1 t1(zzz);
select * from va;
with cte as (select * from va) select * from cte;
select * from vb;
select 1 union all (with cte as (select 42) select * from cte);
with recursive cte(d) as ( select 1 union all (with c(d) as (select * from cte) select d + 1 from c where false ) ) select max(d) from cte;
with cte1 as (with b as (select i as j from a) select j from b) select x from cte1 t1(x);
with cte1(xxx) as (with ncte(yyy) as (select i as j from a) select yyy from ncte) select xxx from cte1;
with cte1 as (with b as (select i as j from a) select j from b), cte2 as (with c as (select ref.j+1 as k from cte1 as ref) select k from c) select * from cte1 , cte2;
with cte1 as (select i as j from a) select * from (with cte2 as (select max(j) as j from cte1) select * from cte2) f;
with cte1 as (select i as j from a) select * from cte1 where j = (with cte2 as (select max(j) as j from cte1) select j from cte2);
with cte as (select i as j from a) select * from cte where j = (with cte as (select max(j) as j from cte) select j from cte);
with a as (select * from va) select * from a;
with recursive ctename as ( select empno, ename from emp where empno = 7566 union all select emp.empno, emp.ename from emp join ctename on emp.mgr = ctename.empno ) select * from ctename;
with recursive ctename as ( select empno, ename, 0 as level from emp where empno = 7566 union all select emp.empno, emp.ename, ctename.level + 1 from emp join ctename on emp.mgr = ctename.empno ) select * from ctename;
select * from ctenames;
with recursive fib as ( select 1 as n, 1::bigint as `fibₙ`, 1::bigint as `fibₙ₊₁` union all select n+1, `fibₙ₊₁`, `fibₙ` + `fibₙ₊₁` from fib ) select n, `fibₙ` from fib limit 20;
with recursive t as (select 1 as x union select x+1 from t where x < 3) select * from t order by x;
with recursive t(x) as (select 1 union select x+1 from t where x < 3) select * from t order by x;
with recursive t(x) as (select 1 union select x+1 from t where x < 3) select zz from t t1(zz) order by zz;
with recursive t(x) as (select 1 union select zzz+1 from t t1(zzz) where zzz < 3) select zz from t t1(zz) order by zz;
with recursive t as (select 1 as x union select x from t) select * from t;
with recursive t as (select 1 as x union select x+1 from t as m where m.x < 3) select * from t order by x;
with recursive t as (select 1 as x union select m.x+f.x from t as m, t as f where m.x < 3) select * from t order by x;
with recursive t as (select 1 as x, 'hello' as y union select x+1, y || '-' || 'hello' from t where x < 3) select * from t order by x;
with recursive t as (select 1 as x union select x+1 from t where x < 3) select min(a1.x) from t a1, t a2;
with recursive t as (select 1 as x union select x+(select 1) from t where x < 3) select * from t order by x;
with recursive t as (select 1 as x union all select * from (select x from t where x < 5) tbl(i) join (select 1) tbl2(i) using (i)) select * from t limit 3;
with recursive t as (select 1 as x union all select * from (select 1) tbl2(i) join (select x from t where x < 5) tbl(i) using (i)) select * from t limit 3;
with recursive t as (select 1 as x union all select * from (select x from t where x < 5) tbl(i) join (select first(i) from (values (1)) tbl3(i) limit 1) tbl2(i) using (i)) select * from t limit 3;
with recursive t as (select 1 as x union all select * from (select first(i) from (values (1)) tbl3(i) limit 1) tbl2(i) join (select x from t where x < 5) tbl(i) using (i)) select * from t limit 3;
with recursive t as (select 1 as x union select x+(select 1+t.x) from t where x < 5) select * from t order by x;
with recursive t as (select (select min(x) from integers) as x union select x+1 from t where x < 3) select * from t order by x;
with recursive t as (select 1 as x union select sum(x+1) from t where x < 3) select * from t order by 1 nulls last;
select * from vr;
with recursive t as (select 1 as x union all select x+1 from t where x < 3) select * from t;
with recursive t as (select 1 as x union all select x+1 from t as m where m.x < 3) select * from t;
with recursive t as (select 1 as x union all select m.x+f.x from t as m, t as f where m.x < 3) select * from t;
with recursive t as (select 1 as x, 'hello' as y union all select x+1, y || '-' || 'hello' from t where x < 3) select * from t;
with recursive t as (select 1 as x union all select x+1 from t where x < 3) select min(a1.x) from t a1, t a2;
with recursive t as (select 1 as x union all select x+(select 1) from t where x < 3) select * from t;
with recursive t as (select (select min(x) from integers) as x union all select x+1 from t where x < 3) select * from t;
with recursive t as (select 1 as x union all select sum(x+1) as x from t where x < 3 group by x) select * from t;
with recursive t as (select 1 as x union all select sum(x+1) as x from t where x < 3) select * from (select * from t limit 10) t1(x) order by x nulls last;
with recursive t as ( select 1 as i union all select j from t, generate_series(0, 10, 1) series(j) where j=i+1 ) select * from t;
select count(k) from aggr;
select count(*) from a;
select count(*) from a where i >= 2000 and i < 5000;
select count(*) from a;
select * from a;
select count(*) from integers;
select text(1234567.897, 'h');
select text(1234567.897, 'hh');
select text(1234567.897, 's');
select text(1234567.897, 'ss');
select text(12345.678, '[h]');
select text(12345.678, '[m]');
select text(12345.678, '[s]');
select text(12345.678, '[hh]');
select text(12345.678, '[mm]');
select text(12345.678, '[ss]');
select text(1234567.897, 'h am/pm');
select text(1234567.897, 'h:mm am/pm');
select text(1234567.897, 'h:mm:ss a/p');
select text(1234567.897, 'h:mm:ss.00');
select text(12345.678, '[h]:mm');
select text(1234567.897, 'h m');
select text(1234567.897, 'm');
select text(1234567.897, 'mm');
select text(1234567.897, 'm s');
select text(12345.678, '[mm]:ss');
select text(12345.678, '[m]:ss');
select text(12345.678, '[s].00');
select text(12345.678, '[ss].00');
select text(1234567.897, 'dd');
select text(1234567.897, 'd');
select text(1234567.897, 'dd.mm');
select text(1234567.897, 'dd/mm');
select text(1234567.897, 'mm/dd/yyyy');
select text(1234567.897, 'm/d/yyyy h:mm am/pm');
select text(1234567.897, 'dddd, dd of mmmm of yyyy');
select text(1234567.897, 'aaa');
select text(1234567.897, 'aaaa');
select text(1234567.897, 'dddd');
select text(1234567.897, 'ddd, dd of mmmm');
select text(1234567.897, 'mmmm');
select text(1234567.897, 'mmm');
select text(1234567.897, '.00_0%');
select text(1234567.897, '0.0%');
select text(1234567.897, '0.00%');
select text(1234567.897, '# ?/?');
select text(1234567.897, '# ??/??');
select text(1234567.897, '# ???/???');
select text(1234567.897, '# ?/2');
select text(1234567.897, '# ?/4');
select text(1234567.897, '# ??/16');
select text(1234567.897, '# ??/10');
select text(1234567.897, '# ??/100');
select text(1234567.897, '### #/0');
select text(1234567.897, '#,### ??/123');
select text(1234567.897, '0/0');
select text(1234567.897, '00/0');
select text(258.9876, '0/57');
select text(1234567.897, '0.00e+00');
select text(1234567.897, '0.00e+0');
select text(1234567.897, '0.0e+0');
select text(1234567.897, '#.##e+000');
select text(1234567.897, '#.##e-000');
select text(1234567.897, '#.#_#e+00x0');
select text(1234567.897, '0.e+00');
select text(1234567.897, '#.00e+0');
select text(1234567.897, '00000');
select text(1234567.897, '000-00-0000');
select text(12345678912, '(###) ###-####');
select text(1234567.897, '##-#00');
select text(123456789712, '(000)000-00-0000');
select text(1234567.897, '#,###');
select text(1234567.897, '0,000.00');
select text(1234567.897, '#,');
select text(1234567.897, '#,000.0');
select text(1234567.897, '0.0,,');
select text(1234567.897, '$#,###.00');
select text(1234567.897, '0,0,0,0');
select text(1234567.897, '$#,##0');
select text(1234567.897, '$,##0.00_');
select text(1234567.897, '$#,##0.00');
select text(1234567.897, '$*#,##0');
select text(1234567.897, '$*#,##0.00');
select text(1234567.897, '$ 0.##');
select text(1234567.897, '####');
select text(1234567.897, '##.###');
select text(1234567.897, '0.00');
select text(1234567.897, '#.');
select text(1234567.897, '#');
select text(1234567.897, '#;#');
select text(1234567.897, '.##000#');
select text(1234567.897, '#.#');
select text(1234567.897, '##.00##');
select text(1234567.897, '#_x#');
select text(1234567.897, '[>1]##');
select text(1234567.897, '[<=0]##;[>0]##.0');
select text(1234567.897, '[<>3.90e2]##');
select text(1234567.897, '0');
select excel_text(123456789123, '[<=9999999]##-####;[>9999999](###) ###-####');
select excel_text(1234567, '[<=9999999]##-####;[>9999999](###) ###-####');
select excel_text(1234567.897, '$$$$$$$0');
select text(1234567.897, '_ $* #,##0_ ;_ $* -#,##0_ ;_ $* - _ ;_ @_ ');
select excel_text(-1234567.897, '_ $* #,##0_ ;_ $* -#,##0_ ;_ $* - _ ;_ @_ ');
select text(0.0, '_ $* #,##0_ ;_ $* -#,##0_ ;_ $* - _ ;_ @_ ');
select text(1234567.897, '_ $* #,##0.00_ ;_ $* -#,##0.00_ ;_ $* - ??_ ;_ @_ ');
select excel_text(-1234567.897, '_ $* #,##0.00_ ;_ $* -#,##0.00_ ;_ $* - ??_ ;_ @_ ');
select excel_text(0.0, '_ $* #,##0.00_ ;_ $* -#,##0.00_ ;_ $* - ??_ ;_ @_ ');
select text(1.0, 3.5);
select f(1);
select * from read_csv('__test_dir__/test.json', columns={'json': 'varchar'}, sep='🦆');
select * from v2 order by 1;
select * from integers order by 1;
select * from enums order by 1;
select * from strings order by 1;
select * from v1 order by 1;
select * from v3 order by 1;
select * from `table.with-symbols` order by 1;
select * from `view.with-symbols` order by 1;
select * from `view ``.` order by 1;
select * from `same_name` order by i;
select * from table01 order by i;
select * from s1.table01 order by i;
select * from s2.table01 order by i;
select my_schema.elaborate_macro(28, y := 5);
select max(i) from my_schema.my_range(33, y := 10);
select max(i) from my_schema.my_other_range(40);
select count(*) from integers where a<5;
select count(*) from (select * from integers where (a>1 and a<10) or a>9995) tbl(a) where a<5;
select count(*) from (select * from (select * from integers where (a <> 3 and a<50) or (a > 9995)) where a>1 and a<20) tbl(a) where a<5;
select i % 2 as k from integers where k<>0;
select i % 2 as i from integers where i<>0;
select i % 2 as k from integers where integers.i<>0;
select i % 2 as k from integers where k=k;
select * from integers where 2=2;
select * from integers where 2<>3;
select * from integers where 2>1;
select * from integers where 2>=2;
select * from integers where 2<3;
select * from integers where 2<=2;
select a=null from integers;
select null=a from integers;
select * from integers where 2 in (2, 3, 4, 5);
select * from integers where 2 in (((1*2)+(1*0))*1, 3, 4, 5);
select case when 1 then 13 else 12 end;
select * from integers where case when 2=2 then true else false end;
select count(*) as unfiltered, count(*) filter (where i < 5) as filtered from t;
select count(*) as unfiltered, count(*) filter (where i > 5 and i < 10) as filtered from t;
select sum(i) as unfiltered, sum(i) filter (where i < 5) as filtered from t;
select sum(i) as unfiltered, sum(i) filter (where i between 5 and 10) as filtered from t;
select sum(i) as unfiltered, sum(j) filter (where j < 2) as filtered from t;
select sum(j) filter (where i < 10) from t;
select sum(j) filter (where i < (select 10)) from t;
select sum(i) filter (where i < (select i from t as t2 where t.i = t2.i)) from t;
select (select sum(t2.i) filter (where t2.i < 10) from t as t2) sq from t order by sq limit 5;
select sum(j) filter (where i < 10), sum(i) filter (where i < 5) from t;
select sum(i) as unfiltered, sum(i) filter (where i between 5 and 10) as filtered from t group by j order by j;
select sum(i) as unfiltered, sum(j) filter (where j = 1) as filtered, j from t group by j order by j;
select sum(j) filter (where i < 10) from t group by j order by j;
select sum(j) filter (where i < (select 10)) from t group by j order by j;
select sum(i) filter (where i < (select i from t as t2 where t.i = t2.i)) from t group by j order by j;
select sum(j) filter (where i < 10), sum(i) filter (where i < 5) from t group by j order by j;
select sum(i) as unfiltered, sum(i) filter (where i between 5 and 10) as filtered from t group by k order by k;
select sum(i) as unfiltered, sum(j) filter (where j = 1) as filtered, k from t group by k order by k;
select sum(j) filter (where i < 10) from t group by k order by k;
select sum(j) filter (where i < (select 10)) from t group by k order by k;
select sum(i) filter (where i < (select i from t as t2 where t.i = t2.i)) from t group by k order by k;
select sum(j) filter (where i < 10), sum(i) filter (where i < 5) from t group by k order by k;
select covar_pop(a,b) filter (where a < 100), covar_pop(a,b) filter (where b <5) from t_2;
select covar_pop(a,c) filter (where a < 100), covar_pop(a,c) filter (where c <50) from t_2 group by b order by b;
select title, array_agg (first_name || ' ' || last_name) filter (where first_name = 'matt') actors from films join film_actor using (film_id) join actors using (actor_id) group by title order by title;
select title, string_agg (first_name || ' ' || last_name) filter (where first_name = 'matt') actors from films join film_actor using (film_id) join actors using (actor_id) group by title order by title;
select sum(distinct i) filter (where i >1 and i < 5) from integers;
select * from integers where true order by 1;
select * from integers where false order by 1;
select * from integers where null order by 1;
select * from integers where a=2 and a=2;
select * from integers where a=2 and a>0;
select * from integers where a>0 and a=2;
select * from integers where a=2 and a<4;
select * from integers where a<4 and a=2;
select * from integers where a=2 and a<=2;
select * from integers where a=2 and a>=2;
select * from integers where a>2 and a>4;
select * from integers where a>4 and a>2;
select * from integers where a>4 and a>=4;
select * from integers where a>=4 and a>4;
select * from integers where a<2 and a<4;
select * from integers where a<4 and a<2;
select * from integers where a<2 and a<=2;
select * from integers where a<=2 and a<2;
select * from integers where a<2 and a<>3;
select * from integers where a<=1 and a<>3;
select * from integers where a>4 and a<>2;
select * from integers where a>=5 and a<>2;
select * from integers where a>=4 and a<>4 and a<>4;
select * from integers where a<3 and a<4 and a<5 and a<10 and a<2 and a<20;
select * from integers where a=2 and a=4;
select * from integers where a=2 and a>4;
select * from integers where a>4 and a=2;
select * from integers where a=2 and a>2;
select * from integers where a>=4 and a=2;
select * from integers where a=4 and a<2;
select * from integers where a<2 and a=4;
select * from integers where a=2 and a<2;
select * from integers where a<=2 and a=4;
select * from integers where a<2 and a>4;
select * from integers where a=2 and a<>2;
select * from integers where a<>2 and a=2;
select * from integers where 0;
select * from integers where a<2 and 0;
select * from strings where s='hello' and s='hello';
select * from strings where s='hello' and s='world';
select * from strings where s='hello' and s<>'hello';
select * from strings where s='hello' and s<>'world';
select * from strings where s='hello' and s>'a';
select * from strings where s='hello' and s>='hello';
select * from strings where s='hello' and s<='hello';
select * from strings where s='hello' and s<'z';
select * from strings where s='hello' and s<='a';
select * from strings where s='hello' and s<'hello';
select * from strings where s='hello' and s>'hello';
select * from strings where s='hello' and s>='z';
select * from strings where s<>'hello' and s<='a';
select * from strings where s<>'hello' and s<'hello';
select * from strings where s<>'hello' and s>'hello';
select * from strings where s<>'world' and s>='hello';
select * from vals1 where i=5 and j>=i;
select * from vals1 where i>9 and j>=i;
select * from vals1 where i>=10 and j>=i;
select * from vals1 where i<1 and j>=i;
select * from vals1 where i<=0 and j>=i;
select * from vals1 where i=5 and j<=i;
select * from vals1 where i>9 and j<=i;
select * from vals1 where i>=10 and j<=i;
select * from vals1 where i<1 and j<=i;
select * from vals1 where i<=0 and j<=i;
select * from vals1 where i=5 and j>i;
select * from vals1 where i>9 and j>i;
select * from vals1 where i>=10 and j>i;
select * from vals1 where i<1 and j>i;
select * from vals1 where i<=0 and j>i;
select * from vals1 where i=5 and j<i;
select * from vals1 where i>9 and j<i;
select * from vals1 where i>=10 and j<i;
select * from vals1 where i<1 and j<i;
select * from vals1 where i<=0 and j<i;
select * from vals1 where j>=i and i=5;
select * from vals1 where j>=i and i>9;
select * from vals1 where j>=i and i>=10;
select * from vals1 where j>=i and i<1;
select * from vals1 where j>=i and i<=0;
select * from vals1 where j<=i and i=5;
select * from vals1 where j<=i and i>9;
select * from vals1 where j<=i and i>=10;
select * from vals1 where j<=i and i<1;
select * from vals1 where j<=i and i<=0;
select * from vals1 where j>i and i=5;
select * from vals1 where j>i and i>9;
select * from vals1 where j>i and i>=10;
select * from vals1 where j>i and i<1;
select * from vals1 where j>i and i<=0;
select * from vals1 where j<i and i=5;
select * from vals1 where j<i and i>9;
select * from vals1 where j<i and i>=10;
select * from vals1 where j<i and i<1;
select * from vals1 where j<i and i<=0;
select * from vals1, vals2 where i>9 and j<=l and k>=i and l<11 order by 2 desc, 4 desc;
select * from vals1, vals2 where i>9 and j>=i and k>=j order by l;
select * from vals1, vals2 where i>9 and k>=j and j>=i and l>=k;
select * from vals1, vals2 where i<1 and k<=j and j<=i and l<=k;
select sum(i) from integers where i=1;
select sum(i) from integers where i=2;
select sum(i) from integers where i=3;
select sum(i) from integers where i=4;
select sum(i) from integers where i=5;
select sum(i) from integers where i=6;
select base64(encode(''));
select base64(encode('a'));
select base64(encode('ab'));
select base64(encode('abc'));
select base64(encode('üäabcdef'));
select base64(encode('ijweriuhjruhwuiehr8493231'));
select base64(encode('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz1234567890'));
select to_base64(encode('base64 encoded string'));
select from_base64(base64(encode('')));
select from_base64(base64(encode('a')));
select from_base64(base64(encode('ab')));
select from_base64(base64(encode('abc')));
select from_base64(base64(encode('ijweriuhjruhwuiehr8493231')));
select from_base64(base64(encode('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz1234567890')));
select from_base64('aaaa');
select encode('ü');
select decode(encode('ü'));
select decode('\xf0\x9f\xa6\x86'::blob);
select decode(encode(a)) || a from (values ('hello'), ('world')) tbl(a);
select extract(year from d) from dates;
select extract(month from d) from dates;
select extract(day from d) from dates;
select extract(microseconds from d) from dates;
select extract(milliseconds from d) from dates;
select extract(second from d) from dates;
select extract(minute from d) from dates;
select extract(hour from d) from dates;
select extract(dow from d) from dates;
select extract(week from d) from dates;
select extract(doy from d) from dates;
select extract(quarter from d) from dates;
select weekday(d) from dates;
select weekofyear(d) from dates;
select stats(extract(year from d)) from dates limit 1;
select stats(extract(month from d)) from dates limit 1;
select stats(extract(day from d)) from dates limit 1;
select stats(extract(microseconds from d)) from dates limit 1;
select stats(extract(milliseconds from d)) from dates limit 1;
select stats(extract(second from d)) from dates limit 1;
select stats(extract(minute from d)) from dates limit 1;
select stats(extract(hour from d)) from dates limit 1;
select stats(extract(dow from d)) from dates limit 1;
select stats(extract(week from d)) from dates limit 1;
select stats(extract(doy from d)) from dates limit 1;
select stats(extract(quarter from d)) from dates limit 1;
select stats(weekday(d)) from dates limit 1;
select stats(weekofyear(d)) from dates limit 1;
select date_part(null::varchar, null::timestamp) from dates;
select date_part(s, null::timestamp) from dates;
select date_part(null, d) from dates;
select date_part(s, date '1992-01-01') from dates;
select date_part('year', d) from dates;
select date_part('isoyear', d) from dates;
select date_part(s, d) from dates;
select date_part('era', d) from dates;
select date_part(null, d::timestamp) from dates;
select date_part(s, timestamp '1992-01-01') from dates;
select date_part('year', d::timestamp) from dates;
select date_part('isoyear', d::timestamp) from dates;
select date_part(s, d::timestamp) from dates;
select date_part('era', d::timestamp) from dates;
select date_part('timezone', d::timestamp) from dates;
select date_part('timezone_hour', d::timestamp) from dates;
select date_part('timezone_minute', d::timestamp) from dates;
select last_day(date '1900-02-12'), last_day(date '1992-02-12'), last_day(date '2000-02-12');
select last_day(d) from dates;
select last_day(d::timestamp) from dates;
select monthname(d) from dates;
select dayname(d) from dates;
select date_part('quarter', date '1992-01-20'), date_part('quarter', date '1992-02-20'), date_part('quarter', date '1992-03-20'), date_part('quarter', date '1992-04-20'), date_part('quarter', date '1992-05-20'), date_part('quarter', date '1992-06-20'), date_part('quarter', date '1992-07-20'), date_part('quarter', date '1992-08-20'), date_part('quarter', date '1992-09-20'), date_part('quarter', date '1992-10-20'), date_part('quarter', date '1992-11-20'), date_part('quarter', date '1992-12-20');
select d, date_part(['year', 'month', 'day'], d) as parts from dates order by 1;
select date_part(specifier, '${special}'::date) as result from specifiers where result is not null;
select floor('${special}'::date);
select date_trunc(null::varchar, null::timestamp) from dates;
select date_trunc(s, null::timestamp) from dates;
select date_trunc(null, d) from dates;
select date_trunc(null::varchar, null::timestamp) from timestamps limit 3;
select date_trunc(s, null::timestamp) from timestamps limit 3;
select date_trunc(null, d) from timestamps limit 3;
select date_trunc('month', date '1992-02-02') from dates limit 1;
select date_trunc(s, d) from dates;
select date_trunc('minute', timestamp '1992-02-02 04:03:02') from timestamps limit 1;
select date_trunc(s, d) from timestamps;
select date_trunc(s, cast(d as date)) from timestamps;
select date_trunc('week', timestamp '2020-01-01 04:03:02') from timestamps limit 1;
select date_trunc('week', timestamp '2019-01-06 04:03:02') from timestamps limit 1;
select date_trunc('quarter', timestamp '2020-12-02 04:03:02') from timestamps limit 1;
select date_trunc('quarter', timestamp '2019-01-06 04:03:02') from timestamps limit 1;
select date_trunc('year', timestamp '2019-01-06 04:03:02') from timestamps limit 1;
select date_trunc('day', timestamp '2019-01-06 04:03:02') from timestamps limit 1;
select date_trunc('hour', timestamp '2019-01-06 04:03:02') from timestamps limit 1;
select date_trunc('milliseconds', timestamp '2019-01-06 04:03:02.123456') from timestamps limit 1;
select date_trunc('microseconds', timestamp '2019-01-06 04:03:02.123456');
select d::date, date_trunc('isoyear', d)::date from generate_series('2000-01-01'::timestamp, '2023-01-01'::timestamp, interval 1 year) tbl(d);
select stats(date_trunc('year', d)) from dates limit 1;
select stats(date_trunc('quarter', d)) from dates limit 1;
select stats(date_trunc('month', d)) from dates limit 1;
select stats(date_trunc('day', d)) from dates limit 1;
select stats(date_trunc('${daypart}', d)) from timestamps limit 1;
select extract(year from i) from dates;
select extract(month from i) from dates;
select extract(day from i) from dates;
select extract(dow from i) from dates;
select extract(doy from i) from dates;
select extract(week from i) from dates;
select extract(second from i) from dates;
select extract(minute from i) from dates;
select extract(hour from i) from dates;
select extract(milliseconds from i) from dates;
select extract(microsecond from i) from dates;
select extract(dow from cast('1970-01-01' as date) + 0);
select extract(dow from cast('1970-01-01' as date) - 0);
select extract(dow from cast('1970-01-01' as date) + 1);
select extract(dow from cast('1970-01-01' as date) - 1);
select extract(dow from cast('1970-01-01' as date) + 2);
select extract(dow from cast('1970-01-01' as date) - 2);
select extract(dow from cast('1970-01-01' as date) + 3);
select extract(dow from cast('1970-01-01' as date) - 3);
select extract(dow from cast('1970-01-01' as date) + 4);
select extract(dow from cast('1970-01-01' as date) - 4);
select extract(dow from cast('1970-01-01' as date) + 5);
select extract(dow from cast('1970-01-01' as date) - 5);
select extract(dow from cast('1970-01-01' as date) + 6);
select extract(dow from cast('1970-01-01' as date) - 6);
select extract(dow from cast('1793-05-26' as date));
select extract(week from cast('2005-01-01' as date));
select extract(week from cast('2006-01-01' as date));
select extract(week from cast('2007-01-01' as date));
select extract(week from cast('2008-01-01' as date));
select extract(week from cast('2009-01-01' as date));
select extract(week from cast('2010-01-01' as date));
select extract(week from cast('2007-01-01' as date) + 0);
select extract(week from cast('2007-01-01' as date) + 7);
select extract(week from cast('2007-01-01' as date) + 14);
select extract(week from cast('2007-01-01' as date) + 21);
select extract(week from cast('2007-01-01' as date) + 28);
select extract(week from cast('2007-01-01' as date) + 35);
select extract(week from cast('2007-01-01' as date) + 42);
select extract(week from cast('2007-01-01' as date) + 49);
select extract(week from cast('2007-01-01' as date) + 56);
select extract(week from cast('2007-01-01' as date) + 63);
select extract(week from cast('2007-01-01' as date) + 70);
select extract(week from cast('2007-01-01' as date) + 77);
select extract(week from cast('2007-01-01' as date) + 84);
select extract(week from cast('2007-01-01' as date) + 91);
select extract(week from cast('2007-01-01' as date) + 98);
select extract(week from cast('2007-01-01' as date) + 105);
select extract(week from cast('2007-01-01' as date) + 112);
select extract(week from cast('2007-01-01' as date) + 119);
select extract(week from cast('2007-01-01' as date) + 126);
select extract(week from cast('2007-01-01' as date) + 133);
select extract(week from cast('2007-01-01' as date) + 140);
select extract(week from cast('2007-01-01' as date) + 147);
select extract(week from cast('2007-01-01' as date) + 154);
select extract(week from cast('2007-01-01' as date) + 161);
select extract(week from cast('2007-01-01' as date) + 168);
select extract(week from cast('2007-01-01' as date) + 175);
select extract(week from cast('2007-01-01' as date) + 182);
select extract(week from cast('2007-01-01' as date) + 189);
select extract(week from cast('2007-01-01' as date) + 196);
select extract(week from cast('2007-01-01' as date) + 203);
select extract(week from cast('2007-01-01' as date) + 210);
select extract(week from cast('2007-01-01' as date) + 217);
select extract(week from cast('2007-01-01' as date) + 224);
select extract(week from cast('2007-01-01' as date) + 231);
select extract(week from cast('2007-01-01' as date) + 238);
select extract(week from cast('2007-01-01' as date) + 245);
select extract(week from cast('2007-01-01' as date) + 252);
select extract(week from cast('2007-01-01' as date) + 259);
select extract(week from cast('2007-01-01' as date) + 266);
select extract(week from cast('2007-01-01' as date) + 273);
select date '1992-01-01' + interval (i) days, month(date '1992-01-01' + interval (i) days) from range(0, 366) tbl(i);
select date '1993-01-01' + interval (i) days, month(date '1993-01-01' + interval (i) days) from range(0, 366) tbl(i);
select extract(year from d) from dates order by 1;
select extract(year from d) from dates2 order by 1;
select strftime(date '1992-01-01', '%y');
select strftime('%y', date '1992-01-01');
select strftime('%y', timestamp '1992-01-01');
select strftime(date '1992-01-01', '(%y)');
select strftime(date '1992-01-01', '%% %y %%');
select strftime(date '1992-01-01', '%%%%%% %y %%%%%%');
select strftime(date '1992-02-01', '%d/%m/%y');
select strftime(date '1992-02-01', '%y %y %y %y');
select strftime(d, '%d/%m/%y') from dates order by d;
select strftime(null::date, '%d/%m/%y') from dates order by d;
select strftime(d, null) from dates order by d;
select strftime(null::timestamp, null) from range(3);
select strftime(null::timestamp, '%%%%%% %y %%%%%%') from range(3);
select strftime(date '1992-01-01', 'hello world');
select strftime('2019-01-23'::date, 42);
select strftime('${special}'::date, '%y-%m-%d');
select strftime(strptime('023', '%g'), '%g'), strftime(strptime('0', '%g'), '%g'), strftime(strptime('000', '%g'), '%g'), strftime(strptime('999', '%g'), '%g');
select strftime(d, '%a') from dates order by d;
select strftime(d, '%w') from dates order by d;
select strftime(d, '%d') from dates order by d;
select strftime(d, '%-d') from dates order by d;
select strftime(d, '%b') from dates order by d;
select strftime(d, '%h') from dates order by d;
select strftime(d, '%m') from dates order by d;
select strftime(d, '%-m') from dates order by d;
select strftime(d, '%y') from dates order by d;
select strftime(d, '%-y') from dates order by d;
select strftime(date '2001-01-01', '%-y');
select strftime(d, '%-h') from dates order by d;
select strftime(d, '%i') from dates order by d;
select strftime(d, '%-i') from dates order by d;
select strftime(d, '%p') from dates order by d;
select strftime(d, '%s') from dates order by d;
select strftime(d, '%-s') from dates order by d;
select strftime(d, '%f') from dates order by d;
select strftime(d, '%z') from dates order by d;
select strftime(d, '%j') from dates order by d;
select strftime(d, '%-j') from dates order by d;
select strftime(d, '%u') from dates order by d;
select strftime(d, '%c') from dates order by d;
select strftime(d, 'xx%cxx') from dates order by d;
select strftime(d, '%x') from dates order by d;
select strftime(d, 'xx%cxx%xxx%xxx') from dates order by d;
select strftime(date '-99999-01-01', '%y');
select strftime(date '99999-01-01', '%y');
select enum_first(null::rainbow);
select enum_last(null::rainbow);
select enum_range(null::rainbow);
select enum_range_boundary('orange'::rainbow, 'green'::rainbow);
select enum_range_boundary('green'::rainbow, 'orange'::rainbow);
select enum_range_boundary(null, 'green'::rainbow);
select enum_range_boundary('orange'::rainbow, null);
select bigcase(a) from range(5) tbl(a);
select bigcase(a) from (values (477), (832), (1), (3421), (8)) tbl(a);
select sum(bigcase(a)), sum(a) from range(3000) tbl(a);
select sum(bigcase(a)), sum(a) from range(10000) tbl(a);
select * from tbl where case when i%2=0 then 1 else 0 end and case when i<5 then 1 else 0 end;
select n, case when n <> '' and cast(substr(n, 1, 1) as int) <= 0 then '0' when n <> '' and cast(substr(n, 1, 1) as int) > 0 then '1' else '2'end as x from t order by n;
select i, s, case when i%2=0 then s else s end from tbl;
select i, s, case when i%2=0 then s else s end from (select i, s||'_suffix' from tbl) tbl(i, s);
select 10 between 10 and 20;
select 9 between 10 and 20;
select 10 between null and 20;
select 30 between null and 20;
select 10 between 10 and null;
select 9 between 10 and null;
select null between 10 and 20;
select null between null and 20;
select null between 10 and null;
select null between null and null;
select i between 1 and 2 from integers order by i;
select i between null and 2 from integers order by i;
select i between 2 and null from integers order by i;
select count(*) from integers where 10 between 10 and 20;
select count(*) from integers where 9 between 10 and 20;
select count(*) from integers where 10 between null and 20;
select count(*) from integers where 30 between null and 20;
select count(*) from integers where 10 between 10 and null;
select count(*) from integers where 9 between 10 and null;
select count(*) from integers where null between 10 and 20;
select count(*) from integers where null between null and 20;
select count(*) from integers where null between 10 and null;
select count(*) from integers where null between null and null;
select count(*) from integers where i between 1 and 2;
select count(*) from integers where i between null and 2;
select count(*) from integers where i between 2 and null;
select count(*) from integers where null between -1 and +1;
select count(*) from integers where 0 between -1 and +1;
select count(*) from integers where i between i-1 and i+1;
select count(*) from integers where i between i-1 and 10;
select count(*) from integers where i between null and null;
select count(*) from integers where i between i-1 and null;
select count(*) from integers where i between 0 and i+1;
select count(*) from integers where i between null and i+1;
select count(*) from integers where 1 between i-1 and i+1;
select count(*) from integers where null between i-1 and i+1;
select count(*) from integers where null between i-1 and null;
select count(*) from integers where 1 between i-1 and 100;
select count(*) from integers where 1 between 0 and i-1;
select * from integers where i >= 1 and i < 2;
select * from integers where i > 1 and i <= 2;
select * from range(4) tbl(i) where i >= 1 and i < 2;
select * from range(4) tbl(i) where i > 1 and i <= 2;
select (random() * 10)::int between 6 and 5;
select (random() * 10)::int not between 6 and 5;
select case when test.a=11 then b else null end from test;
select case when 1=1 then 1 else null end from test order by b;
select case when 1=1 then b else null end from test order by b;
select case when 3>2 then null else b+1 end from test order by b;
select case when 1=0 then b else b+1 end from test order by b;
select case when b=22 then null else 1 end from test order by b;
select case when b=22 then b+1 else 1 end from test order by b;
select case when b=22 then null else b+1 end from test order by b;
select case when 'true' then null else b+1 end from test order by b;
select case when 'false' then null else b+1 end from test order by b;
select if(true, 1, 10), if(false, 1, 10), if(null, 1, 10);
select if(true, 20, 2000), if(false, 20, 2000), if(null, 20, 2000);
select if(true, 20.5, 2000), if(false, 20, 2000.5), if(null, 20, 2000.5);
select if(true, '2020-05-05'::date, '1996-11-05 10:11:56'::timestamp), if(false, '2020-05-05'::date, '1996-11-05 10:11:56'::timestamp), if(null, '2020-05-05'::date, '1996-11-05 10:11:56'::timestamp);
select if(true, 'true', 'false'), if(false, 'true', 'false'), if(null, 'true', 'false');
select ifnull(null, null), ifnull(null, 10), ifnull(1, 10);
select ifnull(null, 2000), ifnull(20.5, 2000);
select ifnull(null, '1996-11-05 10:11:56'::timestamp), ifnull('2020-05-05'::date, '1996-11-05 10:11:56'::timestamp);
select ifnull(null, 'not null'), ifnull('null', 'not null');
select * from integers where i in (1, 2) order by i;
select * from integers where i in (1, 2, 3, 4, 5, 6, 7, 8) order by i;
select i, i in (1, 2, 3, 4, 5, 6, 7, 8) from integers order by i;
select i, i not in (1, 2, 3, 4, 5, 6, 7, 8) from integers order by i;
select i, i in (1, 2, null, 4, 5, 6, 7, 8) from integers order by i;
select i, i in (i + 1) from integers order by i;
select i, i in (i + 1, 42, i) from integers order by i;
select i, 1 in (i - 1, i, i + 1) from integers order by i;
select i, 1 not in (i - 1, i, i + 1) from integers order by i;
select i, i in (11, 12, 13, 14, 15, 16, 17, 18, 1, i) from integers order by i;
select i, i not in (11, 12, 13, 14, 15, 16, 17, 18, 1, i) from integers order by i;
select i, 1 in (11, 12, 13, 14, 15, 16, 17, 18, 1, i) from integers order by i;
select i, 1 not in (11, 12, 13, 14, 15, 16, 17, 18, 1, i) from integers order by i;
select i, i in ((select max(i) from integers), (select min(i) from integers)) from integers order by i;
select i, (select max(i) from integers where i <> i1.i), (select min(i) from integers where i <= i1.i) from integers i1 order by i;
select i, i in ((select max(i) from integers where i <> i1.i), (select min(i) from integers where i <= i1.i)) from integers i1 order by i;
select least(1);
select least(1, 3);
select least(1, 3, 0);
select least(1, 3, 0, 2, 7, 8, 10, 11, -100, 30);
select least(1, 3, 0, 2, 7, 8, 10, 11, -100, 30, null);
select least(null, 3, 0, 2, 7, 8, 10, 11, -100, 30, 1);
select least(1.0, 10.0);
select least('hello', 'world');
select least('hello', 'world', 'blabla', 'tree');
select least(date '1992-01-01', date '1994-02-02', date '1991-01-01');
select least(date '1992-01-01', date '1994-02-02', date '1991-01-01', null);
select least(date '1992-01-01', date '1994-02-02', date '1991-01-01', date 'infinity', date '-infinity');
select greatest(date '1992-01-01', date '1994-02-02', date '1991-01-01', date 'infinity', date '-infinity');
select least(timestamp '1992-01-01 13:45:21.890123', timestamp '1994-02-02 05:43:21', timestamp '1991-01-01 01:23:45');
select least(timestamp '1992-01-01 13:45:21.890123', timestamp '1994-02-02 05:43:21', timestamp '1991-01-01 01:23:45', null);
select least(timestamp '1992-01-01 13:45:21.890123', timestamp '1994-02-02 05:43:21', timestamp '1991-01-01 01:23:45', timestamp 'infinity', timestamp '-infinity');
select greatest(timestamp '1992-01-01 13:45:21.890123', timestamp '1994-02-02 05:43:21', timestamp '1991-01-01 01:23:45', timestamp 'infinity', timestamp '-infinity');
select least(date '1992-01-01', 'hello', 123);
select least(i, j), greatest(i, j) from t1 order by i;
select least(i, i + 1, j), greatest(i, i - 1, j) from t1 order by i;
select least(i, 800, i + 1, 1000, j), greatest(i, -1000, i - 1, -700, j, -800) from t1 order by i;
select least(i, 800, i + 1, 1000, j, null), greatest(i, -1000, i - 1, -700, j, -800) from t1 order by i;
select least(i, j), greatest(i, j) from t1 where j is not null order by i;
select least(rowid + 10, i, j), greatest(i, rowid + 4, j) from t1 where j is not null order by i;
select least(repeat(i::varchar, 20), j::varchar) from t1;
select nullif(nullif ('hello', 'world'), 'blabla');
select nullif(nullif ((select a from test limit 1 offset 1), a), b) from test2;
select nullif(cast(a as varchar), 11) from test3;
select a, case when a>11 then cast(a as varchar) else cast(b as varchar) end from test3 order by 1;
select current_setting('default_null_order');
select * from range(3) union all select null order by 1;
select stats(5);
select stats(7);
select stats('hello');
select stats('1234567ü');
select stats(5+2);
select stats(i) from integers limit 1;
select stats(i+2) from integers limit 1;
select stats(i-5) from integers limit 1;
select stats(i*2) from integers limit 1;
select stats(i*-1) from integers limit 1;
select stats(i+1) from integers limit 1;
select * from summary((select * from a));
select date_part(null::varchar, null::interval) from intervals;
select date_part(s, null::interval) from intervals;
select date_part(null, i) from intervals;
select date_part('seconds', i) from intervals;
select date_part(s, i) from intervals;
select i, date_part('hour', i) as p, hour(i) as f from intervals where p <> f;
select i, date_part('minute', i) as p, minute(i) as f from intervals where p <> f;
select i, date_part('second', i) as p, second(i) as f from intervals where p <> f;
select i, date_part('millisecond', i) as p, millisecond(i) as f from intervals where p <> f;
select i, date_part('microsecond', i) as p, microsecond(i) as f from intervals where p <> f;
select i, date_part('year', i) as p, year(i) as f from intervals where p <> f;
select i, date_part('quarter', i) as p, quarter(i) as f from intervals where p <> f;
select i, date_part('month', i) as p, month(i) as f from intervals where p <> f;
select i, date_part('day', i) as p, day(i) as f from intervals where p <> f;
select i, date_part('hour', i) as p, date_part(['hour'], i) as st from intervals where p <> st['hour'];
select i, date_part('minute', i) as p, date_part(['minute'], i) as st from intervals where p <> st['minute'];
select i, date_part('second', i) as p, date_part(['second'], i) as st from intervals where p <> st['second'];
select i, date_part('millisecond', i) as p, date_part(['millisecond'], i) as st from intervals where p <> st['millisecond'];
select i, date_part('microsecond', i) as p, date_part(['microsecond'], i) as st from intervals where p <> st['microsecond'];
select i, date_part('year', i) as p, date_part(['year'], i) as st from intervals where p <> st['year'];
select i, date_part('quarter', i) as p, date_part(['quarter'], i) as st from intervals where p <> st['quarter'];
select i, date_part('month', i) as p, date_part(['month'], i) as st from intervals where p <> st['month'];
select i, date_part('day', i) as p, date_part(['day'], i) as st from intervals where p <> st['day'];
select i, date_part('era', i) as p, date_part(['era'], i) as st from intervals where p <> st['era'];
select i, date_part('week', i) as p, date_part(['week'], i) as st from intervals where p <> st['week'];
select i, date_part('weekday', i) as p, date_part(['weekday'], i) as st from intervals where p <> st['weekday'];
select i, date_part('doy', i) as p, date_part(['doy'], i) as st from intervals where p <> st['doy'];
select i, date_part('isoyear', i) as p, date_part(['isoyear'], i) as st from intervals where p <> st['isoyear'];
select i, date_part('timezone', i) as p, date_part(['timezone'], i) as st from intervals where p <> st['timezone'];
select i, date_part('timezone_hour', i) as p, date_part(['timezone_hour'], i) as st from intervals where p <> st['timezone_hour'];
select i, date_part('timezone_minute', i) as p, date_part(['timezone_minute'], i) as st from intervals where p <> st['timezone_minute'];
select i, date_part(['year', 'month', 'day'], i) as parts from intervals order by 1;
select extract(year from i) from intervals;
select extract(month from i) from intervals;
select extract(day from i) from intervals;
select extract(quarter from i) from intervals;
select extract(microsecond from i) from intervals;
select extract(millisecond from i) from intervals;
select extract(second from i) from intervals;
select extract(minute from i) from intervals;
select extract(hour from i) from intervals;
select i from intervals;
select date_trunc('year', i) from intervals;
select date_trunc('quarter', i) from intervals;
select date_trunc('month', i) from intervals;
select date_trunc('day', i) from intervals;
select date_trunc('week', i) from intervals;
select date_trunc('hour', i) from intervals;
select date_trunc('minute', i) from intervals;
select date_trunc('millisecond', i) from intervals;
select date_trunc('microsecond', i) from intervals;
select date_trunc(s, i) from intervals;
select date_trunc(null, i) from intervals;
select list_approx_count_distinct([10]), list_approx_count_distinct(['hello']) from list_ints;
select list_approx_count_distinct(l), list_approx_count_distinct(['hello']) from list_ints;
select list_approx_count_distinct([]) from list_ints;
select list_approx_count_distinct(l) from list_ints;
select list_count(t), list_approx_count_distinct(t) from dates;
select list_count(t), list_approx_count_distinct(t) from timestamp;
select list_count(t), list_approx_count_distinct(t) from names;
select list_count(a), list_approx_count_distinct(a), list_approx_count_distinct(b) from list_ints_2;
select list_approx_count_distinct(a) from list_ints_2;
select list_avg([nextval('seq')]);
select list_avg(i) from integers;
select list_avg(i), list_avg(j) from vals;
select list_avg(n)::double - '3002399751580331'::double from bigints;
select list_aggr(n, 'favg') - '2251799813685248.5'::double from doubles;
select list_sum(i) from bigints;
select list_avg(i) from bigints;
select list_sum(i) from decimals;
select list_avg(i) from decimals;
select list_bit_and([nextval('seq')]);
select list_bit_and([]) from integers;
select list_bit_and(i), list_bit_and([1, 1, 1, 1, 1, 1]), list_bit_and(null) from integers;
select list_bit_or([nextval('seq')]);
select list_bit_or([]) from integers;
select list_bit_or(i), list_bit_or([1, 1, 1, 1, 1, 1]), list_bit_or(null) from integers;
select list_bit_xor([nextval('seq')]);
select list_bit_xor([]) from integers;
select list_bit_xor(i), list_bit_xor([1, 1, 1, 1, 1, 1]), list_bit_xor(null) from integers;
select list_bool_or(l) from bools;
select list_bool_and(l) from bools;
select list_count([1, 2, 3]);
select list_count([1]) from range(3);
select list_count(l) from lists;
select list_entropy([1]);
select list_entropy(k) from aggr;
select list_entropy(l) from entr;
select list_entropy(k) from aggr2;
select list_entropy(name) from names;
select list_aggr([1, 2], 'arbitrary');
select list_first(i) from five;
select list_first(d), list_first(dt), list_first(t), list_first(s) from five_dates;
select list_first(dt), list_first(t) from five_dates_tz;
select list_first(s), list_first(l), list_first(r) from five_complex;
select list_histogram(i) from const;
select list_histogram([1]);
select list_histogram(g) from hist_data;
select list_histogram(name) from names;
select list_histogram(['2021-08-20'::timestamp]);
select list_histogram(['2021-08-20'::timestamp_s]);
select list_histogram(['2021-08-20'::timestamp_ms]);
select list_histogram(['2021-08-20'::timestamp_ns]);
select list_histogram(['2022-01-02'::date]);
select list_histogram(['15:00:07'::time]);
select list_histogram([interval 1 year]);
select list_first(h), list_last(h), list_sum(h) from hugeints;
select list_min(h), list_max(h), list_sum(h), list_first(h), list_last(h) from hugeints;
select list_kurtosis([1]);
select list_kurtosis([0, 0, 0, 0, 0, 0]);
select list_kurtosis(k) from aggr;
select list_last(i) from five;
select list_last(d), list_last(dt), list_last(t), list_last(s) from five_dates;
select list_last(dt), list_last(t) from five_dates_tz;
select list_last(s), list_last(l), list_last(r) from five_complex;
select list_mad([1]);
select list_mad(i) from const;
select list_mad(r) from tinys;
select list_mad(r) from numerics;
select list_mad(r) from date;
select list_mad(r) from hour;
select list_mad(r) from second;
select list_mad(x) from (values (['294247-01-10'::date, '290309-12-22 (bc)'::date])) tbl(x);
select list_mad(x) from (values (['294247-01-10 04:00:54.775806'::timestamp, '290309-12-22 (bc) 00:00:00'::timestamp])) tbl(x);
select list_mad(x) from (values (['23:59:59.999999'::time, '00:00:00'::time])) tbl(x);
select list_mad(x) from (values (['127'::decimal(3,0), '-128'::decimal(3,0)])) tbl(x);
select list_mad(x) from (values (['32767'::decimal(5,0), '-32768'::decimal(5,0)])) tbl(x);
select list_mad(x) from (values (['2147483647'::decimal(10,0), '-2147483648'::decimal(10,0)])) tbl(x);
select list_max(i) from five;
select list_max(d), list_max(dt), list_max(t), list_max(s) from five_dates;
select list_max(dt), list_max(t) from five_dates_tz;
select list_max(s), list_max(l), list_max(r) from five_complex;
select list_median(r) from quantile;
select list_min(i) from five;
select list_min(d), list_min(dt), list_min(t), list_min(s) from five_dates;
select list_min(dt), list_min(t) from five_dates_tz;
select list_min(s), list_min(l), list_min(r) from five_complex;
select list_mode(name) from names;
select list_mode(v) from dates;
select list_mode(v) from times;
select list_mode(v) from timestamps;
select list_mode(v) from intervals;
select list_mode(v) from hugeints;
select list_mode(v) from aggr;
select list_min(list_concat([1, 2], [-1]));
select list_min(list_aggr([1, 2], 'list'));
select list_last(list_concat(l1, l2)) from lists;
select list_concat(list(list_last(l1)), list(list_first(l2))) from lists;
select array_aggregate([1, 2], 'min');
select array_aggr([1, 2], 'min');
select list_aggregate([1, 2], 'min');
select list_aggr(null, 'kurtosis');
select list_aggr([null], 'kurtosis');
select list_aggr([], 'kurtosis');
select list_product(i) from integers;
select list_product(i) from prods;
select list_sem([1]);
select list_sem(k), list_sem(v), list_sem(v2) from aggr;
select list_sem(l) from sems;
select list_skewness([1]);
select list_skewness (i) from skew;
select list_skewness(k), list_skewness(v), list_skewness(v2) from aggr;
select list_skewness(v2) from aggr2;
select list_string_agg(['a', ',']);
select list_string_agg(['a']);
select list_string_agg(str) from str_aggs;
select list_string_agg(x), list_string_agg(y), list_string_agg(g) from strings;
select list_string_agg(x) from strings where g > [100];
select list_string_agg([1, 2]);
select list_aggr(['a'], 'group_concat');
select list_count(g), list_count(g) from long;
select list_string_agg(g) from long;
select list_sum([2, 2]);
select list_sum(i) from integers;
select list_aggr(n, 'fsum') from doubles;
select list_aggr(n, 'sumkahan') from doubles;
select list_aggr(n, 'kahan_sum') from doubles;
select list_sum(i) from bigints;
select list_aggr([false], 'kurtosis');
select list_aggr([null::boolean], 'kurtosis');
select list_aggr(['hello'], 'kurtosis');
select list_aggr([null::varchar], 'kurtosis');
select list_aggr([1::smallint], 'kurtosis');
select list_aggr([1::integer], 'kurtosis');
select list_aggr([1::bigint], 'kurtosis');
select list_aggr([1::hugeint], 'kurtosis');
select list_aggr([1::float], 'kurtosis');
select list_aggr([1::double], 'kurtosis');
select list_aggr([null::smallint], 'kurtosis');
select list_aggr([null::integer], 'kurtosis');
select list_aggr([null::bigint], 'kurtosis');
select list_aggr([null::hugeint], 'kurtosis');
select list_aggr([null::float], 'kurtosis');
select list_aggr([null::double], 'kurtosis');
select list_aggr(['2021-08-20'::date], 'kurtosis');
select list_aggr(['14:59:37'::time], 'kurtosis');
select list_aggr(['2021-08-20'::timestamp], 'kurtosis');
select list_aggr(['2021-08-20'::timestamp_s], 'kurtosis');
select list_aggr(['2021-08-20 00:00:00.123'::timestamp_ms], 'kurtosis');
select list_aggr(['2021-08-20 00:00:00.123456'::timestamp_ns], 'kurtosis');
select list_aggr([interval 1 year], 'kurtosis');
select list_aggr(['{a: 1}'::json], 'kurtosis');
select list_aggr([null::json], 'kurtosis');
select list_aggr(['{a: 1}'::blob], 'kurtosis');
select list_aggr([null::blob], 'kurtosis');
select list_aggr(e, 'kurtosis') from enums;
select list_aggr([[1]], 'kurtosis');
select list_aggr([{'a': 1}], 'kurtosis');
select list_stddev_samp([1]);
select list_var_samp([1]);
select round(list_stddev_samp(val), 1) from stddev_test;
select list_sum(val), round(list_stddev_samp(val), 1), list_min(val) from stddev_test;
select round(list_stddev_pop(val), 1) from stddev_test;
select list_sum(val), round(list_stddev_pop(val), 1), list_min(val) from stddev_test;
select round(list_var_samp(val), 1) from stddev_test;
select round(list_aggr(val, 'variance'), 1) from stddev_test;
select list_sum(val), round(list_var_samp(val), 1), list_min(val) from stddev_test;
select round(list_var_pop(val), 1) from stddev_test;
select list_sum(val), round(list_var_pop(val), 1), list_min(val) from stddev_test;
select round(list_aggr(val, 'stddev'), 1) from stddev_test;
select list_aggr([0], 'stddev');
select list_aggr([0, 0], 'stddev');
select length([1,2,3]);
select length([]);
select len(null);
select array_length(array[1, 2, 3], 1);
select len([1]) from range(3);
select len(l) from lists;
select flatten([[1, 2, 3, 4]]);
select flatten([[1, 2], [3, 4]]);
select flatten([[], []]);
select flatten([[1, 2], [], [3, 4]]);
select flatten([[1, 2], []]);
select flatten([[], [1, 2]]);
select flatten(null);
select flatten([null]);
select flatten([[null]]);
select flatten([null, [1], [2, 3], null, [4, null], [null, null]]);
select flatten([[[1, 2], [3, 4]], [[5,6], [7, 8]]]);
select flatten(flatten(flatten([[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]])));
select flatten([[[1, 2], [3, 4]], [], [[5, 6], [7, 8]]]);
select flatten([[[1, 2], [3, 4]], [[]], [[5, 6], [7, 8]]]);
select flatten([[[]], [[]]]);
select flatten(flatten([[[]], [[]]]));
select i, flatten(j) from nested_lists;
select i, flatten(j) from nested_lists where i % 2 != 0;
select i, flatten([[1, 2], [3, 4]]) from nested_lists;
select range(3);
select generate_series(3);
select range(3) from range(3);
select range(i) from range(3) tbl(i);
select range(null) from range(3) tbl(i);
select range(case when i%2=0 then null else i end) from range(6) tbl(i);
select range(0);
select range(-1);
select range(null);
select range(1, 3);
select generate_series(1, 3);
select range(1, 1);
select range(-10, -5);
select generate_series(1, 1);
select range(3, 1);
select range(null, 1);
select range(1, null);
select range(null, null);
select range(i, 5) from range(5) tbl(i);
select range(0, i) from range(5) tbl(i);
select range(1, 6, 2);
select generate_series(1, 6, 2);
select generate_series(1, 7, 2);
select range(1, 10, 100);
select range(1, 10, 0);
select range(3, 1, -1);
select generate_series(3, 1, -1);
select range(3, 1, 1);
select range(1, 3, -1);
select range(4, 1, -1);
select range(50, 1, -20);
select generate_series(50, 1, -20);
select generate_series(50, -10, -20);
select range(null, 1, 1);
select range(1, null, 1);
select range(1, 1, null);
select range(null, null, null);
select generate_series(timestamp '2020-01-01', timestamp '2020-07-01', interval '3' month);
select range(timestamp '2020-01-01', timestamp '2020-07-01', interval '3' month);
select generate_series(timestamp '2020-06-01', timestamp '2020-01-01', -interval '3' month);
select generate_series(timestamp '2020-01-01', timestamp '2020-01-01', interval '1' day);
select range(timestamp '2020-01-01', timestamp '2020-01-01', interval '1' day);
select generate_series(timestamp '2020-06-01', timestamp '2020-01-01', interval '3' month);
select generate_series(timestamp '2020-01-01', timestamp '2020-06-01', -interval '3' month);
select generate_series(null, timestamp '2020-06-01', -interval '3' month);
select generate_series(timestamp '2020-01-01', null, -interval '3' month);
select generate_series(timestamp '2020-01-01', timestamp '2020-06-01', null);
select count(*) from ( select unnest(generate_series(timestamp '2000-01-01', timestamp '2020-06-01', interval '1' day)) );
select generate_subscripts([4,5,6], 1);
select generate_subscripts([], 1);
select generate_subscripts(null, 1);
select my_transform([1, 2, 3]);
select my_filter([41, 42, null, 43, 44]);
select my_nested_lambdas([[40, null], [20, 21], [10, 10, 20]]);
select ll.l = tl.l from large_lists ll, transformed_lists tl where ll.g = tl.g;
select list_concat([1, 2], [3, 4]);
select array_cat([1, 2], [3, 4]);
select list_concat(null, [3, 4]);
select list_concat([1, 2], null);
select list_concat([], []);
select list_concat([], [3, 4]);
select list_concat([1, 2], []);
select [1, 2] || [3, 4];
select [1, 2] + [3, 4];
select list_concat([1, 2]::tstz[], [3, 4]::tstz[]);
select list_concat([1.000000, 2.000000]::float[], [3.000000, 4.000000]::double[]);
select list_concat([1.000000, 2.000000]::double[], [3.000000, 4.000000]::float[]);
select list_concat([null], [null]);
select list_concat([1, 2], [null]);
select list_concat([null], [3, 4]);
select list_concat([[1, 2]], [[3, 4]]);
select list_concat([{a: 1}, {a: 2}], [{a: 3}, {a: 4}]);
select list_concat([[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]);
select i, list_concat(j, k) from lists;
select list_append([1, 2], 3);
select list_append([1, 2], null);
select list_append(null, 3);
select i, list_append(list_concat(j, k), i) from lists;
select list_prepend(1, [2, 3]);
select array_prepend(1, [2, 3]);
select array_push_back([1, 2], 3);
select array_push_back(null, 3);
select array_push_front([2, 3], 1);
select array_push_front(null, 1);
select list_contains(i, j) from test2;
select i, list_contains(i,1) from test;
select i, list_contains(i,4.0) from test;
select i, list_contains(i,'a') from str_test;
select i, list_contains(i,'aaaaaaaaaaaaaaaaaaaaaaaa') from str_test;
select i, list_contains(i,0) from str_test;
select i, list_contains(i,null) from str_test;
select list_contains([7,2,5], 7);
select list_contains([], 7);
select list_contains([1,2,3],1.0);
select list_contains([1.0,2.0,3.0,4.0],1);
select list_contains([1,2,3],4.0);
select list_contains([1.0,2.0,3.0],4);
select list_contains([1.0,2.0,3.0], 'a');
select list_contains(null,null);
select list_contains([7], 5);
select list_contains([1,2,3,4],4);
select list_contains([1,2,3,4],5);
select list_contains([1.0,2.0,3.0,4.0],5.0);
select list_contains([1.0,2.0,3.0,4.0],4.0);
select list_contains([true, false],true);
select list_contains([true, true],false);
select list_contains(['test', 'notest'],'notest');
select list_contains(['test', 'notest'],'a');
select list_contains(null,1);
select list_contains([1],null);
select list_contains([null],null);
select list_contains([null, 1],null);
select list_contains([null, 1],1);
select list_contains([null, 0],1);
select list_contains([],null);
select list_contains([null,7], 7);
select list_contains(i,1) from test0;
select list_contains([[1,2,3],[1]],[1]);
select list_contains([[1,2,3],[1]],[2]);
select list_contains([[1,2,3],[1]],[1,2,3]);
select list_contains([[1,3],[1]],[1,2,3]);
select list_contains([[1,3],[1], [1,2,3]],[1,2,3]);
select list_contains([[null],[1], [1,2,3]],null);
select list_contains([[null],[1], [1,2,3]],[null]);
select list_contains([[1,null],[1], [1,2,3]],[1,null]);
select list_contains([[1,null],[1], [1,2,3]],[0,null]);
select list_contains([{a: 1}, {a: 2}], {a: 2});
select list_contains([{a: 1}, {a: 2}], {a: 3});
select list_contains([{a: 1, b: 3}, {a: 2, b: 2}], {a: 2, b: 2});
select list_contains([{a: 1, b: 3}, {a: 2, b: 2}], {a: 1, b: 2});
select list_contains([map([1], [2])], map([1], [2]));
select list_contains([map([1], [2])], map([1], [3]));
select list_contains(i,1.0) from test0;
select function_name from functions where function_type = 'scalar' and list_has(parameter_types, 'timestamp');
select id, name from test where array_contains(name, '2pac');
select id, name from test where id in (2,3) and array_contains(name, '2pac');
with cte as (select id, name from test where id in (2,3)) select id, name from cte where array_contains(name, '2pac');
select list_distinct(null);
select list_distinct([null]);
select list_distinct([]);
select unnest(list_distinct([1, 1, 2, 2, 2, 3])) as l order by l;
select unnest(list_distinct([1, 1, null, 2, 2, 2, 3, null, null])) as l order by l;
select unnest(list_distinct(list_distinct([1, 1, -5, 10, 10, 2]))) as l order by l;
select list_distinct(l) from integers;
select unnest(array_distinct([1, 2, 2, null])) as l order by l;
select unnest(list_distinct([true, true, false, null])) as l order by l;
select list_distinct([null::boolean]);
select unnest(list_distinct(['aa', 'aa', 'cd', null, '42'])) as l order by l;
select list_distinct([null::varchar]);
select list_distinct([1::smallint, null, 1::smallint]);
select list_distinct([1::integer, null, 1::integer]);
select list_distinct([1::bigint, null, 1::bigint]);
select list_distinct([1::hugeint, null, 1::hugeint]);
select list_distinct([1::float, null, 1::float]);
select list_distinct([1::double, null, 1::double]);
select list_distinct([null::smallint]);
select list_distinct([null::integer]);
select list_distinct([null::bigint]);
select list_distinct([null::hugeint]);
select list_distinct([null::float]);
select list_distinct([null::double]);
select list_distinct(['2021-08-20'::date]);
select list_distinct(['14:59:37'::time]);
select list_distinct(['2021-08-20'::timestamp]);
select list_distinct(['2021-08-20'::timestamp_s]);
select list_distinct(['2021-08-20 00:00:00.123'::timestamp_ms]);
select list_distinct(['2021-08-20 00:00:00.123456'::timestamp_ns]);
select list_distinct([interval 1 year]);
select list_distinct(['{a: 1}'::json, '{a: 1}'::json]);
select list_distinct([null::json]);
select list_sort(list_distinct(e)) from enums;
select list_sort(list_distinct(['a', 'b、c', 'a']));
select list_position(i, j) from test2;
select i, list_position(i,1) from test;
select i, list_position(i,4.0) from test;
select i, list_position(i,'a') from str_test;
select i, list_position(i,'aaaaaaaaaaaaaaaaaaaaaaaa') from str_test;
select i, list_position(i,0) from str_test;
select i, list_position(i,null) from str_test;
select list_position([7,2,5], 7);
select list_position([], 7);
select list_position([1,2,3],1.0);
select list_position([1.0,2.0,3.0,4.0],1);
select list_position([1,2,3],4.0);
select list_position([1.0,2.0,3.0],4);
select list_position([1.0,2.0,3.0], 'a');
select list_position(null,null);
select list_position([7], 5);
select list_position([1,2,3,4],4);
select list_position([1,2,3,4],5);
select list_position([1.0,2.0,3.0,4.0],5.0);
select list_position([1.0,2.0,3.0,4.0],4.0);
select list_position([true, false],true);
select list_position([true, true],false);
select list_position(['test', 'notest'],'notest');
select list_position(['test', 'notest'],'a');
select list_position(null,1);
select list_position([1],null);
select list_position([null],null);
select list_position([null, 1],null);
select list_position([null, 1],1);
select list_position([null, 0],1);
select list_position([],null);
select list_position([null,7], 7);
select list_position(i,1) from test0;
select list_position([[1,2,3],[1]],[1]);
select list_position([[1,2,3],[1]],[2]);
select list_position([[1,2,3],[1]],[1,2,3]);
select list_position([[1,3],[1]],[1,2,3]);
select list_position([[1,3],[1], [1,2,3]],[1,2,3]);
select list_position([[null],[1], [1,2,3]],null);
select list_position([[null],[1], [1,2,3]],[null]);
select list_position([[1,null],[1], [1,2,3]],[1,null]);
select list_position([[1,null],[1], [1,2,3]],[0,null]);
select list_position([{a: 1}, {a: 2}], {a: 2});
select list_position([{a: 1}, {a: 2}], {a: 3});
select list_position([{a: 1, b: 3}, {a: 2, b: 2}], {a: 2, b: 2});
select list_position([{a: 1, b: 3}, {a: 2, b: 2}], {a: 1, b: 2});
select list_position([map([1], [2])], map([1], [2]));
select list_position([map([1], [2])], map([1], [3]));
select list_position(i,1.0) from test0;
select kurtosis([null]);
select kurtosis([]);
select list_sort([1, 2]);
select list_sort(list_sort([1, 2]));
select list_reverse_sort([1, 2]);
select list_reverse_sort(list_reverse_sort([1, 2]));
select list_sort([1, 3, null, 5, null, -5]);
select list_reverse_sort([1, 3, null, 5, null, -5]);
select list_sort(i) from integers;
select list_reverse_sort(i) from integers;
select array_sort([1, 2]);
select array_reverse_sort([1, 2]);
select list_sort([1, 3, null, 2], 'asc');
select list_sort([1, 3, null, 2], 'desc');
select list_sort([1, 3, null, 2], 'desc', 'nulls last');
select list_sort([1, 3, null, 2], 'desc', 'nulls first');
select list_sort([1, 3, null, 2], 'asc', 'nulls first');
select list_sort([1, 3, null, 2], 'asc', 'nulls last');
select list_reverse_sort([1, 3, null, 2], 'nulls last');
select list_reverse_sort([1, 3, null, 2], 'nulls first');
select list_sort([true, false, null, true, true, null]);
select list_sort([null::boolean]);
select list_sort(['aa', 'a', 'cd', null, '42']);
select list_sort([null::varchar]);
select list_sort([1::smallint, null, 2::smallint]);
select list_sort([1::integer, null, 2::integer]);
select list_sort([1::bigint, null, 2::bigint]);
select list_sort([1::hugeint, null, 2::hugeint]);
select list_sort([1::float, null, 2::float]);
select list_sort([1::double, null, 2::double]);
select list_sort([null::smallint]);
select list_sort([null::integer]);
select list_sort([null::bigint]);
select list_sort([null::hugeint]);
select list_sort([null::float]);
select list_sort([null::double]);
select list_sort(['2021-08-20'::date]);
select list_sort(['14:59:37'::time]);
select list_sort(['2021-08-20'::timestamp]);
select list_sort(['2021-08-20'::timestamp_s]);
select list_sort(['2021-08-20 00:00:00.123'::timestamp_ms]);
select list_sort(['2021-08-20 00:00:00.123456'::timestamp_ns]);
select list_sort([interval 1 year]);
select list_sort(['{a: 1}'::json, '{a: 3}'::json]);
select list_sort([null::json]);
select list_sort(['{a: 1}'::blob, '{a: 3}'::blob]);
select list_sort([null::blob]);
select list_sort(e) from enums;
select list_sort([[1], [1, 2], null, [null], [], [1, 2, 3]]);
select list_sort([{'a': 1}, {'a': 5}, {'a': 3}]);
with cte0 as ( select g, list_reverse_sort(l) l from lists ), cte1 as ( select g, unnest(l) i from cte0 ), cte2 as ( select g, i, lead(g, 1) over () lg, lead(i, 1) over () li from cte1 ) select count(*) from cte2 where g = lg and lg is not null and li > i;
select list_unique(null);
select list_unique([null]);
select list_unique([]);
select list_unique([1, 1, 2, 2, 2, 3]);
select list_unique([1, 1, null, 2, 2, 2, 3, null, null]);
select list_unique([1, 1, -5, 10, 10, 2]);
select list_unique(l) from integers;
select array_unique([1, 2, 2, null]);
select list_unique([true, true, false, null]);
select list_unique([null::boolean]);
select list_unique(['aa', 'aa', 'cd', null, '42']);
select list_unique([null::varchar]);
select list_unique([1::smallint, null, 1::smallint]);
select list_unique([1::integer, null, 1::integer]);
select list_unique([1::bigint, null, 1::bigint]);
select list_unique([1::hugeint, null, 1::hugeint]);
select list_unique([1::float, null, 1::float]);
select list_unique([1::double, null, 1::double]);
select list_unique([null::smallint]);
select list_unique([null::integer]);
select list_unique([null::bigint]);
select list_unique([null::hugeint]);
select list_unique([null::float]);
select list_unique([null::double]);
select list_unique(['2021-08-20'::date]);
select list_unique(['14:59:37'::time]);
select list_unique(['2021-08-20'::timestamp]);
select list_unique(['2021-08-20'::timestamp_s]);
select list_unique(['2021-08-20 00:00:00.123'::timestamp_ms]);
select list_unique(['2021-08-20 00:00:00.123456'::timestamp_ns]);
select list_unique([interval 1 year]);
select list_unique(['{a: 1}'::json, '{a: 1}'::json]);
select list_unique([null::json]);
select list_unique(e) from enums;
select list_unique(['a', 'b、c', 'a']);
select struct_insert ({a: 1, b: 2}, c := 3);
with data as ( select 1 as a, 2 as b, 3 as c ) select struct_insert (data, d := 4) from data;
select struct_insert({'a': 1, 'b': 'abc', 'c': true}, d := {'a': 'new stuff'});
select add(a,a) from test;
select subtract(a,a) from test;
select multiply(a,a) from test;
select divide(a,a) from test;
select bit_count(t), bit_count(s),bit_count(i), bit_count(b) from bits;
select i, even(i + 0.4) from generate_series(-4,4) tbl(i);
select i, even(i + 0.9) from generate_series(-4,4) tbl(i);
select even(19.4), even(-19.4);
select even(8.9), even(-8.9);
select even(45::double), even(-35::double);
select even(null);
select even(1.7976931348623155e+308);
select even(-1.7976931348623155e+308);
select factorial(0);
select factorial(-1);
select factorial(null);
select factorial(2);
select factorial(10);
select factorial(20);
select factorial(30);
select fmod(x, y) from rs;
select fdiv(x, y) from rs;
select fmod(42, 0);
select fmod(0, 0);
select fdiv(42, 0);
select fdiv(-42, 0);
select fdiv(0, 0);
select fmod(12.3456789, 5);
select fdiv(12.3456789, 5);
select fmod(3, 2.1);
select fdiv(3, 2.1);
select cast(ceil(n::tinyint) as bigint) from numbers order by n;
select cast(ceil(n::smallint) as bigint) from numbers order by n;
select cast(ceil(n::integer) as bigint) from numbers order by n;
select cast(ceil(n::bigint) as bigint) from numbers order by n;
select cast(ceil(n::float) as bigint) from numbers order by n;
select cast(ceil(n::double) as bigint) from numbers order by n;
select cast(ceiling(n::double) as bigint) from numbers order by n;
select cast(floor(n::tinyint) as bigint) from numbers order by n;
select cast(floor(n::smallint) as bigint) from numbers order by n;
select cast(floor(n::integer) as bigint) from numbers order by n;
select cast(floor(n::bigint) as bigint) from numbers order by n;
select cast(floor(n::float) as bigint) from numbers order by n;
select cast(floor(n::double) as bigint) from numbers order by n;
select gamma(null);
select gamma(-1);
select gamma(1);
select gamma(-0.1);
select gamma(2);
select gamma(10);
select gamma(2::tinyint);
select gamma(2::hugeint);
select lgamma(null);
select lgamma(-1);
select lgamma(-100);
select lgamma(1);
select lgamma(2);
select lgamma(3);
select lgamma(10);
select lgamma(2::tinyint);
select lgamma(2::hugeint);
select sqrt(0);
select pow(1e300,100), pow(-1e300,100), pow(-1.0, 0.5);
select exp(1e300), exp(1e100);
select acos(3), acos(100), degrees(1e308);
select isnan(3::smallint), isnan('nan'::smallint), isnan(null::smallint);
select isnan(3::integer), isnan('nan'::integer), isnan(null::integer);
select isnan(3::bigint), isnan('nan'::bigint), isnan(null::bigint);
select isnan(3::hugeint), isnan('nan'::hugeint), isnan(null::hugeint);
select isnan(3::float), isnan('nan'::float), isnan(null::float);
select isnan(3::double), isnan('nan'::double), isnan(null::double);
select f, isnan(f), isinf(f), isfinite(f) from floats order by f;
select mod(a, 40) from modme;
select mod(42, 0);
select mod(a, 2) from modme;
select mod(b, 2.1) from modme;
select nextafter(null,1);
select nextafter(1,null);
select nextafter(99, 1);
select nextafter(99.0::double, 1.0::double) < 99;
select nextafter(99.0::double, 99.0::double) = 99;
select nextafter(99.0::double, 100.0::double) > 99;
select nextafter(nextafter(99.0::double, 100.0::double),0::double) = 99;
select nextafter(99.0::float, 1.0::float) < 99;
select nextafter(99.0::float, 100.0::float) > 99;
select nextafter(nextafter(99.0::float, 100.0::float),0::float) = 99;
select nextafter(a, 0::float) from test;
select nextafter(a, b) from test_twoc;
select abs(-17.4);
select cbrt(27.0);
select ceil(-42.8);
select ceiling(-95.3);
select exp(1.0);
select floor(-42.8);
select ln(2.0);
select log(100.0);
select log10(100.0);
select log2(4.0);
select pi();
select sqrt(2.0);
select radians(45.0);
select degrees(0.5);
select sign(4.1);
select sign(-4.1);
select sign(0);
select sign(3);
select pow(a, 0) from powerme;
select pow(b, -2) from powerme;
select pow(a, b) from powerme;
select pow(b, a) from powerme;
select power(b, a) from powerme;
select count(*) from (select a from t1 join t2 on (a=b) join t3 on (b=c)) s1;
select setseed(a), a from seeds;
select case when min(random()) >= 0 then 1 else 0 end from numbers;
select case when max(random()) < 1 then 1 else 0 end from numbers;
select round(42.12345::double, 0);
select round(42.12345::double);
select round(42.12345::double, 2);
select round(42.12345::double, 4), round(42.1235::double, 1000);
select round(42::double, 0);
select round(42::double, -1), round(42::double, -2), round(42::double, -1000);
select round(a, 1) from roundme;
select round(b, 1) from roundme;
select round(a, b) from roundme;
select roundbankers(45, -1);
select i, round_even(i + 0.5, 0) from generate_series(-2,4) tbl(i);
select i, round_even(i + 0.55, 0) from generate_series(-2,4) tbl(i);
select i, roundbankers(i + 0.55, 0) from generate_series(-2,4) tbl(i);
select roundbankers(45, -1), roundbankers(35, -1);
select roundbankers(45.5, 0), roundbankers(44.5, 0);
select roundbankers(45.55, 1), roundbankers(45.45, 1);
select roundbankers(-45, -1), roundbankers(-35, -1);
select roundbankers(-45.5, 0), roundbankers(-44.5, 0);
select roundbankers(-45.55, 1), roundbankers(-45.45, 1);
select roundbankers(45::double, -1), roundbankers(35::double, -1);
select roundbankers(45.5::double, 0), roundbankers(44.5::double, 0);
select roundbankers(45.55::double, 1), roundbankers(45.45::double, 1);
select roundbankers(null, 1), roundbankers(45, null), roundbankers(null, null);
select cast(sin(n::tinyint)*1000 as bigint) from numbers order by n;
select cast(sin(n::smallint)*1000 as bigint) from numbers order by n;
select cast(sin(n::integer)*1000 as bigint) from numbers order by n;
select cast(sin(n::bigint)*1000 as bigint) from numbers order by n;
select cast(sin(n::float)*1000 as bigint) from numbers order by n;
select cast(sin(n::double)*1000 as bigint) from numbers order by n;
select cast(cos(n::tinyint)*1000 as bigint) from numbers order by n;
select cast(cos(n::smallint)*1000 as bigint) from numbers order by n;
select cast(cos(n::integer)*1000 as bigint) from numbers order by n;
select cast(cos(n::bigint)*1000 as bigint) from numbers order by n;
select cast(cos(n::float)*1000 as bigint) from numbers order by n;
select cast(cos(n::double)*1000 as bigint) from numbers order by n;
select cast(tan(n::tinyint)*1000 as bigint) from numbers order by n;
select cast(tan(n::smallint)*1000 as bigint) from numbers order by n;
select cast(tan(n::integer)*1000 as bigint) from numbers order by n;
select cast(tan(n::bigint)*1000 as bigint) from numbers order by n;
select cast(tan(n::float)*1000 as bigint) from numbers order by n;
select cast(tan(n::double)*1000 as bigint) from numbers order by n;
select cast(atan(n::tinyint)*1000 as bigint) from numbers order by n;
select cast(atan(n::smallint)*1000 as bigint) from numbers order by n;
select cast(atan(n::integer)*1000 as bigint) from numbers order by n;
select cast(atan(n::bigint)*1000 as bigint) from numbers order by n;
select cast(atan(n::float)*1000 as bigint) from numbers order by n;
select cast(atan(n::double)*1000 as bigint) from numbers order by n;
select cast(asin(n::tinyint)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(asin(n::smallint)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(asin(n::integer)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(asin(n::bigint)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(asin(n::float)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(asin(n::double)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(acos(n::tinyint)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(acos(n::smallint)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(acos(n::integer)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(acos(n::bigint)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(acos(n::float)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(acos(n::double)*1000 as bigint) from numbers where n between -1 and 1 order by n;
select cast(cot(n::tinyint)*1000 as bigint) from numbers where n > 0.1 or n < -0.1 order by n;
select cast(cot(n::smallint)*1000 as bigint) from numbers where n > 0.1 or n < -0.1 order by n;
select cast(cot(n::integer)*1000 as bigint) from numbers where n > 0.1 or n < -0.1 order by n;
select cast(cot(n::bigint)*1000 as bigint) from numbers where n > 0.1 or n < -0.1 order by n;
select cast(cot(n::float)*1000 as bigint) from numbers where n > 0.1 or n < -0.1 order by n;
select cast(cot(n::double)*1000 as bigint) from numbers where n > 0.1 or n < -0.1 order by n;
select cast(atan2(n::tinyint, 42)*1000 as bigint) from numbers order by n;
select cast(atan2(n::smallint, 42)*1000 as bigint) from numbers order by n;
select cast(atan2(n::integer, 42)*1000 as bigint) from numbers order by n;
select cast(atan2(n::bigint, 42)*1000 as bigint) from numbers order by n;
select cast(atan2(n::float, 42)*1000 as bigint) from numbers order by n;
select cast(atan2(n::double, 42)*1000 as bigint) from numbers order by n;
select 1::tinyint + 1::tinyint;
select 1::tinyint + 1::smallint;
select 1::tinyint + 1::int;
select 1::tinyint + 1::bigint;
select 1::tinyint + 1::real;
select 1::tinyint + 1::double;
select 1::smallint + 1::tinyint;
select 1::smallint + 1::smallint;
select 1::smallint + 1::int;
select 1::smallint + 1::bigint;
select 1::smallint + 1::real;
select 1::smallint + 1::double;
select 1::integer + 1::tinyint;
select 1::integer + 1::smallint;
select 1::integer + 1::int;
select 1::integer + 1::bigint;
select 1::integer + 1::real;
select 1::integer + 1::double;
select 1::bigint + 1::tinyint;
select 1::bigint + 1::smallint;
select 1::bigint + 1::int;
select 1::bigint + 1::bigint;
select 1::bigint + 1::real;
select 1::bigint + 1::double;
select 1::real + 1::tinyint;
select 1::real + 1::smallint;
select 1::real + 1::int;
select 1::real + 1::bigint;
select 1::real + 1::real;
select 1::real + 1::double;
select 1::double + 1::tinyint;
select 1::double + 1::smallint;
select 1::double + 1::int;
select 1::double + 1::bigint;
select 1::double + 1::real;
select 1::double + 1::double;
select ++-++-+i from test;
select +i from test;
select -i from test;
select +++++++i from test;
select -+-+-+-+-i from test;
select i+2=5, 5=i+2 from integers order by i;
select 2+i=5, 5=2+i from integers order by i;
select i*2=6, 6=i*2 from integers order by i;
select 2*i=6, 6=2*i from integers order by i;
select i*2=5 from integers order by i;
select i*0=5 from integers order by i;
select -i>-2 from integers order by i;
select i-2=1, 1=i-2 from integers order by i;
select 3-i=1, 1=3-i from integers order by i;
select 3-i<2, 2>3-i from integers order by i;
select 3-i<=1, 1>=3-i from integers order by i;
select i/2=1, 1=i/2 from integers order by i;
select 2/i=1, 1=2/i from integers order by i;
select distinct - col2 as col2 from tab1 where not 18 between null and ( + col0 * + cast ( null as integer ) + - 3 / col2 ) or not col0 between col2 + + col1 and null order by 1 desc;
select min ( distinct + cast ( null as integer ) ) * count ( * ) * - + 16 * case + + avg ( all 97 ) when ( + nullif ( sum ( cast ( null as real ) ), 6 ) ) then 51 * 31 + - 6 when + 48 * - 34 then null when 91 * + ( sum ( cast ( null as integer ) ) ) then null end * - 4 + - 67;
select 1 << 2, null << 2, 2 << null;
select 16 >> 2, 1 >> 2, null >> 2, 2 >> null;
select 1 & 1, 1 & 0, 0 & 0, null & 1, 1 & null;
select 1 | 1, 1 | 0, 0 | 0, null | 1, 1 | null;
select xor(1, 1), xor(1, 0), xor(0, 0), xor(null, 1), xor(1, null);
select i << j, i >> j, i & j, i | j, xor(i, j) from bitwise_test;
select 1 <> 1, 1 != 1, 1 <> 0, 1 != 0, 1 <> null;
select '1000' > 20;
select '1000' > '20';
select ('abc' between '20' and 'true');
select * from a where (i > 3 and j < 5) or (i > 3 and j > 5);
select true and true;
select true and false;
select false and true;
select false and false;
select false and null;
select null and false;
select null and true;
select true and null;
select true or true;
select true or null;
select null or true;
select false or null;
select null or false;
select true or false;
select false or true;
select false or false;
select true and i>3 from a order by i;
select i>3 and true from a order by i;
select 2>3 and i>3 from a order by i;
select false and i>3 from a order by i;
select i>3 and false from a order by i;
select false or i>3 from a order by i;
select i>3 or false from a order by i;
select true or i>3 from a order by i;
select i>3 or true from a order by i;
select null or i>3 from a order by i;
select i>3 or null from a order by i;
select null and i>3 from a order by i;
select i>3 and null from a order by i;
select d, t, d + t from dates, times order by 1, 2;
select d, t, t + d from dates, times order by 1, 2;
select md5('hello'), md5(null);
select md5_number('hello'), md5_number_upper(null);
select md5_number_upper('hello'), md5_number_upper(null);
select md5_number_lower('hello'), md5_number_lower(null);
select md5(s), md5('1') from strings order by s;
select md5(s), md5('1') from strings where s::integer between 1 and 3 order by s;
select regexp_extract('foobarbaz', 'b..');
select regexp_extract('foobarbaz', 'b..', 1);
select regexp_extract('foobarbaz', '(b..)(b..)');
select regexp_extract('foobarbaz', '(b..)(b..)', 1);
select regexp_extract('foobarbaz', '(b..)(b..)', 2);
select regexp_extract(s, p, 0) from test;
select regexp_extract(s, 'b..', 0) from test;
select regexp_extract('foobarbaz', null, 0);
select regexp_extract('foobarbaz', 'b..', null);
select regexp_extract(null, 'b..');
select s from regex where regexp_matches(s, 'as(c|d|e)f');
select s from regex where not regexp_matches(s, 'as(c|d|e)f');
select s from regex where regexp_matches(s, 'as(c|d|e)f') and s = 'asdf';
select s from regex where regexp_matches(s, 'as(c|d|e)f') and regexp_matches(s, 'as[a-z]f');
select regexp_replace('foobarbaz', 'b..', 'x');
select regexp_replace('ana ana', 'ana', 'banana', 'g');
select regexp_replace('ana ana', 'ana', 'banana', 'gi');
select regexp_replace('ana', 'ana', 'banana', 'c');
select regexp_replace('ana', 'ana', 'banana', 'i');
select regexp_replace('as^/$df', '^/$', '', 'l');
select regexp_replace('as^/$df', '^/$', '');
select regexp_replace('hello world', '.*', 'x', 'sg');
select count(*) from (select 'x x') t1(a) join (select regexp_replace('hello world', '.*', 'x', 'ng')) t2(a) using (a);
select regexp_replace(v, 'h.*', 'world', 'i') from test order by v;
select regexp_replace(v, 'h.*', 'world', 'c') from test order by v;
select regexp_matches('asdf', '.*sd.*');
select regexp_matches('asdf', '.*yu.*');
select regexp_matches('asdf', '');
select regexp_matches('asdf', 'sd');
select regexp_full_match('asdf', 'sd');
select regexp_full_match('asdf', '.sd.');
select regexp_matches('asdf', '^sdf$');
select regexp_matches('', '.*yu.*');
select regexp_matches('', '.*');
select regexp_matches('asdf', cast(null as string));
select regexp_matches(cast(null as string), '.*sd.*');
select regexp_matches(cast(null as string), cast(null as string));
select regexp_matches('foobarbequebaz', '(bar)(beque)');
select regexp_matches(s, '.*') from regex;
select regexp_matches(s, p) from regex;
select regexp_matches('asdf', '.*sd.*', 'i');
select regexp_matches('asdf', '.*sd.*', 'c');
select regexp_matches('as^/$df', '^/$', 'l');
select regexp_matches('as^/$df', '^/$');
select regexp_matches('hello world', '.*', 's');
select regexp_full_match('hello world', '.*', 'n');
select regexp_matches('asdf', '.*sd.*', ' i ');
select regexp_matches('asdf', '.*sd.*', null);
select regexp_matches(v, 'h.*', 'i') from test order by v;
select regexp_matches(v, 'h.*', 'c') from test order by v;
select strip_accents('hello'), strip_accents('héllo');
select strip_accents('mühleisen'), strip_accents('hannes mühleisen');
select strip_accents(s)=strip_accents(str) from collate_test;
select array_extract('🦆ab', 4), array_extract('abc', 4);
select array_extract(s, 2) from strings;
select array_extract(s, 3) from strings;
select array_extract(s, off) from strings;
select array_extract('hello', off) from strings;
select array_extract(null::varchar, off) from strings;
select array_extract('hello', null) from strings;
select array_extract(null::varchar, null) from strings;
select array_extract(s, -1) from strings;
select array_extract(s, 1) from strings;
select array_extract(s, 6) from strings;
select array_extract(s, 2147483646) from strings;
select array_extract(s, -2147483647) from strings;
select ascii('x');
select ascii('a');
select ascii('abc');
select ascii('ω');
select ascii('ωω');
select ascii('ä');
select ascii(5);
select ascii(null);
select chr(97);
select chr(196);
select chr(937);
select chr(null);
select bit_length(null), bit_length(''), bit_length('$'), bit_length('¢'), bit_length('€'), bit_length('𐍈');
select bit_length(a) from strings;
select bit_length(b) from strings;
select bit_length(a) from strings where b is not null;
select upper('áaaá'), upper('ö'), lower('s̈'), upper('ω');
select upper('αα ββ γγ δδ εε ζζ ηη θθ ιι κκ λλ μμ νν ξξ οο ππ ρρ σσς ττ υυ φφ χχ ψψ ωω'), lower('αα ββ γγ δδ εε ζζ ηη θθ ιι κκ λλ μμ νν ξξ οο ππ ρρ σσς ττ υυ φφ χχ ψψ ωω');
select upper(''), upper('hello'), upper('motörhead'), upper(null);
select lower(''), lower('hello'), lower('motörhead'), lower(null);
select ucase(''), ucase('hello'), ucase('motörhead'), ucase(null);
select lcase(''), lcase('hello'), lcase('motörhead'), lcase(null);
select upper(a), ucase(a) from strings;
select lower(a), lcase(a) from strings;
select lower(b), lcase(b) from strings;
select upper(a), lower(a), ucase(a), lcase(a) from strings where b is not null;
select length('s̈a');
select length('🤦🏼‍♂️');
select length('🤦🏼‍♂️ l🤦🏼‍♂️r 🤦🏼‍♂️');
select strlen('🤦🏼‍♂️');
select strlen('s̈a');
select reverse('s̈a︍');
select reverse('z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍a̴̵̜̰͔ͫ͗͢');
select reverse('🤦🏼‍♂️');
select reverse('🤦🏼‍♂️ l🤦🏼‍♂️r 🤦🏼‍♂️');
select reverse('motörhead');
select substring('🤦🏼‍♂️🤦🏼‍♂️🤦🏼‍♂️', 1, 1);
select substring('s̈a︍', 2, 1);
select substring('test: 🤦🏼‍♂️hello🤦🏼‍♂️ world', 7, 7);
select substring('s̈a', 1, 1);
select substring('s̈a︍', -1, 1);
select s || ' ' || s from strings order by s;
select s || ' ' || '🦆' from strings order by s;
select s || ' ' || '🦆' || null from strings order by s;
select concat('hello');
select concat('hello', 33, 22);
select concat('hello', 33, null, 22, null);
select concat('hello', ' ', s) from strings order by s;
select concat(a, 'suffix') from strings;
select concat('prefix', b) from strings;
select concat(a, b) from strings;
select concat(a, b, 'suffix') from strings;
select concat(a, b, a) from strings;
select concat('1', '2', '3', '4', '5', '6', '7', '8', '9', '0');
select '1234567890' || '1234567890', '1234567890' || null;
select concat('1234567890', '1234567890'), concat('1234567890', null);
select concat_ws(',',a, 'suffix') from strings;
select concat_ws('@','prefix', b) from strings;
select concat_ws('$',a, b) from strings;
select concat_ws(a, b, 'suffix') from strings;
select concat_ws(a, b, b) from strings;
select concat_ws('@','1', '2', '3', '4', '5', '6', '7', '8', '9');
select concat_ws(b, '[', ']') from strings order by a;
select concat_ws(',', a, 'suffix') from strings where a != 'hello';
select concat_ws(',', 'hello');
select concat_ws(null, 'hello');
select concat_ws(',', null);
select concat_ws(null, b, 'suffix') from strings;
select concat_ws(',', null, 'suffix') from strings;
select concat_ws(',', '', '');
select concat_ws(',', '', '', '');
select concat_ws(',', null, null);
select concat_ws(',', null, null, null);
select concat_ws(',', null, null, 'hello');
select concat_ws(a, '', null, '') from strings order by a;
select concat_ws(a, null, '', '') from strings order by a;
select concat_ws(a, null, b, '') from strings order by a;
select contains('hello world', 'h'), contains('hello world', 'he'), contains('hello world', 'hel'), contains('hello world', 'hell'), contains('hello world', 'hello'), contains('hello world', 'hello '), contains('hello world', 'hello w'), contains('hello world', 'hello wo'), contains('hello world', 'hello wor'), contains('hello world', 'hello worl');
select contains('hello world', 'a'), contains('hello world', 'ha'), contains('hello world', 'hea'), contains('hello world', 'hela'), contains('hello world', 'hella'), contains('hello world', 'helloa'), contains('hello world', 'hello a'), contains('hello world', 'hello wa'), contains('hello world', 'hello woa'), contains('hello world', 'hello wora');
select contains('hello', ''), contains('', ''), contains(null, '');
select contains(s,'h') from strings;
select contains(s,'e') from strings;
select contains(s,'d') from strings;
select contains(s,'he') from strings;
select contains(s,'ello') from strings;
select contains(s,'lo') from strings;
select contains(s,'he-man') from strings;
select contains(s,'o') from strings;
select contains(null,'o') from strings;
select contains(s,null) from strings;
select contains(null,null) from strings;
select contains(s,'') from strings;
select contains(s,'á') from strings;
select contains(s,'olá mundo') from strings;
select contains(s,'你好世界') from strings;
select contains(s,'two ñ thr') from strings;
select contains(s,'ñ') from strings;
select contains(s,'₡ four 🦆 e') from strings;
select contains(s,'🦆 end') from strings;
select format('hello'), format(null);
select format('{}', 'hello'), format('{}: {}', 'hello', 'world');
select format('{}', null), format(null, 'hello', 'world');
select format('{} {}', true, false);
select format('{}', 33), format('{} + {} = {}', 3, 5, 3 + 5);
select format('{} {} = {}', date '1992-01-01', time '12:01:00', timestamp '1992-01-01 12:01:00');
select format('{}', blob '\x00hello');
select format('{}', 120381902481294715712::hugeint);
select format('{:.3f}', '1.234'::decimal);
select format('{:04d}', 33), format('{} {:02d}:{:02d}:{:02d} {}', 'time', 12, 3, 16, 'am'), format('{:10d}', 1992);
select format('{1} {1} {0} {0}', 1, 2);
select format('{}', 'hello', 'world');
select s from strings where s like 'ab%';
select instr(s,'h') from strings;
select position('h' in s) from strings;
select instr(s,'e') from strings;
select instr(s,'d') from strings;
select instr(s,'he') from strings;
select position('he' in s) from strings;
select instr(s,'ello') from strings;
select instr(s,'lo') from strings;
select instr(s,'he-man') from strings;
select instr(s,'o'),s from strings;
select instr(null,'o') from strings;
select instr(s,null) from strings;
select instr(null,null) from strings;
select instr(s,'á') from strings;
select position('á' in s) from strings;
select instr(s,'olá mundo') from strings;
select instr(s,'你好世界') from strings;
select instr(s,'two ñ thr') from strings;
select instr(s,'ñ') from strings;
select instr(s,'₡ four 🦆 e') from strings;
select instr(s,'🦆 end') from strings;
select count(*) from t where str like '%o%'; -- 6;
select count(*) from t where str like '%rld%'; -- 3;
select count(*) from t where str like '%o%' or (str like '%o%' and str like '%rld%');
select count(*) from t where (str like '%o%' and str like '%rld%') or str like '%o%';
select count(*) from t where (str like '%o%' and str like '%rld%') or (str like '%o%') or (str like '%o%');
select count(*) from t where (str like '%o%' and str like '%rld%') or (str like '%o%') or (str like '%o%' and str like 'blabla%');
select count(*) from t where (str like '%o%' and str like '%1%') or (str like '%o%' and str like '%1%' and str like 'blabla%') or (str like '%o%' and str like '%1%' and str like 'blabla2%');
select jaccard('hello', 'hello');
select jaccard('hello', null);
select jaccard(null, 'hello');
select jaccard(null, null);
select jaccard('ab', 'aabb');
select jaccard('aabb', 'ab');
select jaccard('ab', 'cd');
select jaccard('cd', 'ab');
select round(jaccard('ab', 'aabbcc'), 3);
select round(jaccard('aabbcc', 'ab'), 3);
select round(jaccard('aabbccddeeff', 'ab'), 3);
select round(jaccard('ab', 'aabbccddeeff'), 3);
select round(jaccard('aabbccddeeffg', 'ab'), 3);
select round(jaccard('ab', 'aaaabbbccddeeffgabcccc'), 3);
select round(jaccard('ababababababba', 'aaaabbbccddeeffgabcccc'), 3);
select round(jaccard(s, t), 1) from strings;
select round(jaccard(s, 'hallo'), 1) from strings;
select round(jaccard('hallo', t), 1) from strings;
select round(jaccard(null, t), 1) from strings;
select round(jaccard(s, null), 1) from strings;
select left('abcd', 0), left('abc', 1), left('abc', 2), left('abc', 3), left('abc', 4);
select left('🦆ab', 0), left('🦆ab', 1), left('🦆ab', 2), left('🦆ab', 3), left('🦆ab', 4);
select left('🦆🤦s̈', 0), left('🦆🤦s̈', 1), left('🦆🤦s̈', 2), left('🦆🤦s̈', 3);
select left('abcd', 0), left('abc', -1), left('abc', -2), left('abc', -3), left('abc', -4);
select left('🦆ab', 0), left('🦆ab', -1), left('🦆ab', -2), left('🦆ab', -3), left('🦆ab', -4);
select left('🦆🤦s̈', 0), left('🦆🤦s̈', -1), left('🦆🤦s̈', -2), left('🦆🤦s̈', -3);
select left(null, 0), left('abc', null), left(null, null);
select left(null, 0), left('🦆ab', null), left(null, null);
select left(a, b) from strings;
select length(s) from strings order by s;
select length(s || ' ' || '🦆') from strings order by s;
select levenshtein('hallo', 'hallo');
select levenshtein('hallo', 'hello');
select levenshtein('hello', 'hallo');
select levenshtein('lawn', 'flaw');
select levenshtein('flaw', 'lawn');
select levenshtein('kitten', 'sitting');
select levenshtein('sitting', 'kitten');
select levenshtein('hallo', 'hoi');
select levenshtein('hoi', 'hallo');
select levenshtein(null, 'hi');
select levenshtein('hi', null);
select levenshtein(null, null);
select levenshtein(s, 'hallo') from strings order by s;
select levenshtein('hallo', s) from strings order by s;
select levenshtein(null, s) from strings;
select levenshtein(s, null) from strings;
select levenshtein('hi', s) from strings;
select levenshtein(s, 'hi') from strings;
select mismatches('', s) from strings;
select mismatches(s, '') from strings;
select mismatches(null, s) from strings;
select mismatches(s, null) from strings;
select editdist3('hallo', 'hello');
select levenshtein(s, t) ld from strings where length(s) > 1 and length(t) > 0 and s is not null and t is not null;
select 'aaa' like 'bbb';
select 'aaa' like 'abab';
select 'aaa' like 'aaa';
select 'aaa' like '%';
select 'aaa' like '%a';
select 'aaa' like '%b';
select 'aaa' like 'a%';
select 'aaa' like 'b%';
select 'aaa' like 'a_a';
select 'aaa' like 'a_';
select 'aaa' like '__%';
select 'aaa' like '____%';
select 'ababac' like '%abac';
select 'ababac' like '%%%abac';
select 'ababac' like 'abab%%%%%';
select 'ababac' like '%%%a%%%b%%a%b%%%%%a%c%%';
select 'ababac' like '%%%a%%%b%%a%b%%%%%a%d%%';
select 'ababac' not like '%abac';
select 'aabbccc' like '%aa%bb%cc';
select 'zebra elephant tiger horse' like '';
select 'zebra elephant tiger horse' like '%';
select 'zebra elephant tiger horse' like 'zebra';
select 'zebra elephant tiger horse' like 'zebra elephant tiger horse';
select 'zebra elephant tiger horse' like 'zebra elephant tiger horse%';
select 'zebra elephant tiger horse' like '%zebra elephant tiger horse%';
select 'zebra elephant tiger horse' like '%zebra elephant tiger horse blabla';
select 'zebra elephant tiger horse' like 'zebra elephant tiger horse blabla%';
select 'zebra elephant tiger horse' like 'zebra%';
select 'zebra elephant tiger horse' like '%horse';
select 'zebra elephant tiger horse' like 'zebra%elephant%horse';
select 'zebra elephant tiger horse' like 'zebra%elephant%tiger%horse';
select 'zebra elephant tiger horse' like '%zebra%elephant%tiger%horse';
select 'zebra elephant tiger horse' like 'zebra%elephant%tiger%horse%';
select 'zebra elephant tiger horse' like '%zebra%elephant%tiger%horse%';
select 'zebra elephant tiger horse' like '%%zebra %%%ele%phan%t t%ig%er% horse%';
select 'zebra elephant tiger horse' like 'zebra%tiger%horse';
select 'zebra elephant tiger horse' like 'zebra%tiger%elephant%horse';
select 'zebra elephant tiger horse' not like '';
select 'zebra elephant tiger horse' not like '%';
select 'zebra elephant tiger horse' not like 'zebra';
select 'zebra elephant tiger horse' not like 'zebra elephant tiger horse';
select 'zebra elephant tiger horse' not like 'zebra%';
select 'zebra elephant tiger horse' not like '%horse';
select 'zebra elephant tiger horse' not like 'zebra%elephant%horse';
select 'zebra elephant tiger horse' not like 'zebra%elephant%tiger%horse';
select 'zebra elephant tiger horse' not like '%zebra%elephant%tiger%horse';
select 'zebra elephant tiger horse' not like 'zebra%elephant%tiger%horse%';
select 'zebra elephant tiger horse' not like '%zebra%elephant%tiger%horse%';
select 'zebra elephant tiger horse' not like '%%zebra %%%ele%phan%t t%ig%er% horse%';
select 'zebra elephant tiger horse' not like 'zebra%tiger%horse';
select 'zebra elephant tiger horse' not like 'zebra%tiger%elephant%horse';
select s from strings where 'aba' like pat;
select s from strings where s like pat;
select s from strings;
select pat from strings;
select mismatches('hallo', 'hallo');
select mismatches('hello', 'hallo');
select mismatches('hallo', 'hello');
select mismatches('aloha', 'hallo');
select mismatches('hallo', 'aloha');
select mismatches(null, 'hallo');
select mismatches('hello', null);
select mismatches(null, null);
select mismatches(s, 'hallo') from strings order by s;
select mismatches('hallo', s) from strings order by s;
select mismatches(null, s) from strings order by s;
select mismatches(s, null) from strings order by s;
select hamming('hallo', 'hallo');
select hamming('hello', 'hallo');
select hamming(s, 'hallo') from strings where s = 'hello';
select lpad(null, 7, '-'), lpad('base', null, '-'), lpad('base', 7, null), lpad(null, null, '-'), lpad(null, 7, null), lpad('base', null, null), lpad(null, null, null);
select rpad(null, 7, '-'), rpad('base', null, '-'), rpad('base', 7, null), rpad(null, null, '-'), rpad(null, 7, null), rpad('base', null, null), rpad(null, null, null);
select lpad('base', 7, '-'), lpad('base', 4, '-'), lpad('base', 2, ''), lpad('base', -1, '-');
select rpad('base', 7, '-'), rpad('base', 4, '-'), rpad('base', 2, ''), rpad('base', -1, '-');
select lpad('base', 7, '-|'), lpad('base', 6, '-|'), lpad('base', 5, '-|'), lpad('base', 4, '-|');
select rpad('base', 7, '-|'), rpad('base', 6, '-|'), rpad('base', 5, '-|'), rpad('base', 4, '-|');
select lpad('motörhead', 16, 'räcks'), lpad('motörhead', 12, 'räcks'), lpad('motörhead', 10, 'räcks');
select rpad('motörhead', 16, 'räcks'), rpad('motörhead', 12, 'räcks'), rpad('motörhead', 10, 'räcks');
select lpad(a, 16, b), rpad(a, 16, b) from strings;
select lpad(a, 12, b), rpad(a, 12, b), ucase(a), lcase(a) from strings where b is not null;
select prefix('abcd', 'a');
select prefix('abcd', 'ab');
select prefix('abcd', 'abc');
select prefix('abcd', 'abcd');
select prefix('abcd', 'b');
select prefix('abcdefgh', 'a');
select prefix('abcdefgh', 'ab');
select prefix('abcdefgh', 'abc');
select prefix('abcdefgh', 'abcd');
select prefix('abcdefgh', 'abcde');
select prefix('abcdefgh', 'b');
select prefix('abcdefghijklmnopqrstuvwxyz', 'a');
select prefix('abcdefghijklmnopqrstuvwxyz', 'ab');
select prefix('abcdefghijklmnopqrstuvwxyz', 'abc');
select prefix('abcdefghijklmnopqrstuvwxyz', 'abcd');
select prefix('abcdefghijklmnopqrstuvwxyz', 'abcde');
select prefix('abcdefghijklmnopqrstuvwxyz', 'b');
select prefix('abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwx');
select prefix('abcdefghijklmnopqrstuvwxyz', 'abcfefghijklmnopqrstuvwx');
select prefix('', 'aaa');
select prefix('aaa', '');
select * from t0 where prefix(t0.c0, '');
select prefix('átomo', 'á');
select prefix('átomo', 'a');
select prefix('olá mundo', 'olá');
select prefix('olá mundo', 'ola');
select prefix('ñeft', 'ñ');
select prefix('ñeft', 'ñeft');
select prefix('ñeft', 'neft');
select prefix('two ñ three ₡ four 🦆 end', 'two ñ');
select prefix('two ñ three ₡ four 🦆 end', 'two n');
select prefix('two ñ three ₡ four 🦆 end', 'two ñ three');
select prefix('two ñ three ₡ four 🦆 end', 'two ñ three ₡');
select prefix('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆');
select prefix('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');
select count(*) from t0 where prefix(t0.c0, '');
select c0, prefix(t0.c0, '') from t0 where c0 <> 'b' order by t0.c0;
select c0, prefix(t0.c0, '') from t0 where c0 is null or c0 <> 'b' order by t0.c0;
select printf('hello'), printf(null);
select printf('%s', 'hello'), printf('%s: %s', 'hello', 'world');
select printf('%s', null), printf(null, 'hello', 'world');
select printf('%d', true);
select printf('%d', 33), printf('%d + %d = %d', 3, 5, 3 + 5);
select printf('%04d', 33), printf('%s %02d:%02d:%02d %s', 'time', 12, 3, 16, 'am'), printf('%10d', 1992);
select printf('%hhd %hd %d %lld', 33::tinyint, 12::smallint, 40::integer, 80::bigint);
select printf('%d %lld %hhd %hd', 33::tinyint, 12::smallint, 40::integer, 80::bigint);
select printf('%s %s = %s', date '1992-01-01', time '12:01:00', timestamp '1992-01-01 12:01:00');
select printf('%s', blob '\x01\xa0');
select printf('%s', 120381902481294715712::hugeint);
select printf('%.3f', '1.234'::decimal);
select printf('%d %x %o %#x %#o', 100, 100, 100, 100, 100);
select printf('%c', 65);
select printf('%*d', 5, 10);
select printf('%.2f', 10.0::float), printf('%.4f', 0.5);
select printf('floats: %4.2f %+.0e %e', 3.1416, 3.1416, 3.1416);
select printf('%s', 'hello', 'world');
select printf(case when pint < 15 then null else pint end) from strings order by idx;
select printf(fmt, pint, pstring) from strings order by idx;
select printf(fmt, 10, pstring) from strings order by idx;
select printf('%s: %s', pstring, pstring) from strings order by idx;
select printf('%s: %s', pstring, pstring) from strings where idx <> 2 order by idx;
select repeat(null, null), repeat(null, 3), repeat('mysql', null);
select repeat('', 3), repeat('mysql', 3), repeat('motörhead', 2), repeat('hello', -1);
select repeat(a, 3) from strings;
select repeat(b, 2) from strings;
select repeat(a, 4) from strings where b is not null;
select replace('this is the main test string', null, 'alt');
select replace(null, 'main', 'alt');
select replace('this is the main test string', 'main', null);
select replace('this is the main test string', 'main', 'alt');
select replace('this is the main test string', 'main', 'larger-main');
select replace('aaaaaaa', 'a', '0123456789');
select replace(a, 'l', '-') from strings;
select replace(b, 'ä', '--') from strings;
select replace(a, 'h', '') from strings where b is not null;
select reverse(''), reverse('hello'), reverse('motörhead'), reverse(null);
select reverse(a) from strings;
select reverse(b) from strings;
select reverse(a) from strings where b is not null;
select right('abcd', 0), right('abc', 1), right('abc', 2), right('abc', 3), right('abc', 4);
select right('🦆ab', 0), right('🦆ab', 1), right('🦆ab', 2), right('🦆ab', 3), right('🦆ab', 4);
select right('🦆🤦s̈', 0), right('🦆🤦s̈', 1), right('🦆🤦s̈', 2), right('🦆🤦s̈', 3);
select right('abcd', 0), right('abc', -1), right('abc', -2), right('abc', -3), right('abc', -4);
select right('🦆ab', 0), right('🦆ab', -1), right('🦆ab', -2), right('🦆ab', -3), right('🦆ab', -4);
select right('🦆🤦s̈', 0), right('🦆🤦s̈', -1), right('🦆🤦s̈', -2), right('🦆🤦s̈', -3);
select right(null, 0), right('abc', null), right(null, null);
select right(null, 0), right('🦆ab', null), right(null, null);
select right(a, b) from strings;
select 'hello'[0:2];
select ('hello')[0:2];
select array_slice('🦆ab', 0, 0), array_slice('abc', 0, 0);
select array_slice(s, 0, 2) from strings;
select list_slice(s, 0, 2) from strings;
select array_slice(s, 1, 3) from strings;
select array_slice(s, 2, 3) from strings;
select array_slice(s, off, length+off) from strings;
select array_slice(s, off, 2+off) from strings;
select array_slice(s, 0, length) from strings;
select array_slice('hello', off, length+off) from strings;
select array_slice(null::varchar, off, length+off) from strings;
select array_slice('hello', null, length+null) from strings;
select array_slice('hello', off+1, null+off) from strings;
select array_slice(null::varchar, null, length+null) from strings;
select array_slice('hello', null, null+null) from strings;
select array_slice(null::varchar, off, null+off) from strings;
select array_slice(null::varchar, null, null+null) from strings;
select array_slice(s, -2, null) from strings;
select array_slice(s, 0, 1) from strings;
select array_slice(s, -4, -2) from strings;
select array_slice(s, 1, 0) from strings;
select array_slice(s, 2, null) from strings;
select array_slice(s, (2147483647-1), 1) from strings;
select array_slice(s, (2147483647-1), -1) from strings;
select array_slice(s, (-2147483646-1), -1) from strings;
select array_slice(s, (-2147483646-1), -2147483647) from strings;
select '🦆ab'[0:0], 'abc'[0:0];
select '🤦🏼‍♂️ l🤦🏼‍♂️r 🤦🏼‍♂️'[2:5];
select 's̈a'[1:2];
select 's̈a'[2:2];
select 'motörhead'[:5];
select 'z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍a̴̵̜̰͔ͫ͗͢'[2:];
select s[0:2] from strings;
select s[1:3] from strings;
select s[2:3] from strings;
select s[off:length+off] from strings;
select s[off:2+off] from strings;
select s[0:length] from strings;
select 'hello'[off:length+off] from strings;
select n[off:length+off] from strings, nulltable;
select 'hello'[null:length+null] from strings;
select 'hello'[off:null+off] from strings;
select 'hello'[off+1:null+off] from strings;
select n[null:length+null] from strings, nulltable;
select 'hello'[null:null+null] from strings;
select n[off:null+off] from strings, nulltable;
select n[null:null+null] from strings, nulltable;
select s[-2:] from strings;
select s[0:1] from strings;
select s[-4:-2] from strings;
select s[1:0] from strings;
select s[2:] from strings;
select s[(2147483647-1):1] from strings;
select s[(2147483647-1):-1] from strings;
select s[(-2147483646-1):-1] from strings;
select s[(-2147483646-1):-2147483647] from strings;
select string_split(null, null);
select * from (values (string_split('hello world', ' ')), (string_split(null, ' ')), (string_split('a b c', null)), (string_split('a b c', ' '))) tbl(i);
select unnest(string_split(s, 'b')) from strings_with_null;
select unnest(string_split(null, ' ')) is null limit 5;
select unnest(string_split('üüüüü', '◌̈'));
select unnest(string_split('üüüüü', '◌'));
select unnest(string_split_regex('üüüüü', '◌̈'));
select unnest(string_split_regex('üüüüü', '◌'));
select unnest(string_split(' 🦆🦆 🦆🦆', ' '));
select unnest(string_split('a a a a a', ' '));
select unnest(string_split('🦆 🦆 🦆 🦆 🦆', ' '));
select unnest(string_split('🦆🐈🐈🦆🐈🐈🦆🐈🐈🦆🐈🐈🦆', '🐈🐈'));
select unnest(string_split('', 'delim'));
select unnest(string_split('aaaaa', ''));
select unnest(string_split('🦆🦆🦆🦆🦆', ''));
select unnest(string_split('abab', 'b'));
select unnest(string_split('🦆b🦆b', 'b'));
select unnest(string_split(s, 'bb')) from documents where 1;
select unnest(string_split(s, 'bb')) from documents where s like 'b%';
select string_agg(ss, 'bb') from (select rowid as id, unnest(string_split(s, 'bb')) as ss from documents) as q group by id order by id;
select unnest(string_split_regex('a1a11a111a', '[0-9]+'));
select unnest(string_split_regex('aaaaa', ''));
select unnest(string_split_regex('a a a a', '\s+'));
select unnest(string_split('aaaaa', null));
select unnest(string_split('1|2|3', '|'));
select unnest(string_split('1|2|3|', '|'));
select unnest(string_split('1||2|3||', '||'));
select unnest(string_split('1|2|3', ''));
select unnest(string_split('', '|'));
select unnest(string_split('1|2|3', null));
select string_split(null, '|') is null;
select unnest(string_split('abc', ''));
select unnest(string_split_regex('abc', '(|abc)'));
select unnest(string_split_regex('abc', '(abc|)'));
select unnest(string_split('abc', ','));
select unnest(string_split_regex('abc', '(,|abc)'));
select unnest(string_split_regex('abc', '(abc|,)'));
select unnest(string_split('1,2,3,4,,6', ','));
select unnest(string_split_regex('1,2,3,4,,6', '(,|)'));
select unnest(string_split_regex('1,2,3,4,,6', '(|,)'));
select unnest(string_split_regex('1,2,3,4,*,6', '(,|\*)'));
select unnest(string_split_regex('1,2,3,4,*,6', '(\*|,)'));
select '🦆ab'[1], 'abc'[2];
select '🤦🏼‍♂️ l🤦🏼‍♂️r 🤦🏼‍♂️'[4];
select 's̈a'[1];
select 'motörhead'[4];
select 'z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍a̴̵̜̰͔ͫ͗͢'[2];
select s[2] from strings;
select s[3] from strings;
select s[off] from strings;
select 'hello'[off] from strings;
select 'hello'[null] from strings;
select s[-1] from strings;
select s[1] from strings;
select s[6] from strings;
select s[2147483646] from strings;
select s[-2147483647] from strings;
select substring('🦆ab', 1, 0), substring('abc', 1, 0);
select substring(s, 2, -2) from strings;
select substring(s, -2, -2) from strings;
select substring(s, 2, 0) from strings;
select substring(s, 2) from strings;
select substring(substring(s, 2), 2) from strings;
select substring(s, 2147483647, 2147483647) from strings;
select substring(s, 2147483647, -2147483647) from strings;
select substring(s, -2147483647, 2147483647) from strings;
select substring(s, -2147483647, -2147483647) from strings;
select substr('abc', instr('abc', 'b'));
select substr(s, -4, 4) from strings;
select substr(s, -1, -4) from strings;
select substr(s, 0, -4) from strings;
select substr(s, 0, 5) from strings;
select substr(s, 5, -5) from strings;
select substr(s, 5) from strings;
select suffix('abcd', 'd');
select suffix('abcd', 'cd');
select suffix('abcd', 'bcd');
select suffix('abcd', 'abcd');
select suffix('abcd', 'x');
select suffix('abcdefgh', 'h');
select suffix('abcdefgh', 'gh');
select suffix('abcdefgh', 'fgh');
select suffix('abcdefgh', 'efgh');
select suffix('abcdefgh', 'defgh');
select suffix('abcdefgh', 'x');
select suffix('abcdefgh', 'abcdefgh');
select suffix('abcdefghijklmnopqrstuvwxyz', 'z');
select suffix('abcdefghijklmnopqrstuvwxyz', 'yz');
select suffix('abcdefghijklmnopqrstuvwxyz', 'xyz');
select suffix('abcdefghijklmnopqrstuvwxyz', 'wxyz');
select suffix('abcdefghijklmnopqrstuvwxyz', 'vwxyz');
select suffix('abcdefghijklmnopqrstuvwxyz', 'x');
select suffix('abcdefghijklmnopqrstuvwxyz', 'defghijklmnopqrstuvwxyz');
select suffix('', 'aaa');
select suffix('aaa', '');
select suffix(null, 'aaa');
select suffix('aaa', null);
select suffix(null, null);
select suffix('omotá', 'á');
select suffix('omotá', 'a');
select suffix('mundo olá', 'olá');
select suffix('mundo olá', 'mundo olá');
select suffix('mundo olá', 'ola');
select suffix('eftñ', 'ñ');
select suffix('ñeft', 'ñeft');
select suffix('ñeft', 'neft');
select suffix('two ñ three ₡ four 🦆 end', '🦆 end');
select suffix('two ñ three ₡ four 🦆 end', 'three ₡ four 🦆 end');
select suffix('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');
select suffix('two ñ three ₡ four 🦆 end', 'two n three ₡ four 🦆 end');
select suffix('two ñ three ₡ four 🦆 end', 'xxxtwo ñ three ₡ four 🦆 end');
select ltrim(''), ltrim('neither'), ltrim(' leading'), ltrim('trailing '), ltrim(' both '), ltrim(null), ltrim(' ');
select rtrim(''), rtrim('neither'), rtrim(' leading'), rtrim('trailing '), rtrim(' both '), rtrim(null), rtrim(' ');
select trim(''), trim('neither'), trim(' leading'), trim('trailing '), trim(' both '), trim(null), trim(' ');
select ltrim(a) from strings;
select ltrim(b) from strings;
select ltrim(a) from strings where b is not null;
select rtrim(a) from strings;
select rtrim(b) from strings;
select rtrim(a) from strings where b is not null;
select ltrim('', 'ho'), ltrim('hello', 'ho'), ltrim('papapapa', 'pa'), ltrim('blahblabla', 'bla'), ltrim('blabla', null), ltrim(null, 'blabla'), ltrim('blabla', '');
select rtrim('', 'ho'), rtrim('hello', 'ho'), rtrim('papapapa', 'pa'), rtrim('blahblabla', 'bla'), rtrim('blabla', null), rtrim(null, 'blabla'), rtrim('blabla', '');
select trim('', 'ho'), trim('hello', 'ho'), trim('papapapa', 'pa'), trim('blahblabla', 'bla'), trim('blabla', null), trim(null, 'blabla'), trim('blabla', '');
select ltrim(a, b), rtrim(a, b), trim(a, b) from trim_test;
select unicode(null), unicode(''), unicode('$'), unicode('¢'), unicode('€'), unicode('𐍈');
select unicode(a) from strings;
select unicode(b) from strings;
select unicode(a) from strings where b is not null;
select extract(seconds from time '14:21:13');
select date_part(null::varchar, null::time) from times;
select date_part(s, null::time) from times;
select date_part(null, d) from times;
select date_part(s, time '14:28:50.447') from times;
select date_part('hour', d) from times;
select date_part(s, d) from times;
select date_part('year', time '10:00:00');
select date_part('quarter', time '10:00:00');
select date_part('month', time '10:00:00');
select date_part('day', time '10:00:00');
select date_part('week', time '10:00:00');
select * from ( select d, date_part('hour', d) as p, hour(d) as f from times ) tbl where p <> f;
select * from ( select d, date_part('minute', d) as p, minute(d) as f from times ) tbl where p <> f;
select * from ( select d, date_part('second', d) as p, second(d) as f from times ) tbl where p <> f;
select * from ( select d, date_part('millisecond', d) as p, millisecond(d) as f from times ) tbl where p <> f;
select * from ( select d, date_part('microsecond', d) as p, microsecond(d) as f from times ) tbl where p <> f;
select d, date_part('hour', d) as p, date_part(['hour'], d) as st from times where p <> st['hour'];
select d, date_part('minute', d) as p, date_part(['minute'], d) as st from times where p <> st['minute'];
select d, date_part('second', d) as p, date_part(['second'], d) as st from times where p <> st['second'];
select d, date_part('millisecond', d) as p, date_part(['millisecond'], d) as st from times where p <> st['millisecond'];
select d, date_part('microsecond', d) as p, date_part(['microsecond'], d) as st from times where p <> st['microsecond'];
select d, date_part('year', d) as p, date_part(['year'], d) as st from times where p <> st['year'];
select d, date_part('quarter', d) as p, date_part(['quarter'], d) as st from times where p <> st['quarter'];
select d, date_part('month', d) as p, date_part(['month'], d) as st from times where p <> st['month'];
select d, date_part('day', d) as p, date_part(['day'], d) as st from times where p <> st['day'];
select d, date_part('era', d) as p, date_part(['era'], d) as st from times where p <> st['era'];
select d, date_part('week', d) as p, date_part(['week'], d) as st from times where p <> st['week'];
select d, date_part('weekday', d) as p, date_part(['weekday'], d) as st from times where p <> st['weekday'];
select d, date_part('doy', d) as p, date_part(['doy'], d) as st from times where p <> st['doy'];
select d, date_part('isoyear', d) as p, date_part(['isoyear'], d) as st from times where p <> st['isoyear'];
select d, date_part('timezone', d) as p, date_part(['timezone'], d) as st from times where p <> st['timezone'];
select d, date_part('timezone_hour', d) as p, date_part(['timezone_hour'], d) as st from times where p <> st['timezone_hour'];
select d, date_part('timezone_minute', d) as p, date_part(['timezone_minute'], d) as st from times where p <> st['timezone_minute'];
select d, date_part(['hour', 'minute', 'microsecond'], d) as parts from times order by 1;
select extract(second from i) from times;
select extract(minute from i) from times;
select extract(hour from i) from times;
select extract(milliseconds from i) from times;
select extract(microseconds from i) from times;
select stats(extract(second from i)) from times limit 1;
select stats(extract(minute from i)) from times limit 1;
select stats(extract(hour from i)) from times limit 1;
select stats(extract(milliseconds from i)) from times limit 1;
select stats(extract(microseconds from i)) from times limit 1;
select age(timestamp '2001-04-10', timestamp '1957-06-13');
select age(timestamp '2014-04-25', timestamp '2014-04-17');
select age(timestamp '2014-04-25', timestamp '2014-01-01');
select age(timestamp '2019-06-11', timestamp '2019-06-11');
select age(timestamp '2019-06-11', timestamp '2019-06-11')::varchar;
select age(t1, timestamp '1957-06-13') from timestamp;
select age(timestamp '2001-04-10', t2) from timestamp;
select age(t1, t2) from timestamp;
select t1 - t2 from timestamp;
select age(t1, t2) from timestamp where t1 > '2001-12-12';
select age(null, null);
select age(timestamp '1957-06-13', null);
select age(null, timestamp '1957-06-13');
select interval '1' day < age(date '1900-06-13');
select age(date '1900-01-01', date '1950-01-01');
select age(timestamp '1992-01-01 01:01:02.400', timestamp '1992-01-01 01:01:02.200');
select age(timestamp '1992-01-01 01:01:02.200', timestamp '1992-01-01 01:01:02.400');
select age(timestamp '1992-01-01 01:01:01.400', timestamp '1992-01-01 01:01:02.200');
select age('${lspecial}'::timestamp);
select age('${lspecial}'::timestamp, '${rspecial}'::timestamp);
select age('${rspecial}'::timestamp, '${lspecial}'::timestamp);
select datediff(year, startdate, enddate) from date1;
select datediff('quarter', startdate, enddate) from date1;
select datediff(month, startdate, enddate) from date1;
select datediff(day, startdate, enddate) from date1;
select datediff(week, startdate, enddate) from date1;
select datediff('hour', startdate, enddate) from date1;
select datediff('minute', startdate, enddate) from date1;
select datediff('second', startdate, enddate) from date1;
select datediff('millisecond', startdate, enddate) from date1;
select datediff('microsecond', startdate, enddate) from date1;
select datediff('isoyear', startdate, enddate) from date1;
select datediff(year, startdate, enddate) + datediff(year, enddate, startdate) from date1;
select datediff('quarter', startdate, enddate) + datediff('quarter', enddate, startdate) from date1;
select datediff(month, startdate, enddate) + datediff(month, enddate, startdate) from date1;
select datediff(day, startdate, enddate) + datediff(day, enddate, startdate) from date1;
select datediff(week, startdate, enddate) + datediff(week, enddate, startdate) from date1;
select datediff('year', startdate, startdate + interval 1 year) from (select '2021-07-30'::date + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('quarter', startdate, startdate + interval 1 quarter) from (select '2021-07-30'::date + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('month', startdate, startdate + interval 1 month) from (select '2021-07-30'::date + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('day', startdate, startdate + interval 1 day) from (select '2021-07-30'::date + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('week', startdate, startdate + interval 1 week) from (select '2021-07-30'::date + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff(year, startdate, enddate) from datetime1;
select datediff('quarter', startdate, enddate) from datetime1;
select datediff(month, startdate, enddate) from datetime1;
select datediff(day, startdate, enddate) from datetime1;
select datediff(week, startdate, enddate) from datetime1;
select datediff(year, startdate, enddate) + datediff(year, enddate, startdate) from datetime1;
select datediff('quarter', startdate, enddate) + datediff('quarter', enddate, startdate) from datetime1;
select datediff(month, startdate, enddate) + datediff(month, enddate, startdate) from datetime1;
select datediff(day, startdate, enddate) + datediff(day, enddate, startdate) from datetime1;
select datediff(week, startdate, enddate) + datediff(week, enddate, startdate) from datetime1;
select datediff('year', startdate, startdate + interval 1 year) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('quarter', startdate, startdate + interval 1 quarter) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('month', startdate, startdate + interval 1 month) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('day', startdate, startdate + interval 1 day) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('week', startdate, startdate + interval 1 week) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('hour' , startdate, enddate) from time1;
select datediff('minute' , startdate, enddate) from time1;
select datediff('second' , startdate, enddate) from time1;
select datediff('millisecond' , startdate, enddate) from time1;
select datediff('microsecond' , startdate, enddate) from time1;
select datediff(year, startdate, enddate) + datediff(year, enddate, startdate) from time1;
select datediff('quarter', startdate, enddate) + datediff('quarter', enddate, startdate) from time1;
select datediff(month, startdate, enddate) + datediff(month, enddate, startdate) from time1;
select datediff(day, startdate, enddate) + datediff(day, enddate, startdate) from time1;
select datediff(week, startdate, enddate) + datediff(week, enddate, startdate) from time1;
select datediff('year', startdate, startdate + interval 1 year) from (select '12:52:07.123456'::time + interval (d) hour as startdate from range(0, 5) tbl(d)) times;
select datediff('quarter', startdate, startdate + interval 1 quarter) from (select '12:52:07.123456'::time + interval (d) hour as startdate from range(0, 5) tbl(d)) times;
select datediff('month', startdate, startdate + interval 1 month) from (select '12:52:07.123456'::time + interval (d) hour as startdate from range(0, 5) tbl(d)) times;
select datediff('day', startdate, startdate + interval 1 day) from (select '12:52:07.123456'::time + interval (d) hour as startdate from range(0, 5) tbl(d)) times;
select datediff('week', startdate, startdate + interval 1 week) from (select '12:52:07.123456'::time + interval (d) hour as startdate from range(0, 5) tbl(d)) times;
select datediff(year, null::timestamp, null::timestamp) from datetime1;
select datediff('quarter', null::timestamp, null::timestamp) from datetime1;
select datediff(month, null::timestamp, null::timestamp) from datetime1;
select datediff(day, null::timestamp, null::timestamp) from datetime1;
select datediff(week, null::timestamp, null::timestamp) from datetime1;
select datediff(year, null, enddate) from datetime1;
select datediff('quarter', null, enddate) from datetime1;
select datediff(month, null, enddate) from datetime1;
select datediff(day, null, enddate) from datetime1;
select datediff(week, null, enddate) from datetime1;
select datediff(year, startdate, null) from datetime1;
select datediff('quarter', startdate, null) from datetime1;
select datediff(month, startdate, null) from datetime1;
select datediff(day, startdate, null) from datetime1;
select datediff(week, startdate, null) from datetime1;
select datediff(null, startdate, enddate) from datetime1;
select datediff('year', startdate, null) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('quarter', startdate, null) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('month', startdate, null) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('day', startdate, null) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('week', startdate, null) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('year', null, startdate) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('quarter', null, startdate) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('month', null, startdate) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('day', null, startdate) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('week', null, startdate) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('year', null::timestamp, null) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('quarter', null::timestamp, null) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('month', null::timestamp, null) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('day', null::timestamp, null) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff('week', null::timestamp, null) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datediff(null, startdate, startdate + interval 1 hour) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datepart, datediff(datepart, '2005-12-31 23:59:59.9999999'::timestamp, '2006-01-01 00:00:00.0000000'::timestamp) from parts;
select datesub('month', '2004-01-31'::date, '2004-02-29'::date);
select datesub('month', '2004-01-29'::date, '2004-02-29'::date);
select datesub('quarter', '2004-01-31'::date, '2004-04-30'::date);
select datesub('year', '2004-02-29'::date, '2005-02-28'::date);
select datesub('isoyear', '2004-02-29'::date, '2005-02-28'::date);
select datesub('day', '2004-01-31'::date, '2004-02-29'::date);
select datesub('doy', '2004-01-31'::date, '2004-02-29'::date);
select datesub('dow', '2004-01-31'::date, '2004-02-29'::date);
select datesub('week', '2004-01-31'::date, '2004-02-29'::date);
select datesub('hour', '2004-01-31'::date, '2004-02-01'::date);
select datesub('minute', '2004-02-29'::date, '2004-03-01'::date);
select datesub('second', '2004-02-29'::date, '2004-03-01'::date);
select datesub('millisecond', '2004-02-29'::date, '2004-03-01'::date);
select datesub('microsecond', '2004-02-29'::date, '2004-03-01'::date);
select datesub('day', startdate, enddate) + datesub('day', enddate, startdate) from date1;
select datesub('doy', startdate, enddate) + datesub('doy', enddate, startdate) from date1;
select datesub('dow', startdate, enddate) + datesub('dow', enddate, startdate) from date1;
select datesub('week', startdate, enddate) + datesub('week', enddate, startdate) from date1;
select datesub('day', startdate, startdate + interval 1 day) from (select '2021-07-30'::date + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datesub('week', startdate, startdate + interval 1 week) from (select '2021-07-30'::date + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datesub('month', '2004-01-31 12:00:00'::timestamp, '2004-02-29 13:00:00'::timestamp);
select datesub('month', '2004-01-29 12:00:00'::timestamp, '2004-02-29 13:00:00'::timestamp);
select datesub('month', '2004-02-29 12:00:00'::timestamp, '2004-03-31 13:00:00'::timestamp);
select datesub('month', '2004-02-29 13:00:00'::timestamp, '2004-03-31 12:00:00'::timestamp);
select datesub('quarter', '2004-01-31 12:00:00'::timestamp, '2004-04-30 13:00:00'::timestamp);
select datesub('year', '2004-02-29 12:00:00'::timestamp, '2005-02-28 13:00:00'::timestamp);
select datesub('isoyear', '2004-02-29 12:00:00'::timestamp, '2005-02-28 13:00:00'::timestamp);
select datesub('month', '2004-01-31 13:00:00'::timestamp, '2004-02-29 12:00:00'::timestamp);
select datesub('month', '2004-01-29 13:00:00'::timestamp, '2004-02-29 12:00:00'::timestamp);
select datesub('quarter', '2004-01-31 13:00:00'::timestamp, '2004-04-30 12:00:00'::timestamp);
select datesub('year', '2004-02-29 13:00:00'::timestamp, '2005-02-28 12:00:00'::timestamp);
select datesub('isoyear', '2004-02-29 13:00:00'::timestamp, '2005-02-28 12:00:00'::timestamp);
select datesub('day', '2004-01-31 12:00:00'::timestamp, '2004-02-29 13:00:00'::timestamp);
select datesub('doy', '2004-01-31 12:00:00'::timestamp, '2004-02-29 13:00:00'::timestamp);
select datesub('dow', '2004-01-31 12:00:00'::timestamp, '2004-02-29 13:00:00'::timestamp);
select datesub('week', '2004-01-31 12:00:00'::timestamp, '2004-02-29 13:00:00'::timestamp);
select datesub('day', '2004-01-31 13:00:00'::timestamp, '2004-02-29 12:00:00'::timestamp);
select datesub('doy', '2004-01-31 13:00:00'::timestamp, '2004-02-29 12:00:00'::timestamp);
select datesub('dow', '2004-01-31 13:00:00'::timestamp, '2004-02-29 12:00:00'::timestamp);
select datesub('week', '2004-01-31 13:00:00'::timestamp, '2004-02-29 12:00:00'::timestamp);
select datesub('day', '2004-01-31 12:00:00'::timestamp, '2004-02-28 13:00:00'::timestamp);
select datesub('doy', '2004-01-31 12:00:00'::timestamp, '2004-02-28 13:00:00'::timestamp);
select datesub('dow', '2004-01-31 12:00:00'::timestamp, '2004-02-28 13:00:00'::timestamp);
select datesub('week', '2004-01-31 12:00:00'::timestamp, '2004-02-28 13:00:00'::timestamp);
select datesub('day', '2004-01-31 13:00:00'::timestamp, '2004-02-28 12:00:00'::timestamp);
select datesub('doy', '2004-01-31 13:00:00'::timestamp, '2004-02-28 12:00:00'::timestamp);
select datesub('dow', '2004-01-31 13:00:00'::timestamp, '2004-02-28 12:00:00'::timestamp);
select datesub('week', '2004-01-31 13:00:00'::timestamp, '2004-02-28 12:00:00'::timestamp);
select datesub('hour', '2004-01-31 12:00:00'::timestamp, '2004-02-01 13:05:00'::timestamp);
select datesub('hour', '2004-01-31 12:00:00'::timestamp, '2004-02-01 12:00:00'::timestamp);
select datesub('hour', '2004-01-31 13:00:00'::timestamp, '2004-02-01 12:05:00'::timestamp);
select datesub('minute', '2004-01-31 12:00:00'::timestamp, '2004-02-01 13:05:00'::timestamp);
select datesub('minute', '2004-01-31 12:00:00'::timestamp, '2004-02-01 12:00:00'::timestamp);
select datesub('minute', '2004-01-31 13:00:00'::timestamp, '2004-02-01 12:05:00'::timestamp);
select datesub('second', '2004-01-31 12:00:00'::timestamp, '2004-02-01 12:00:05'::timestamp);
select datesub('second', '2004-01-31 12:00:00'::timestamp, '2004-02-01 12:00:00'::timestamp);
select datesub('second', '2004-01-31 12:00:05'::timestamp, '2004-02-01 12:00:00'::timestamp);
select datesub('millisecond', '2004-01-31 12:00:00'::timestamp, '2004-02-01 12:00:00.050'::timestamp);
select datesub('millisecond', '2004-01-31 12:00:00'::timestamp, '2004-02-01 12:00:00'::timestamp);
select datesub('millisecond', '2004-01-31 12:00:00.050'::timestamp, '2004-02-01 12:00:00'::timestamp);
select datesub('microsecond', '2004-01-31 12:00:00'::timestamp, '2004-02-01 12:00:00.000050'::timestamp);
select datesub('microsecond', '2004-01-31 12:00:00'::timestamp, '2004-02-01 12:00:00'::timestamp);
select datesub('microsecond', '2004-01-31 12:00:00.000050'::timestamp, '2004-02-01 12:00:00'::timestamp);
select datesub('day', startdate, enddate) + datesub('day', enddate, startdate) from datetime1;
select datesub('doy', startdate, enddate) + datesub('doy', enddate, startdate) from datetime1;
select datesub('dow', startdate, enddate) + datesub('dow', enddate, startdate) from datetime1;
select datesub('week', startdate, enddate) + datesub('week', enddate, startdate) from datetime1;
select datesub('day', startdate, startdate + interval 1 day) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datesub('week', startdate, startdate + interval 1 week) from (select '2021-07-30'::timestamp + interval (d) day as startdate from range(0, 5) tbl(d)) days;
select datesub('hour', '12:00:00'::time, '13:05:00'::time);
select datesub('hour', '12:00:00'::time, '12:05:00'::time);
select datesub('hour', '13:00:00'::time, '12:05:00'::time);
select datesub('minute', '12:00:00'::time, '13:05:00'::time);
select datesub('minute', '12:00:00'::time, '13:00:00'::time);
select datesub('minute', '13:00:00'::time, '12:05:00'::time);
select datesub('second', '12:00:00'::time, '12:00:05'::time);
select datesub('second', '12:00:00'::time, '12:00:00'::time);
select datesub('second', '12:00:05'::time, '12:00:00'::time);
select datesub('millisecond', '12:00:00'::time, '12:00:00.050'::time);
select datesub('millisecond', '12:00:00'::time, '12:00:00'::time);
select datesub('millisecond', '12:00:00.050'::time, '12:00:00'::time);
select datesub('microsecond', '12:00:00'::time, '12:00:00.000050'::time);
select datesub('microsecond', '12:00:00'::time, '12:00:00'::time);
select datesub('microsecond', '12:00:00.000050'::time, '12:00:00'::time);
select datesub(day, startdate, enddate) + datesub(day, enddate, startdate) from time1;
select datesub(doy, startdate, enddate) + datesub(doy, enddate, startdate) from time1;
select datesub(dow, startdate, enddate) + datesub(dow, enddate, startdate) from time1;
select datesub(week, startdate, enddate) + datesub(week, enddate, startdate) from time1;
select datesub('day', startdate, startdate + interval 1 day) from (select '12:52:07.123456'::time + interval (d) hour as startdate from range(0, 5) tbl(d)) times;
select datesub('week', startdate, startdate + interval 1 week) from (select '12:52:07.123456'::time + interval (d) hour as startdate from range(0, 5) tbl(d)) times;
select datesub('day', null::timestamp, null::timestamp) from datetime1;
select datesub('doy', null::timestamp, null::timestamp) from datetime1;
select datesub('dow', null::timestamp, null::timestamp) from datetime1;
select datesub('week', null::timestamp, null::timestamp) from datetime1;
select datesub('day', null, enddate) from datetime1;
select datesub('doy', null, enddate) from datetime1;
select datesub('dow', null, enddate) from datetime1;
select datesub('week', null, enddate) from datetime1;
select datesub('day', startdate, null) from datetime1;
select datesub('doy', startdate, null) from datetime1;
select datesub('dow', startdate, null) from datetime1;
select datesub('week', startdate, null) from datetime1;
select datesub(null, startdate, enddate) from datetime1;
select datepart, datesub(datepart, '2004-01-31 12:00:00'::timestamp, '2004-02-29 13:05:47.123456'::timestamp) from parts;
select to_timestamp(0), to_timestamp(1), to_timestamp(1574802684), to_timestamp(-1);
select md from (select make_date(null, month(d), day(d)) md from dates) t where md is not null;
select md from (select make_date(year(d), null, day(d)) md from dates) t where md is not null;
select md from (select make_date(year(d), month(d), null) md from dates) t where md is not null;
select make_date(2021, 12, 30), make_date(null, 12, 30), make_date(2021, null, 30), make_date(2021, 12, null) ;
select md from ( select make_timestamp(null, month(ts), day(ts), hour(ts), minute(ts), microsecond(ts) / 1000000.0) md from timestamps) t where md is not null;
select md from ( select make_timestamp(year(ts), null, day(ts), hour(ts), minute(ts), microsecond(ts) / 1000000.0) md from timestamps) t where md is not null;
select md from ( select make_timestamp(year(ts), month(ts), null, hour(ts), minute(ts), microsecond(ts) / 1000000.0) md from timestamps) t where md is not null;
select md from ( select make_timestamp(year(ts), month(ts), day(ts), null, minute(ts), microsecond(ts) / 1000000.0) md from timestamps) t where md is not null;
select md from ( select make_timestamp(year(ts), month(ts), day(ts), hour(ts), null, microsecond(ts) / 1000000.0) md from timestamps) t where md is not null;
select md from ( select make_timestamp(year(ts), month(ts), day(ts), hour(ts), minute(ts), null) md from timestamps) t where md is not null;
select make_timestamp(2021, 12, 30, 12, 41, 46.123456), make_timestamp(null, 12, 30, 12, 41, 46.123456), make_timestamp(2021, null, 30, 12, 41, 46.123456), make_timestamp(2021, 12, null, 12, 41, 46.123456), make_timestamp(2021, 12, 30, null, 41, 46.123456), make_timestamp(2021, 12, 30, 12, null, 46.123456), make_timestamp(2021, 12, 30, 12, 41, null) ;
select md from (select make_time(null, minute(d), microsecond(d) / 1000000.0) md from dates) t where md is not null;
select md from (select make_time(hour(d), null, microsecond(d) / 1000000.0) md from dates) t where md is not null;
select md from (select make_time(hour(d), minute(d), null) md from dates) t where md is not null;
select make_time(12, 41, 46.123456), make_time(null, 41, 46.123456), make_time(12, null, 46.123456), make_time(12, 41, null) ;
select date_part('isoyear', ts), ts from timestamps order by 2;
select date_part('isoyear', ts), ts from generate_series('2021-12-26'::timestamp, '2022-01-12'::timestamp, interval 1 day) tbl(ts);
select ts, date_part('hour', ts) as p, hour(ts) as f from timestamps where p <> f;
select ts, date_part('minute', ts) as p, minute(ts) as f from timestamps where p <> f;
select ts, date_part('second', ts) as p, second(ts) as f from timestamps where p <> f;
select ts, date_part('millisecond', ts) as p, millisecond(ts) as f from timestamps where p <> f;
select ts, date_part('microsecond', ts) as p, microsecond(ts) as f from timestamps where p <> f;
select ts, date_part('year', ts) as p, year(ts) as f from timestamps where p <> f;
select ts, date_part('quarter', ts) as p, quarter(ts) as f from timestamps where p <> f;
select ts, date_part('month', ts) as p, month(ts) as f from timestamps where p <> f;
select ts, date_part('day', ts) as p, day(ts) as f from timestamps where p <> f;
select ts, date_part('era', ts) as p, era(ts) as f from timestamps where p <> f;
select ts, date_part('week', ts) as p, week(ts) as f from timestamps where p <> f;
select ts, date_part('weekday', ts) as p, weekday(ts) as f from timestamps where p <> f;
select ts, date_part('doy', ts) as p, doy(ts) as f from timestamps where p <> f;
select ts, date_part('isoyear', ts) as p, isoyear(ts) as f from timestamps where p <> f;
select ts, date_part('timezone', ts) as p, timezone(ts) as f from timestamps where p <> f;
select ts, date_part('timezone_hour', ts) as p, timezone_hour(ts) as f from timestamps where p <> f;
select ts, date_part('timezone_minute', ts) as p, timezone_minute(ts) as f from timestamps where p <> f;
select ts, date_part('hour', ts) as p, date_part(['hour'], ts) as s from timestamps where p <> s['hour'];
select ts, date_part('minute', ts) as p, date_part(['minute'], ts) as s from timestamps where p <> s['minute'];
select ts, date_part('second', ts) as p, date_part(['second'], ts) as s from timestamps where p <> s['second'];
select ts, date_part('millisecond', ts) as p, date_part(['millisecond'], ts) as s from timestamps where p <> s['millisecond'];
select ts, date_part('microsecond', ts) as p, date_part(['microsecond'], ts) as s from timestamps where p <> s['microsecond'];
select ts, date_part('year', ts) as p, date_part(['year'], ts) as s from timestamps where p <> s['year'];
select ts, date_part('quarter', ts) as p, date_part(['quarter'], ts) as s from timestamps where p <> s['quarter'];
select ts, date_part('month', ts) as p, date_part(['month'], ts) as s from timestamps where p <> s['month'];
select ts, date_part('day', ts) as p, date_part(['day'], ts) as s from timestamps where p <> s['day'];
select ts, date_part('era', ts) as p, date_part(['era'], ts) as s from timestamps where p <> s['era'];
select ts, date_part('week', ts) as p, date_part(['week'], ts) as s from timestamps where p <> s['week'];
select ts, date_part('weekday', ts) as p, date_part(['weekday'], ts) as s from timestamps where p <> s['weekday'];
select ts, date_part('doy', ts) as p, date_part(['doy'], ts) as s from timestamps where p <> s['doy'];
select ts, date_part('isoyear', ts) as p, date_part(['isoyear'], ts) as s from timestamps where p <> s['isoyear'];
select ts, date_part('timezone', ts) as p, date_part(['timezone'], ts) as s from timestamps where p <> s['timezone'];
select ts, date_part('timezone_hour', ts) as p, date_part(['timezone_hour'], ts) as s from timestamps where p <> s['timezone_hour'];
select ts, date_part('timezone_minute', ts) as p, date_part(['timezone_minute'], ts) as s from timestamps where p <> s['timezone_minute'];
select ts::date as d, date_part(['year', 'month', 'day'], ts) as parts from timestamps order by 1;
select ts::date as d, date_part(['year', 'month', 'day'], ts) as parts from millennia order by 1;
select ts, date_part(['hour', 'minute', 'microsecond'], ts) as parts from timestamps order by 1;
select ts, date_part(['hour', 'minute', 'microsecond'], ts) as parts from millennia order by 1;
select date_part(['hour', 'minute', 'microsecond'], null::timestamp);
select date_part(['hour', 'minute', 'microsecond'], '1962-07-31 12:20:48.123456'::timestamp);
select date_part(['month', 'months', 'mon'], '1962-07-31 12:20:48.123456'::timestamp);
select ts::date as d, date_part(['year', 'month', 'months'], ts) as parts from timestamps order by 1;
select extract(year from i) from timestamps;
select extract(month from i) from timestamps;
select extract(day from i) from timestamps;
select extract(week from i) from timestamps;
select extract(quarter from i) from timestamps;
select extract(dow from i) from timestamps;
select extract(doy from i) from timestamps;
select extract(second from i) from timestamps;
select extract(minute from i) from timestamps;
select extract(hour from i) from timestamps;
select extract(milliseconds from i) from timestamps;
select extract(second from i) from timestamps;
select extract(minute from i) from timestamps;
select extract(milliseconds from i) from timestamps;
select extract(microseconds from i) from timestamps;
select age(timestamp '2001-04-10 00:00:00-07', timestamp '1957-06-13 00:00:00-07');
select age(timestamp '2014-04-25 00:00:00-07', timestamp '2014-04-17 00:00:00-07');
select age(t1, t2) from timestamps;
select t1 - t2 from timestamps;
select age(t1, t2) from timestamps where t1 > '2001-12-12';
select iv, ts + iv from limits, intervals where label = 'tsmin' and iv >= interval 0 seconds;
select ts + (interval (-1) millisecond) from limits where label = 'tsmin';
select iv, ts + iv from limits, intervals where label = 'tsmax' and iv < (interval (-1) millisecond);
select datediff('year', startdate, enddate) from datetime1;
select datediff('quarter', startdate, enddate) from datetime1;
select datediff('month', startdate, enddate) from datetime1;
select datediff('day', startdate, enddate) from datetime1;
select datediff('week', startdate, enddate) from datetime1;
select datediff('year', startdate, enddate) + datediff('year', enddate, startdate) from datetime1;
select datediff('quarter', startdate, enddate) + datediff('quarter', enddate, startdate) from datetime1;
select datediff('month', startdate, enddate) + datediff('month', enddate, startdate) from datetime1;
select datediff('day', startdate, enddate) + datediff('day', enddate, startdate) from datetime1;
select datediff('week', startdate, enddate) + datediff('week', enddate, startdate) from datetime1;
select year(ts), year(ts::timestamp) from timestamps;
select month(ts), month(ts::timestamp) from timestamps;
select day(ts), day(ts::timestamp) from timestamps;
select microsecond(ts), microsecond(ts::timestamp) from timestamps;
select millisecond(ts), millisecond(ts::timestamp) from timestamps;
select second(ts), second(ts::timestamp) from timestamps;
select minute(ts), minute(ts::timestamp) from timestamps;
select hour(ts), hour(ts::timestamp) from timestamps;
select week(ts), week(ts::timestamp) from timestamps;
select quarter(ts), quarter(ts::timestamp) from timestamps;
select isoyear(ts), isoyear(ts::timestamp) from timestamps;
select date_part(part, ts), date_part(part, ts::timestamp), part from timestamps;
select era(ts) from timestamps;
select date_part('era', ts) from timestamps;
select date_part('timezone', ts) from timestamps;
select date_part('timezone_hour', ts) from timestamps;
select date_part('timezone_minute', ts) from timestamps;
select weekday(ts), weekday(ts::timestamp) from timestamps;
select weekofyear(ts), weekofyear(ts::timestamp) from timestamps;
select date_part(['era', 'year', 'month', 'day'], ts), ts from timestamps order by 2;
select date_part(['hour', 'minute', 'microsecond'], ts), ts from timestamps order by 2;
select ts, last_day(ts), last_day(ts::timestamp) from februaries;
select ts, last_day(ts), last_day(ts::timestamp) from timestamps;
select datesub(datepart, startdate, enddate) + datesub(datepart, enddate, startdate), datepart from datetime1, dateparts;
select date_trunc(s, d), s from timestamps;
select datetrunc(s, d), s from timestamps;
select era(ts), year(ts), ts from timestamps;
select * from timeparts;
select ts, strftime(ts, '%y-%m-%d %h:%m:%s.%f %z') from timestamps;
select ts, strftime(ts, '%z %y-%m-%d %h:%m:%s.%f') from timestamps;
select strptime('2022-03-05 17:59:17.877 cst', '%y-%m-%d %h:%m:%s.%g %z');
select strptime('2022-03-05 17:59:17.877 cst', null);
select strptime(null, '%y-%m-%d %h:%m:%s.%g %z');
select strptime('2022-03-05 17:59:17.877 ' || tz_name, '%y-%m-%d %h:%m:%s.%g %z') tstz, tz_name from zones order by tstz;
select strptime('2022-03-05 17:59:17.877 ' || tz_name, '%y-%m-%d %h:%m:%s.%g %z') tstz, tz_name from abbrevs order by tstz;
select strptime('2022-03-05 17:59:17.877 ' || utc_offset, '%y-%m-%d %h:%m:%s.%g %z') tstz, utc_offset from offsets order by tstz;
select count(distinct t) from t1;
select strftime(d, '%a') from timestamps order by d;
select strftime(d, '%w') from timestamps order by d;
select strftime(d, '%d') from timestamps order by d;
select strftime(d, '%-d') from timestamps order by d;
select strftime(d, '%b') from timestamps order by d;
select strftime(d, '%h') from timestamps order by d;
select strftime(d, '%m') from timestamps order by d;
select strftime(d, '%-m') from timestamps order by d;
select strftime(d, '%y') from timestamps order by d;
select strftime(d, '%-y') from timestamps order by d;
select strftime(d, '%-h') from timestamps order by d;
select strftime(d, '%i') from timestamps order by d;
select strftime(d, '%-i') from timestamps order by d;
select strftime(d, '%p') from timestamps order by d;
select strftime(d, '%s') from timestamps order by d;
select strftime(d, '%-s') from timestamps order by d;
select strftime(d, '%f') from timestamps order by d;
select strftime(d, '%z') from timestamps order by d;
select strftime(d, '%j') from timestamps order by d;
select strftime(d, '%-j') from timestamps order by d;
select strftime(d, '%u') from timestamps order by d;
select strftime(d, '%c') from timestamps order by d;
select strftime(d, '%x') from timestamps order by d;
select strptime('21 june, 2018', '%d %b, %y');
select strptime('21/10/2018', '%d/%m/%y');
select strptime('2018-20-10', '%y-%d-%m');
select strptime('20182010', '%y%d%m');
select strptime('mon 30, june 2003, 12:03:10 am', '%a %d, %b %y, %i:%m:%s %p');
select strptime('mon 30, june 2003, 12:03:10 pm', '%a %d, %b %y, %i:%m:%s %p');
select strptime('mon 30, december 2003, 7:3:5 pm', '%a %d, %b %y, %i:%m:%s %p');
select strptime('tuesday 30, december 2003, 7:3:5 pm', '%a %d, %b %y, %i:%m:%s %p');
select strptime('mon 30, december 30, 7:3:5 pm', '%a %d, %b %y, %i:%m:%s %p');
select strptime('mon 30, june 2003, 12:03:10 am', '%a %-d, %b %y, %-i:%-m:%-s %p');
select strptime('mon', '%a');
select strptime('tuesday', '%a');
select strptime('jun', '%b');
select strptime('1', '%w');
select strptime('1', '%u');
select strptime('30', '%u'), strftime('1900-07-29'::date, '%u');
select strptime('30', '%w'), strftime('1900-07-29'::date, '%w');
select strptime('6', '%w');
select strptime('1-4', '%u-%w'), strftime('1900-01-11'::date, '%u-%w');
select strptime('1-4', '%w-%w'), strftime('1900-01-04'::date, '%w-%w');
select strptime('30', '%j'), strftime('1900-01-30'::date, '%-j');
select strptime('1992-01-30 30', '%y-%m-%d %j');
select strptime('2021-19-4', '%y-%u-%w'), strftime('2021-05-13'::date, '%y-%u-%w');
select strptime('2021-19-4', '%y-%w-%w'), strftime('2021-05-13'::date, '%y-%u-%w');
select strptime('2021-0-5', '%y-%u-%w'), strftime('2021-01-01'::date, '%y-%u-%w');
select strptime('2021-0-5', '%y-%w-%w'), strftime('2021-01-01'::date, '%y-%w-%w');
select strptime('2021-05-12 19-4', '%y-%m-%d %u-%w');
select strptime('2021-05-12 19-4', '%y-%m-%d %w-%w');
select * from ( select dt, strftime(dt, '%y-%u-%w') as ft, strptime(strftime(dt, '%y-%u-%w'), '%y-%u-%w') as rt from (select '2021-01-01'::date + (interval (d) day) as dt from range(365) tbl(d)) days ) diffs where rt <> dt;
select * from ( select dt, strftime(dt, '%y-%w-%w') as ft, strptime(strftime(dt, '%y-%w-%w'), '%y-%w-%w') as rt from (select '2021-01-01'::date + (interval (d) day) as dt from range(365) tbl(d)) days ) diffs where rt <> dt;
select strptime('', null);
select strptime('jun 30 2003 2:03:10am', '%b %d %y %-i:%m:%s%p');
select strptime('2020-12-31 21:25:58.745232', '%y-%m-%d %h:%m:%s.%f');
select strptime('2020-12-31 21:25:58.745232+00', '%y-%m-%d %h:%m:%s.%f%z');
select strptime('2020-12-31 21:25:58.745232+0000', '%y-%m-%d %h:%m:%s.%f%z');
select strptime('2020-12-31 21:25:58.745232+02', '%y-%m-%d %h:%m:%s.%f%z');
select strptime('2020-12-31 21:25:58.745232-02', '%y-%m-%d %h:%m:%s.%f%z');
select strptime('2020-12-31 21:25:58.745232+0215', '%y-%m-%d %h:%m:%s.%f%z');
select strptime('2020-12-31 21:25:58.745232-0215', '%y-%m-%d %h:%m:%s.%f%z');
select strptime('2020-12-31 03:25:58.745232+04', '%y-%m-%d %h:%m:%s.%f%z');
select strptime('2020-12-30 23:25:58.745232-04', '%y-%m-%d %h:%m:%s.%f%z');
select count(distinct u) from uuids;
select * from unit;
select unit.total_profit from unit as unit2, unit2 as unit;
select * from unit;
select * from unit2;
select bar from test;
select bar from unit;
select total_profit, count(total_profit), sum(amount_sold), sum(price) from unit group by total_profit;
select total_profit, name, count(total_profit) over(partition by total_profit) as counttotalprofit, sum(amount_sold) over(partition by total_profit) as sumamountsold, sum(price) over(partition by total_profit) as sumprice from unit;
select * from tbl4;
select total_profit from unit;
select profit_total from unit;
select * from not_unit;
select index from tbl;
select total_profit from tbl;
select tbl.* from tbl;
select total_profit from unit;
select c from a where id=1;
select * from a;
select count(i) from integers where i > 1 and i < 3;
select count(i) from integers where i >= 1 and i < 3;
select count(i) from integers where i > 1;
select count(i) from integers where i < 4;
select count(i) from integers where i < 5;
select * from integers where i=1;
select * from integers where i=2;
select count(i) from numbers where i = cast(0 as double);
select count(i) from numbers where i = cast(-0 as double);
select count(i) from numbers where i = cast(0 as real);
select count(i) from numbers where i = cast(-0 as real);
select p1.id from person_knows_person pkp join person p1 on p1.id = pkp.person1id;
select p1.id,p2.id from person_knows_person pkp join person p1 on p1.id = pkp.person1id join person p2 on p2.id = pkp.person2id;
select count(*) from integers where i = 9312908412824241;
select count(*) from integers where i < 9223372036854775808;
select count(*) from integers where i >= 0;
select count(*) from integers where i < 0;
select count(*) from integers where i = -2092042498432234;
select count(*) from integers where i = 1;
select count(*) from integers where i = -100;
select count(*) from integers where i = 0;
select count(*) from integers where i = -598538523852390852;
select count(*) from integers where i = 4298421;
select count(*) from integers where i = -498249;
select count(*) from integers where i = 9312908412824240;
select count(*) from integers where i = -2092042498432235;
select count(*) from integers where i = 2;
select count(*) from integers where i = -101;
select count(*) from integers where i = -598538523852390853;
select count(*) from integers where i = 4298422;
select count(*) from integers where i = -498261;
select i from integers where i > 0;
select j from integers where j < 0;
select k from integers where k >= 0;
select l from integers where l <= 0;
select i from integers where i > 0::tinyint order by i;
select j from integers where j <= 2::smallint order by j;
select k from integers where k >= -100000::integer order by k;
select k from integers where k >= 100000::integer order by k;
select k from integers where k >= 100000::integer and k <= 100001::integer order by k;
select l from integers where l <= 1000000000::bigint order by i;
select l from integers where l <= -1000000000::bigint order by i;
select count(*) from integers where i<1;
select count(*) from integers where i<=1;
select count(*) from integers where i=0;
select count(*) from integers where i=1;
select count(*) from integers where i>0;
select count(*) from integers where i>=0;
select i from integers where i=10;
select * from integers where i=10;
select j from integers where j=1;
select * from integers where j=1;
select k from integers where k='hello';
select i, k from integers where k='hello';
select * from integers where k='hello';
select * from integers where j+l=5;
select * from integers where j+l=9;
select count(*) from integers where j+l>0;
select * from integers where i = 1 and j = 2;
select sum(i) from integers where i >= -500 and i <= -498;
select sum(i) from integers where i >= -10 and i <= 5;
select sum(i) from integers where i >= 10 and i <= 15;
select count(*) from integers where i = 0 + 1;
select sum(i) from integers where i <= 2;
select sum(i) from integers where i > 4;
select sum(i) from integers where i > 15;
select sum(i) from integers where i > 1;
select count(*) from integers where i <= 2;
select sum(b) from integers;
select sum(b) from integers where b = 1;
select count(b) from integers;
select count(b) from integers where b = 1;
select count(*) from integers where b = 1;
select * from integers where i<3 order by 1;
select * from integers where i>3 order by 1;
select * from integers where i<=3 order by 1;
select * from integers where i>=3 order by 1;
select * from integers where i < 3 order by 1;
select * from integers where i < 5;
select * from integers where i > 0;
select * from integers where i < 3;
select * from integers where i <= 1;
select * from integers where i >= 1;
select * from integers where i = 1;
select * from integers where i < 1;
select * from integers where i <= 0;
select * from integers where i > 1;
select * from integers where i >= 2;
select * from integers where i = 2;
select j from integers where i = 3;
select count(i) from strings where i = 'test';
select count(i) from strings where i = 'somesuperbigstring';
select count(i) from strings where i = 'maybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstring';
select count(i) from strings where i = 'maybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstring2';
select count(i) from strings where i >= 'somesuperbigstring' and i <='somesuperbigstringz';
select * from integers where j>5;
select * from integers where j=2;
select * from integers order by j;
select count(*) from (select * from integers where i > 0 except select 0 + 1) t1;
select * from t0;
select * from t0 where t0.c0 = 1;
select a2 from a where a1=1;
select sum(i) from integers where i > 0;
select p1.id,p2.id from person_knows_person pkp join person p1 on p1.id = pkp.person1id join person p2 on p2.id = pkp.person2id order by 1, 2;
select p1.id,p2.id from person p1 join person_knows_person pkp on p1.id = pkp.person1id join person p2 on p2.id = pkp.person2id order by 1, 2;
select count(i), sum(i), min(i), max(i), count(*) from integers;
select sum(case when i is null then 1 else 0 end) from integers;
select * from i2 order by 1;
select * from strings;
select * from strings order by cast(a as integer);
select * from test t1, test t2 order by 1, 2, 3, 4;
select count(*) from test t1, range(2000) t2;
select count(*) from range(2000) t1, test t2;
select count(*) from integers_empty join integers2 using (i);
select count(*) from integers_empty join integers2 on (integers_empty.i>integers2.i);
select count(*) from integers_empty join integers2 on (integers_empty.i<>integers2.i);
select count(*) from integers_empty join integers2 on (integers_empty.i<>integers2.i or integers_empty.i+1<>integers2.i);
select * from integers_empty join integers2 using (i);
select count(*) from integers_empty left join integers2 using (i);
select * from integers_empty left join integers2 using (i);
select count(*) from integers_empty right join integers2 using (i);
select count(*) from integers_empty full outer join integers2 using (i);
select count(*) from integers join integers2_empty using (i);
select * from integers join integers2_empty using (i);
select count(*) from integers left join integers2_empty using (i);
select count(*) from integers right join integers2_empty using (i);
select * from integers right join integers2_empty using (i);
select count(*) from integers full outer join integers2_empty using (i);
select integers.*, integers2_empty.* from integers full outer join integers2_empty using (i);
select count(*) from integers join empty_join using (i);
select count(*) from integers left join empty_join using (i);
select count(*) from integers right join empty_join using (i);
select count(*) from integers full outer join empty_join using (i);
select count(*) from bigtable full outer join smalltable using (a);
select count(*) from bigtable right outer join smalltable using (a);
select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k union all select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k order by i;
select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k union select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k order by i;
select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k union select i+1, j, k, l from integers full outer join integers2 on integers.i=integers2.k union select i+2, j, k, l from integers full outer join integers2 on integers.i=integers2.k union select i+3, j, k, l from integers full outer join integers2 on integers.i=integers2.k union select i+4, j, k, l from integers full outer join integers2 on integers.i=integers2.k order by 1,2,3,4;
select distinct * from ( select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k union all select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k) tbl order by i;
select * from v1 full outer join v1 v2 using (i, j) order by 1, 2, 3, 4, 5, 6;
select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k order by i;
select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k and integers.j > integers2.l order by 1, 2, 3, 4;
select i, j, k, l from integers full outer join (select k, l::varchar as l from integers2) integers2 on integers.i=integers2.k order by 1, 2, 3, 4;
select i, j, k, l from integers full outer join integers2 on integers.i+integers2.k+9<>integers.j+integers2.l order by 1, 2, 3, 4;
select i, j, k, l from integers full outer join integers2 on integers.i<>integers2.k order by 1, 2, 3, 4;
select count(*) from integers full outer join integers2 on integers.i=integers2.k;
select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k order by 1, 2, 3, 4;
select count(*) from integers full outer join integers2 on integers.j>integers2.l;
select i, j, k, l from integers full outer join integers2 on integers.j>integers2.l order by 1, 2, 3, 4;
select count(*) from integers full outer join integers2 on integers.j+1<>integers2.l;
select i, j, k, l from integers full outer join integers2 on integers.j+1<>integers2.l order by 1, 2, 3, 4;
select count(*) from integers full outer join integers2 on integers.j+integers2.l<>3;
select i, j, k, l from integers full outer join integers2 on integers.j+integers2.l<>3 order by 1, 2, 3, 4;
select i, j, k, l from integers full outer join integers2 on integers.i<integers2.k order by 1, 2, 3, 4;
with recursive t as ( select 1 as x, 0 as begin, 4 as end union all select lhs.x + 1 as x, greatest(lhs.begin, rhs.begin) as begin, least(lhs.end, rhs.end) as end from t lhs, t rhs where lhs.begin + 1 < rhs.end - 1 and rhs.begin + 1 < lhs.end - 1 and lhs.x < 3 ) select count(*) from t;
select s1.rid, s2.rid from west s1, west s2 where s1.time > s2.time order by 1, 2;
select s1.rid, s2.rid from west s1, west s2 where s1.time > s2.time and s1.cost < s2.cost order by 1, 2;
select east.rid, west.rid from east, west where east.dur < west.time and east.rev > west.cost order by 1, 2;
with weststr as ( select rid, time::varchar as time, cost::varchar as cost from west ) select s1.rid, s2.rid from weststr s1, weststr s2 where s1.time > s2.time and s1.cost < s2.cost order by 1, 2;
select count(*) from ( select r.id, s.id from events r, events s where r.start <= s.end and r.end >= s.start and r.id <> s.id ) q2;
select t1.x, t2.x from `test/sql/join/iejoin/overlap.left.csv` t1, `test/sql/join/iejoin/overlap.right.csv` t2 where t1.x < t2.x and t1.y > t2.y;
select t1.x, t2.x from `test/sql/join/iejoin/overlap.left.csv` t1, `test/sql/join/iejoin/overlap.right.csv` t2 where t1.y > t2.y and t1.x < t2.x;
select t_k0, u_k0 from t, u where t_k0 = u_k0;
select count(*) from bigtable join smalltable using (a);
select count(*) from bigtable join smalltable using (a) join smalltable t3 using (a);
select count(*) from bigtable join smalltable using (a) join smalltable t3 using (a) join smalltable t4 using (a);
select * from bigtable join smalltable using (a);
select * from t1 join t2 on (i=j), t3 join t4 on (k=l) order by 1, 2, 3, 4;
select * from test as t1 left join test as t2 on t1.id=t2.id where t1.l!=t2.l or t1.id!=t2.id;
select test.a, b, c from test, test2 where test.a = test2.a and test.b <> test2.c order by test.a;
select test.a, b, c from test, test2 where test.a = test2.a and test.b < test2.c order by test.a;
select test.a, b, c from test, test2 where test.a = test2.a and test.b <= test2.c order by test.a;
select test.a, b, c from test, test2 where test.a = test2.a and test.b > test2.c order by test.a;
select test.a, b, c from test, test2 where test.a = test2.a and test.b >= test2.c order by test.a;
select * from test where exists(select * from test2 where test.a=test2.a and test.b<>test2.c);
select * from test where exists(select * from test2 where test.a=test2.a and test.b<>test2.c) and not exists(select * from test2 where test.a=test2.a and test.b<test2.c);
select * from test where not exists(select * from test2 where test.a=test2.a and test.b<test2.c);
select * from test where not exists(select * from test2 where test.a=test2.a and test.b<test2.c) and not exists(select * from test2 where test.a=test2.a and test.b>test2.c);
select * from test where exists(select * from test2 where test.a=test2.a and test.b<>test2.c) and test.a > 11;
select * from test where not exists(select * from test2 where test.a=test2.a and test.b<test2.c and test2.a>14) and not exists(select * from test2 where test.a=test2.a and test.b>test2.c and test2.a<10);
select * from test where not exists(select * from test2 where test.a=test2.a and test.b<test2.c and test2.a=12) and not exists(select * from test2 where test.a=test2.a and test.b>test2.c and test2.a=12);
select * from test where exists(select * from test2 where test.a=test2.a and test.b<>test2.c) and test.a < 13;
select a, test.b, c from test, test2 where test.b = test2.b order by c;
select a, test.b, c from test, test2 where test.b=test2.b and test.a-1=test2.c;
select a, (select test.a), c from test, test2 where test.b = test2.b order by c;
select a, test.b, c from test inner join test2 on test.b = test2.b order by c;
select a, test.b, c from test inner join test2 on test2.b = test.b order by c;
select a, test.b, c from test inner join test2 on test2.b = test.b and test.b = 2;
select a, test.b, c from test inner join test2 on test2.b = test.b and 2 = 2 order by c;
select a, test.b, c from test inner join test2 on test.b = 2 order by c;
select a, test.b, c from test inner join test2 on null = 2;
select * from (values (1)) tbl(i) join (values (1)) tbl2(j) on (i=j);
select * from (values (1), (2)) tbl(i) join (values (1), (2)) tbl2(j) on (i=j) where i+j=2;
select count(*) from test2;
select count(*) from test inner join test2 on test.b=test2.b;
select test3.r, test4.r from test3,test4 where test3.r=test4.r order by test3.r, test4.r;
select a, test1.b,c from test1, test2 where test1.b = test2.b order by a, test1.b,c;
select a, test3.b,c from test3, test4 where test3.b = test4.b order by a, test3.b,c ;
select a, test5.b,c from test5, test6 where test5.b = test6.b order by a, test5.b,c;
select a, test7.b,c from test7, test8 where test7.b = test8.b order by a, test7.b,c ;
select test9.r, test10.r from test9,test10 where test9.r=test10.r order by test9.r, test10.r;
select a, test11.b,c from test11, test12 where test11.b = test12.b order by a, test11.b,c;
select cohort_definition_id, subject_id, cohort_start_date, cohort_end_date, op1.observation_period_start_date, op1.observation_period_end_date, tc1.cohort_start_date >= op1.observation_period_start_date as gt_test, tc1.cohort_start_date <= op1.observation_period_end_date as lt_test from main.cohort tc1 inner join main.observation_period op1 on tc1.subject_id = op1.person_id and tc1.cohort_start_date >= op1.observation_period_start_date and tc1.cohort_start_date <= op1.observation_period_end_date where cohort_definition_id in (100);
select count(*), sum(i) from a, (select 100::decimal(4,1) as j) b where i < j;
select count(*), sum(i) from a, (select 100::decimal(8,1) as j) b where i < j;
select count(*), sum(i) from a, (select 100::decimal(12,1) as j) b where i < j;
select count(*), sum(i) from a, (select 100::decimal(18,1) as j) b where i < j;
select count(*) from a, (select 100::decimal(4,1) as j) b where i <= j;
select count(*) from a, (select 100::decimal(8,1) as j) b where i <= j;
select count(*) from a, (select 100::decimal(12,1) as j) b where i <= j;
select count(*) from a, (select 100::decimal(18,1) as j) b where i <= j;
select count(*) from a, (select 1::decimal(4,1) as j) b where i > j;
select count(*) from a, (select 1::decimal(8,1) as j) b where i > j;
select count(*) from a, (select 1::decimal(12,1) as j) b where i > j;
select count(*) from a, (select 1::decimal(18,1) as j) b where i > j;
select count(*) from a, (select 1::decimal(4,1) as j) b where i >= j;
select count(*) from a, (select 1::decimal(8,1) as j) b where i >= j;
select count(*) from a, (select 1::decimal(12,1) as j) b where i >= j;
select count(*) from a, (select 1::decimal(18,1) as j) b where i >= j;
select count(*) from a, (select 1::decimal(4,1) as j) b where i <> j;
select count(*) from a, (select 1::decimal(8,1) as j) b where i <> j;
select count(*) from a, (select 1::decimal(12,1) as j) b where i <> j;
select count(*) from a, (select 1::decimal(18,1) as j) b where i <> j;
select count(*) from a, (select 1::decimal(4,1) as j) b where i <> j and i=j;
select count(*) from a, (select 1::decimal(8,1) as j) b where i <> j and i=j;
select count(*) from a, (select 1::decimal(12,1) as j) b where i <> j and i=j;
select count(*) from a, (select 1::decimal(18,1) as j) b where i <> j and i=j;
select count(*) from a, (select 1::decimal(4,1) as j) b where i = j;
select count(*) from a, (select 1::decimal(8,1) as j) b where i = j;
select count(*) from a, (select 1::decimal(12,1) as j) b where i = j;
select count(*) from a, (select 1::decimal(18,1) as j) b where i = j;
select count(*) from a, (select 1::decimal(4,1) as j) b where i > j and i>120;
select count(*) from a, (select 1::decimal(8,1) as j) b where i > j and i>120;
select count(*) from a, (select 1::decimal(12,1) as j) b where i > j and i>120;
select count(*) from a, (select 1::decimal(18,1) as j) b where i > j and i>120;
select count(*) from a, (select 1::decimal(4,1) as j) b where i <> j and i>120;
select count(*) from a, (select 1::decimal(8,1) as j) b where i <> j and i>120;
select count(*) from a, (select 1::decimal(12,1) as j) b where i <> j and i>120;
select count(*) from a, (select 1::decimal(18,1) as j) b where i <> j and i>120;
select count(*) from a, (select 1::decimal(4,1) as j) b where i = j and i>120;
select count(*) from a, (select 1::decimal(8,1) as j) b where i = j and i>120;
select count(*) from a, (select 1::decimal(12,1) as j) b where i = j and i>120;
select count(*) from a, (select 1::decimal(18,1) as j) b where i = j and i>120;
select count(*) from a, (select 2000 as j) b where i < j;
select count(*) from a, (select 2000 as j) b where i <= j;
select count(*) from a, (select 1 as j) b where i > j;
select count(*) from a, (select 1 as j) b where i >= j;
select test.b, test2.b from test, test2 where test.b<test2.b;
select test.b, test2.b from test, test2 where test.b <= test2.b order by 1,2;
select test.a, test.b, test2.b, test2.c from test, test2 where test.a>test2.c and test.b <= test2.b;
select test.b, test2.b from test, test2 where test.b <> test2.b order by test.b, test2.b;
select test.b, test2.b from test, test2 where test.b <> test2.b and test.b <> 1 and test2.b <> 2 order by test.b, test2.b;
select count(*) from a,b where i <> j;
select count(*) from test inner join test2 on test.b<>test2.b;
select * from t1 join t2 using (b) join t3 using (c) order by 1, 2, 3, 4;
select * from t1 join t2 using (b, c) join t3 using (d, e);
select * from t1 join t2 using(a) join t2 t2b using (a) order by 1, 2, 3, 4, 5, 6, 7;
select t2.a, t2.b, t2.c from t1 join t2 using(a) order by t2.b;
select t2.a, t2.b, t2.c from t1 join t2 using(b) order by t2.c;
select t2.a, t2.b, t2.c from t1 join t2 using(a,b);
select t2.a, t2.b, t2.c from t1 join t2 using(a,b,c);
select a+1 from t1 join t2 using(a) order by a;
select * from t1 join t2 using(a,b);
select * from (select null::varchar as b) sq1, (select 'asdf' as b) sq2 where sq1.b = sq2.b;
select * from (select 42 as a, null::varchar as b) sq1, (select 42 as a, 'asdf' as b) sq2 where sq1.b <> sq2.b;
select * from (select 42 as a, null::varchar as b) sq1, (select 42 as a, 'asdf' as b) sq2 where sq1.a=sq2.a and sq1.b <> sq2.b;
select * from (select 42 as a, 'asdf' as b) sq2, (select 42 as a, null::varchar as b) sq1 where sq1.b <> sq2.b;
select * from (select 42 as a, 'asdf' as b) sq2, (select 42 as a, null::varchar as b) sq1 where sq1.a=sq2.a and sq1.b <> sq2.b;
select * from t1 left join t2 on t1.id = t2.id;
select * from t1 left join t2 on t1.id > t2.id;
select * from t1 left join t2 on t1.id <> t2.id;
select * from t1 left join t2 on t1.id = t2.id order by 1, 2;
select * from integers left outer join integers2 on integers.i=integers2.k order by i;
select * from integers2 right outer join integers on integers.i=integers2.k order by i;
select * from integers left outer join integers2 on integers.i=integers2.k where k is not null order by i;
select * from integers left outer join integers2 on integers.i=integers2.k and integers2.k is not null order by i;
select * from integers left outer join integers2 on i=1 order by i, k;
select * from integers left outer join integers2 on 1=1 order by i, k;
select * from integers left outer join (select * from integers2 where 1<>1) tbl2 on 1=2 order by i;
select * from integers left outer join integers2 on 1=2 order by i;
select * from integers left outer join integers2 on null<>null order by i;
select * from integers left outer join integers2 on l=20 order by i, k;
select * from integers left outer join integers2 on l>0 order by i, k;
select * from integers left outer join integers2 on i=1 or l=20 order by i, k;
select * from integers left outer join integers2 on i=4 or l=17 order by i;
select * from integers left outer join integers2 on i+l=21 order by i;
select * from integers left outer join integers2 on i+l>12 order by i, k;
select * from integers left outer join integers2 on integers.i<integers2.k where integers.i <= 2 order by i;
select * from integers left outer join integers2 on integers.i<integers2.k and integers.i<integers2.l where integers.i <= 2 order by i;
select * from integers left outer join (select * from integers2 where k=100) integers2 on integers.i<integers2.k order by i;
select * from (values(1), (2)) t1(i) left join (values (2), (3)) t2(i) on t1.i=t2.i and t1.i+t2.i=4 order by 1, 2;
select count(*) from a where i > any((select 1::decimal(4,1)));
select count(*) from a where i > any((select 1::decimal(8,1)));
select count(*) from a where i > any((select 1::decimal(12,1)));
select count(*) from a where i > any((select 1::decimal(18,1)));
select count(*) from a where i >= any((select 1::decimal(4,1)));
select count(*) from a where i >= any((select 1::decimal(8,1)));
select count(*) from a where i >= any((select 1::decimal(12,1)));
select count(*) from a where i >= any((select 1::decimal(18,1)));
select count(*) from a where i < any((select 100::decimal(4,1)));
select count(*) from a where i < any((select 100::decimal(8,1)));
select count(*) from a where i < any((select 100::decimal(12,1)));
select count(*) from a where i < any((select 100::decimal(18,1)));
select count(*) from a where i <= any((select 100::decimal(4,1)));
select count(*) from a where i <= any((select 100::decimal(8,1)));
select count(*) from a where i <= any((select 100::decimal(12,1)));
select count(*) from a where i <= any((select 100::decimal(18,1)));
select count(*) from a where i = any((select 1::decimal(4,1)));
select count(*) from a where i = any((select 1::decimal(8,1)));
select count(*) from a where i = any((select 1::decimal(12,1)));
select count(*) from a where i = any((select 1::decimal(18,1)));
select count(*) from a where i <> any((select 1::decimal(4,1)));
select count(*) from a where i <> any((select 1::decimal(8,1)));
select count(*) from a where i <> any((select 1::decimal(12,1)));
select count(*) from a where i <> any((select 1::decimal(18,1)));
select count(*) from (select * from a where i % 2 = 0) a where i > any((select 2::decimal(4,1)));
select count(*) from (select * from a where i % 2 = 0) a where i > any((select 2::decimal(8,1)));
select count(*) from (select * from a where i % 2 = 0) a where i > any((select 2::decimal(12,1)));
select count(*) from (select * from a where i % 2 = 0) a where i > any((select 2::decimal(18,1)));
select count(*) from (select * from a where i % 2 = 0) a where i >= any((select 2::decimal(4,1)));
select count(*) from (select * from a where i % 2 = 0) a where i >= any((select 2::decimal(8,1)));
select count(*) from (select * from a where i % 2 = 0) a where i >= any((select 2::decimal(12,1)));
select count(*) from (select * from a where i % 2 = 0) a where i >= any((select 2::decimal(18,1)));
select count(*) from (select * from a where i % 2 = 0) a where i < any((select 100::decimal(4,1)));
select count(*) from (select * from a where i % 2 = 0) a where i < any((select 100::decimal(8,1)));
select count(*) from (select * from a where i % 2 = 0) a where i < any((select 100::decimal(12,1)));
select count(*) from (select * from a where i % 2 = 0) a where i < any((select 100::decimal(18,1)));
select count(*) from (select * from a where i % 2 = 0) a where i <= any((select 100::decimal(4,1)));
select count(*) from (select * from a where i % 2 = 0) a where i <= any((select 100::decimal(8,1)));
select count(*) from (select * from a where i % 2 = 0) a where i <= any((select 100::decimal(12,1)));
select count(*) from (select * from a where i % 2 = 0) a where i <= any((select 100::decimal(18,1)));
select * from (select * from a where i % 2 = 0) a where i = any((select 2::decimal(4,1)));
select * from (select * from a where i % 2 = 0) a where i = any((select 2::decimal(8,1)));
select * from (select * from a where i % 2 = 0) a where i = any((select 2::decimal(12,1)));
select * from (select * from a where i % 2 = 0) a where i = any((select 2::decimal(18,1)));
select count(*) from (select * from a where i % 2 = 0) a where i <> any((select 2::decimal(4,1)));
select count(*) from (select * from a where i % 2 = 0) a where i <> any((select 2::decimal(8,1)));
select count(*) from (select * from a where i % 2 = 0) a where i <> any((select 2::decimal(12,1)));
select count(*) from (select * from a where i % 2 = 0) a where i <> any((select 2::decimal(18,1)));
select * from (select * from a where i % 2 = 0) a where i <= any((select 10::smallint)) order by 1;
select * from (select * from a where i % 2 = 0) a where i <= any((select 10::integer)) order by 1;
select * from (select * from a where i % 2 = 0) a where i <= any((select 10::bigint)) order by 1;
select * from (select * from a where i % 2 = 0) a where i <= any((select 10::hugeint)) order by 1;
select * from (select * from a where i % 2 = 0) a where i <= any((select 10::float)) order by 1;
select * from (select * from a where i % 2 = 0) a where i <= any((select 10::double)) order by 1;
select * from (select * from a where i % 2 = 0) a where i >= any((select 90::decimal(4,1))) order by 1;
select * from (select * from a where i % 2 = 0) a where i >= any((select 90::decimal(8,1))) order by 1;
select * from (select * from a where i % 2 = 0) a where i >= any((select 90::decimal(12,1))) order by 1;
select * from (select * from a where i % 2 = 0) a where i >= any((select 90::decimal(18,1))) order by 1;
select * from (select * from a where i > 90) a where i <> any((select 96::decimal(4,1))) order by 1;
select * from (select * from a where i > 90) a where i <> any((select 96::decimal(8,1))) order by 1;
select * from (select * from a where i > 90) a where i <> any((select 96::decimal(12,1))) order by 1;
select * from (select * from a where i > 90) a where i <> any((select 96::decimal(18,1))) order by 1;
select max('a') from t0 join t1 on ((t0.c0)<=(((null)-(t1.rowid))));
select max('a') from t0 right join t1 on ((t0.c0)<=(((null)-(t1.rowid))));
select integers.*, integers2.* from integers2 right outer join integers on integers.i=integers2.k order by i;
select integers.*, integers2.* from integers2 right outer join integers on integers.i=integers2.k where k is not null order by i;
select integers.*, integers2.* from integers2 right outer join integers on integers.i=integers2.k and integers2.k is not null order by i;
select integers.*, integers2.* from integers2 right outer join integers on i=1 order by i, k;
select integers.*, integers2.* from integers2 right outer join integers on 1=1 order by i, k;
select integers.*, integers2.* from integers2 right outer join integers on 1=2 order by i;
select integers.*, integers2.* from integers2 right outer join integers on null<>null order by i;
select integers.*, integers2.* from integers2 right outer join integers on l=20 order by i, k;
select integers.*, integers2.* from integers2 right outer join integers on l>0 order by i, k;
select integers.*, integers2.* from integers2 right outer join integers on i=1 or l=20 order by i, k;
select integers.*, integers2.* from integers2 right outer join integers on i=4 or l=17 order by i;
select integers.*, integers2.* from integers2 right outer join integers on i+l=21 order by i;
select integers.*, integers2.* from integers2 right outer join integers on i+l>12 order by i, k;
select integers.*, integers2.* from integers2 right outer join integers on integers.i<integers2.k where integers.i <= 2 order by i;
select integers.*, integers2.* from integers2 right outer join integers on integers.i<integers2.k and integers.i<integers2.l where integers.i <= 2 order by i;
select integers.*, integers2.* from (select * from integers2 where k=100) integers2 right outer join integers on integers.i<integers2.k order by i;
select t1.*, t2.* from (values (2), (3)) t2(i) right join (values(1), (2)) t1(i) on t1.i=t2.i and t1.i+t2.i=4 order by 1, 2;
select * from test join test2 on test.a+test2.c=test.b+test2.b;
select * from test left join test2 on test.a+test2.c=test.b+test2.b order by 1;
select * from test right join test2 on test.a+test2.c=test.b+test2.b order by 1;
select * from test full outer join test2 on test.a+test2.c=test.b+test2.b order by 1;
select count(*), count(s), count(distinct s), count(distinct structs.id) from structs;
select count(*), count(s), count(distinct s), count(distinct structs.id) from structs where id%2<>0;
select count(*), count(s), count(distinct s), count(distinct structs.id) from structs join other_table using (id);
select count(*), count(s), count(distinct s), count(distinct structs.id) from structs left join other_table using (id);
with lhs(i, j, k) as (values (100, 10, 1), (200, 20, 2) ), rhs(p, q, r) as (values (100, 10, 1), (200, 20, 2) ) select lhs.*, rhs.* from lhs, rhs where i <= p and k >= r and j <= q order by i;
select * from wide;
select z from limits;
select i, z from wide, limits where c0 < z and c1 < z and c2 < z and c3 < z and c4 < z and c5 < z and c6 < z and c7 < z and c8 < z and c9 < z order by 1, 2;
select * from wide_nulls;
select * from limits_nulls;
select i, z from wide_nulls, limits_nulls where c0 < z and c1 < z and c2 < z and c3 < z and c4 < z and c5 < z and c6 < z and c7 < z and c8 < z and c9 < z order by 1, 2;
select i, z from wide, limits where z between c8 and c9 order by 1, 2;
select i, z from wide_nulls, limits_nulls where z between c8 and c9 order by 1, 2;
select i, z from wide, limits where z not between c8 and c9 order by 1, 2;
select i, z from wide_nulls, limits_nulls where z not between c8 and c9 order by 1, 2;
select count(*) from many_values, many_bounds where val between lo and hi;
select * from (select sum(i) as x from integers) a, (select sum(i) as x from integers) b where a.x=b.x;
select lhs.*, rhs.* from list_int lhs, list_int rhs where lhs.i2 = rhs.i2 and lhs.l3 <> rhs.l3 order by lhs.i, rhs.i;
select lhs.*, rhs.* from list_int lhs, list_int rhs where lhs.i2 = rhs.i2 and lhs.l3 <= rhs.l3 order by lhs.i, rhs.i;
select lhs.*, rhs.* from list_int lhs, list_int rhs where lhs.i2 = rhs.i2 and lhs.l3 < rhs.l3 order by lhs.i, rhs.i;
select lhs.*, rhs.* from list_int lhs, list_int rhs where lhs.i2 = rhs.i2 and lhs.l3 >= rhs.l3 order by lhs.i, rhs.i;
select lhs.*, rhs.* from list_int lhs, list_int rhs where lhs.i2 = rhs.i2 and lhs.l3 > rhs.l3 order by lhs.i, rhs.i;
select i, pk, fk from intlistdim, intlists where pk = fk order by i;
select i, pk, fk from intlistdim left outer join intlists on intlistdim.pk=intlists.fk order by i;
select i, pk, fk from intlists right outer join intlistdim on intlistdim.pk=intlists.fk order by i;
select i, pk, fk from intlistdim full outer join intlists on intlistdim.pk=intlists.fk order by i;
select i, pk, fk from strlistdim, strlists where pk = fk order by i;
select i, pk, fk from strlistdim left outer join strlists on strlistdim.pk=strlists.fk order by i;
select i, pk, fk from strlists right outer join strlistdim on strlistdim.pk=strlists.fk order by i;
select i, pk, fk from strlistdim full outer join strlists on strlistdim.pk=strlists.fk order by i;
select i, pk, fk from structdim, structs where pk = fk order by i;
select i, pk, fk from structdim left outer join structs on structdim.pk=structs.fk order by i;
select i, pk, fk from structs right outer join structdim on structdim.pk=structs.fk order by i;
select i, pk, fk from structdim full outer join structs on structdim.pk=structs.fk order by i;
select i, pk, fk from struct_lint_lstr_dim, struct_lint_lstr where pk = fk order by i;
select i, pk, fk from struct_lint_lstr_dim left outer join struct_lint_lstr on struct_lint_lstr_dim.pk = struct_lint_lstr.fk order by i;
select i, pk, fk from struct_lint_lstr right outer join struct_lint_lstr_dim on struct_lint_lstr_dim.pk = struct_lint_lstr.fk order by i;
select i, pk, fk from struct_lint_lstr_dim full outer join struct_lint_lstr on struct_lint_lstr_dim.pk=struct_lint_lstr.fk order by i;
select i, pk, fk from r2l3r4l5i4i2l3v_dim, r2l3r4l5i4i2l3v where fk = pk order by i;
select i, pk, fk from r2l3r4l5i4i2l3v_dim left outer join r2l3r4l5i4i2l3v on r2l3r4l5i4i2l3v_dim.pk = r2l3r4l5i4i2l3v.fk order by i;
select i, pk, fk from r2l3r4l5i4i2l3v_dim right outer join r2l3r4l5i4i2l3v on r2l3r4l5i4i2l3v_dim.pk = r2l3r4l5i4i2l3v.fk order by i;
select i, pk, fk from r2l3r4l5i4i2l3v_dim full outer join r2l3r4l5i4i2l3v on r2l3r4l5i4i2l3v_dim.pk = r2l3r4l5i4i2l3v.fk order by i;
select i, pk, fk from longlists_dim, longlists where fk = pk order by 1, 2, 3;
select i, pk, fk from longlists_dim left outer join longlists on longlists.fk = longlists_dim.pk order by 1, 2, 3;
select i, pk, fk from longlists_dim right outer join longlists on longlists.fk = longlists_dim.pk order by 1, 2, 3;
select i, pk, fk from longlists_dim full outer join longlists on longlists.fk = longlists_dim.pk order by 1, 2, 3;
select * from ( (select [1,2,3] a from range(3))) tbl(i) join ((select [1,2,3] a from range(3))) tbl2(j) on (i=j);
select * from ( (select {'x': 1, 'y': 2, 'z': 3} a from range(3))) tbl(i) join ((select {'x': 1, 'y': 2, 'z': 3} a from range(3))) tbl2(j) on (i=j);
select pk, p from intlists order by pk;
select fk, pk, p from integers, intlists where fk = pk order by fk, pk;
select fk, pk, p from integers left outer join intlists on integers.fk=intlists.pk order by fk, pk;
select fk, pk, p from integers left outer join intlists on integers.fk=intlists.pk where pk < 5 and fk > 1 order by fk, pk;
select fk, pk, p from intlists right outer join integers on integers.fk=intlists.pk order by fk, pk;
select fk, pk, p from integers full outer join intlists on integers.fk=intlists.pk order by fk, pk;
select fk, pk, p from integers, strlists where fk = pk order by fk;
select fk, pk, p from integers left outer join strlists on integers.fk=strlists.pk order by fk;
select fk, pk, p from integers left outer join strlists on integers.fk=strlists.pk where pk < 5 and fk > 1 order by fk;
select fk, pk, p from strlists right outer join integers on integers.fk=strlists.pk order by fk;
select fk, pk, p from integers full outer join strlists on integers.fk=strlists.pk order by fk, pk;
select pk, p from structs order by pk;
select fk, pk, p from integers, structs where fk = pk order by fk, pk;
select fk, pk, p from integers left outer join structs on integers.fk=structs.pk order by fk, pk;
select fk, pk, p from integers left outer join structs on integers.fk=structs.pk where pk < 5 and fk > 1 order by fk, pk;
select fk, pk, p from structs right outer join integers on integers.fk=structs.pk order by fk, pk;
select fk, pk, p from integers full outer join structs on integers.fk=structs.pk order by fk, pk;
select fk, pk, p from integers, struct_lint_lstr where fk = pk order by fk, pk;
select fk, pk, p from integers left outer join struct_lint_lstr on integers.fk=struct_lint_lstr.pk order by fk, pk;
select fk, pk, p from integers left outer join struct_lint_lstr on integers.fk=struct_lint_lstr.pk where pk < 5 and fk > 1 order by fk, pk;
select fk, pk, p from struct_lint_lstr right outer join integers on integers.fk=struct_lint_lstr.pk order by fk, pk;
select fk, pk, p from integers full outer join struct_lint_lstr on integers.fk=struct_lint_lstr.pk order by fk, pk;
select fk, pk, p from integers, r2l3r4l5i4i2l3v where fk = pk order by fk, pk;
select fk, pk, p from integers left outer join r2l3r4l5i4i2l3v on integers.fk=r2l3r4l5i4i2l3v.pk order by fk, pk;
select fk, pk, p from integers left outer join r2l3r4l5i4i2l3v on integers.fk=r2l3r4l5i4i2l3v.pk where pk < 5 and fk > 1 order by fk, pk;
select fk, pk, p from r2l3r4l5i4i2l3v right outer join integers on integers.fk=r2l3r4l5i4i2l3v.pk order by fk, pk;
select fk, pk, p from integers full outer join r2l3r4l5i4i2l3v on integers.fk=r2l3r4l5i4i2l3v.pk order by fk, pk;
select pk, p from longlists order by pk;
select fk, pk, p from integers, longlists where fk = pk order by fk, pk;
select fk, pk, p from integers left outer join longlists on integers.fk=longlists.pk order by fk, pk;
select fk, pk, p from integers left outer join longlists on integers.fk=longlists.pk where pk < 5 and fk > 1 order by fk, pk;
select fk, pk, p from longlists right outer join integers on integers.fk=longlists.pk order by fk, pk;
select fk, pk, p from integers full outer join longlists on integers.fk=longlists.pk order by fk, pk;
select t1.i, t1.s1, t1.s2, t2.s1, t2.s2 from test1 t1, test2 t2 where t1.i = t2.i;
select len(json) from j2;
select * from read_json_objects('data/json/example.ndjson');
select * from read_ndjson_objects('data/json/example.ndjson');
select json_array_length(j) from test;
select json_array_length(j, '$[1]') from test;
select json_array_length('[1,2,3,4]');
select json_array_length('[1,2,3,4]', '$');
select json_array_length('[1,2,3,4]', '$[2]');
select json_array_length('{"one":[1,2,3]}');
select json_array_length('{"one":[1,2,3]}', '$.one');
select json_array_length('{"one":[1,2,3]}', '$.two');
select json_quote({n: 42});
select to_json({n: 42});
select json_object('duck', 42);
select json_object('duck', '{"goose": [1, 2, 3, 4, 5, 6, 7]}'::json);
select json_object('nested', {duck: 42});
select json_object('nested', [{duck: 42}, null]);
select json_object('nested', map(['duck'], [42]));
select json_object('nested', map(['duck', 'goose'], [42, 7]));
select json_object('nested', map([0, 'goose'], [42, 7]));
select json_object('nested', map(['duck', 'goose'], [null, 7]));
select json_object('nested', [1, 2, 3]);
select json_object('nested', {nested2: [1, 2, 3]});
select json_object('nested', [{nested2: 1}, {nested2: 2}, {nested2: 3}]);
select json_array(a, b, c, d, e) from test;
select json_object(a, a, b, b, c, c, d, d, e, e) from test;
select json_quote(map(list(a), list(b))) from test;
select json_quote(map(list(b), list(c))) from test;
select json_quote(map(list(c), list(d))) from test;
select json_quote(map(list(c), list(e))) from test;
select row_to_json({a: 42});
select row_to_json(null);
select array_to_json([42]);
select array_to_json(null);
select json_array(1,json_object('abc',2.5,'def',null,'ghi','hello'),99);
select json_object('a',1,'b',2.5,'c',null,'d','string test');
select json_array(1,2.5,null,'hello');
select json_array(1,'{"abc":2.5,"def":null,"ghi":hello}',99);
select json_array(1,json_quote('{"abc":2.5,"def":null,"ghi":"hello"}'),99);
select json_object('ex','[52,3.14159]');
select json_object('ex','[52,3.14159]'::json);
select json_object('ex',json_array(52,3.14159));
select json_object('a',2,'c',4);
select json_object('a',2,'c','{e:5}');
select json_object('a',2,'c',json_object('e',5));
select json_array(1,2,'3',4);
select json_array('[1,2]');
select json_array(json_array(1,2));
select json_array(1,null,'3','[4,5]','{"six":7.7}');
select json_array(1,null,'3','[4,5]'::json,'{"six":7.7}'::json);
select json_array( -9223372036854775808,9223372036854775807,0,1,-1, 0.0, 1.0, -1.0, -1e99, +2e100, 'one','two','three', 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, null, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 'abcdefghijklmnopqrstuvwyxzabcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwyxzabcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwyxzabcdefghijklmnopqrstuvwxyz', 99);
select json_extract('{"my_field": "duck"}', '$.my_field');
select json_extract('[0, 1, 2]', '$[1]');
select json_extract('[[1]]', '$[0][0]');
select json_extract(j, '$.my_field.my_nested_field[0]') from test;
select json_extract(j, '$.my_field.my_nested_field[#-1]') from test;
select json_extract(j, '$.my_field.my_nested_field[#-2]') from test;
select json_extract(j, '$.my_field.my_nested_field[#-3]') from test;
select json_extract(j, '$.my_field.my_nested_field[#]') from test;
select json_extract(j, q) from test;
select json_extract('{"my_field": [{"my_nested_field": ["duck", "goose"]}]}', '$.my_field[0].my_nested_field[0]');
select json_extract('{"my_field": [{"my_nested_field": ["duck", "goose"]}]}', '$.my_field[#-1].my_nested_field[#-1]');
select json_extract(j, '$.my_field.my_nested_field.3') from test;
select json_extract('{"my_field": {"my_nested_field": ["goose", "duck"]}}', '/my_field/my_nested_field/1');
select json_extract_path('{"my_field": {"my_nested_field": ["goose", "duck"]}}', '/my_field/my_nested_field/1');
select json_extract_string('{"my_field": {"my_nested_field": ["goose", "duck"]}}', '/my_field/my_nested_field/1');
select json_extract_path_text('{"my_field": {"my_nested_field": ["goose", "duck"]}}', '/my_field/my_nested_field/1');
select json_extract('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}', '/my_field/my_nested_field/1');
select json_extract_string('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}', '/my_field/my_nested_field/1');
select json_extract('[1, 2, 42]', 2);
select json_extract_string('[1, 2, 42]', 2);
select json_extract('{"a":2,"c":[4,5,{"f":7}]}', '$');
select json_extract('{"a":2,"c":[4,5,{"f":7}]}', '$.c');
select json_extract('{"a":2,"c":[4,5,{"f":7}]}', '$.c[2]');
select json_extract('{"a":2,"c":[4,5,{"f":7}]}', '$.c[2].f');
select json_extract('{"a":2,"c":[4,5,{"f":7}]}', '$.x');
select json_extract('{"a":2,"c":[4,5],"f":7}', ['$.c','$.a']);
select json_extract('{"a":2,"c":[4,5,{"f":7}]}', ['$.x', '$.a']);
select json_extract(null, ['$.x', '$.a']);
select json_extract(j, '$.b[#]') from t1;
select json_extract(j, '$.b[#-1]') from t1;
select json_extract(j, '$.b[#-2]') from t1;
select json_extract(j, '$.b[#-02]') from t1;
select json_extract(j, '$.b[#-3]') from t1;
select json_extract(j, '$.b[#-4]') from t1;
select json_extract(j, '$.b[#-2][#-1]') from t1;
select json_extract(j, ['$.b[0]', '$.b[#-1]']) from t1;
select json_extract(j, '$.a[#-1]') from t1;
select json_extract(j, '$.b[#-000001]') from t1;
select json_extract(x, '$.b') from obj;
select json_extract(x, '$."b"') from obj;
select json_extract(x, '$.settings.layer2."tris.legomenon"."summary.report"') from t12;
select json_group_array(v) from t1;
select json_group_object(n, v) from t1;
select json_group_object(n, v) from t1 group by n % 2;
select json_group_structure(j) from t2;
select json(' { "this" : "is", "a": [ "test" ] }');
select count(*) from j1 where json_type(x) in ('object','array'); select x from j1 where json_extract(x,'$')<>x and json_type(x) in ('object','array');
select count(*) from j2;
select id, json_valid(json), json_type(json) from j2 order by id;
select json_structure('42');
select json_structure('4.2');
select json_structure('null');
select json_structure('true');
select json_structure('"duck"');
select json_structure('{"a": 42}');
select json_structure('{"a": 4.2}');
select json_structure('{"a": "42"}');
select json_structure('{"a": "looooooooooooooooong"}');
select json_structure('{"a": null}');
select json_structure('{"a": true}');
select json_structure('{"a": []}');
select json_structure('{"a": [42]}');
select json_structure('{"a": {"b": 42}}');
select json_structure('[null,null]');
select json_structure('[true,null,false]');
select json_structure('[true,null,false,1]');
select json_structure('[true,null,false,1,-1]');
select json_structure('[true,null,false,1,-1,0.42]');
select json_structure('[true,null,false,1,-1,0.42,"42"]');
select json_structure('[{"a": 42}, {"a": null}]');
select json_structure('[{"a": 42}, {"b": 4.2}]');
select json_structure('[{"a": [42, null]}, {"a": [7]}]');
select json_structure('[{"a": [{"b": 42}, {"b": null}]}, {"a": [{"b": 7}]}]');
select json_structure('[{"a": [{"b": 42}, {"b": null}]}, {"a": [{"c": 7}]}]');
select json_structure(j) from test;
select from_json('42', '"ubigint"');
select from_json_strict('42', '"ubigint"');
select json_transform('42', '"ubigint"');
select json_transform('4.2', '"double"');
select json_transform('null', '"null"');
select json_transform('true', '"boolean"');
select json_transform('"duck"', '"varchar"');
select json_transform('"duuuuuuuuuuuuuuuuck"', '"varchar"');
select json_transform('{"a": 42}', '{"a":"ubigint"}');
select json_transform('{"a": null}', '{"a":"ubigint"}');
select json_transform('{"a": 42}', '{"a":"null"}');
select json_transform('[1,2,3]', '["ubigint"]');
select json_transform('[1,2,3]', '["null"]');
select json_transform('[{"a": 42}, {"a": null}, {"a": 7}]', '[{"a": "ubigint"}]');
select json_transform('[{"a": 42}, {"a": null, "b": 33}, {"b": 7}]', '[{"a": "ubigint", "b": "ubigint"}]');
select json_transform(j, '{"family": "varchar", "coolness": "ubigint", "species": ["varchar"]}') from test;
select json_transform('{"a": {"duck": 42, "goose": 7}}', '{"a": "json"}');
select json_transform('42', '"smallint"');
select json_transform('42', '"integer"');
select json_transform('42', '"bigint"');
select json_transform('42', '"hugeint"');
select json_transform('42', '"float"');
select json_transform('42', '"double"');
select json_transform('42.42', '"smallint"');
select json_transform('42.42', '"integer"');
select json_transform('42.42', '"bigint"');
select json_transform('42.42', '"hugeint"');
select json_transform('42.42', '"float"');
select json_transform('42.42', '"double"');
select json_transform('"42"', '"smallint"');
select json_transform('"42"', '"integer"');
select json_transform('"42"', '"bigint"');
select json_transform('"42"', '"hugeint"');
select json_transform('"42"', '"float"');
select json_transform('"42"', '"double"');
select json_transform('true', '"smallint"');
select json_transform('true', '"integer"');
select json_transform('true', '"bigint"');
select json_transform('true', '"hugeint"');
select json_transform('true', '"float"');
select json_transform('true', '"double"');
select json_transform('false', '"smallint"');
select json_transform('false', '"integer"');
select json_transform('false', '"bigint"');
select json_transform('false', '"hugeint"');
select json_transform('false', '"float"');
select json_transform('false', '"double"');
select json_transform('[]', '"smallint"');
select json_transform('[]', '"integer"');
select json_transform('[]', '"bigint"');
select json_transform('[]', '"hugeint"');
select json_transform('[]', '"float"');
select json_transform('[]', '"double"');
select json_transform('{}', '"smallint"');
select json_transform('{}', '"integer"');
select json_transform('{}', '"bigint"');
select json_transform('{}', '"hugeint"');
select json_transform('{}', '"float"');
select json_transform('{}', '"double"');
select json_transform('null', '"smallint"');
select json_transform('null', '"integer"');
select json_transform('null', '"bigint"');
select json_transform('null', '"hugeint"');
select json_transform('null', '"float"');
select json_transform('null', '"double"');
select json_transform('-42', '"integer"');
select json_transform('-42', '"uinteger"');
select json_transform('42', '"varchar"');
select json_transform('42', '"json"');
select json_transform('42', '"blob"');
select json_transform('-42', '"varchar"');
select json_transform('42.42', '"varchar"');
select json_transform('true', '"varchar"');
select json_transform('[]', '"varchar"');
select json_transform('{}', '"varchar"');
select json_transform('null', '"varchar"');
select json_transform('42', '"decimal"');
select json_transform('42', '"decimal(2)"');
select json_transform('42', '"decimal(3,1)"');
select json_transform('-42', '"decimal(3,1)"');
select json_transform('"42"', '"decimal(3,1)"');
select json_transform('42.42', '"decimal(4,2)"');
select json_transform('42.42', '"decimal(10,2)"');
select json_transform('42.42', '"decimal(20,2)"');
select json_transform('42.42', '"decimal(38,2)"');
select json_transform('42.42', '"decimal(38,17)"');
select json_transform('true', '"decimal(3,1)"');
select json_transform('false', '"decimal(3,1)"');
select json_transform('null', '"decimal(3,1)"');
select json_transform('42', '"decimal(2,1)"');
select json_transform('[]', '"decimal(2,1)"');
select json_transform('{}', '"decimal(2,1)"');
select json_transform('"a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"', '"uuid"');
select json_transform('42', '"uuid"');
select json_transform('-42', '"uuid"');
select json_transform('42.42', '"uuid"');
select json_transform('true', '"uuid"');
select json_transform('false', '"uuid"');
select json_transform('null', '"uuid"');
select json_transform('"1996-03-27"', '"date"');
select json_transform('"11:59:59"', '"time"');
select json_transform('42', '"date"');
select json_transform('-42', '"date"');
select json_transform('42.42', '"date"');
select json_transform('"42"', '"date"');
select json_transform('null', '"date"');
select json_transform('true', '"date"');
select json_transform('false', '"date"');
select json_transform('[]', '"date"');
select json_transform('{}', '"date"');
select json_transform('"1996-03-27 11:59:59"', '"timestamp"');
select json_transform('"1996-03-27 11:59:59"', '"timestamp_ms"');
select json_transform('"1996-03-27 11:59:59"', '"timestamp_ns"');
select json_transform('"1996-03-27 11:59:59"', '"timestamp_s"');
select json_transform('null', '"timestamp"');
select json_transform('42', '"timestamp"');
select json_type('{"str": 42}');
select json_type('[1, 2, 3]');
select json_type('"other"');
select json_type('42');
select json_type('nan');
select json_type('null');
select json_type(null);
select json_type('{"str": 42}', 'str');
select json_type('{"str": "quack"}', 'str');
select json_type('{"str": "quack"}', 'str2');
select json_type('{"str": "quack"}', null);
select json_type(null, 'str');
select json_type('{"null": nan}', 'null');
select json_type('{"null": infinity}', 'null');
select json_type('{"null": -infinity}', 'null');
select json_type(json, 'str') from test;
select json_type(json, 'int') from test;
select json_type(json, 'double') from test;
select json_type(json, 'bool') from test;
select json_type(json, 'arr') from test;
select json_type(json, '/arr/0') from test;
select json_type(json, '/nested/val') from test;
select json_type(json, ['str', '/nested/val']) from test;
select json_type('{"a":[2,3.5,true,false,null,"x"]}');
select json_type('{"a":[2,3.5,true,false,null,"x"]}','$');
select json_type('{"a":[2,3.5,true,false,null,"x"]}','$.a');
select json_type('{"a":[2,3.5,true,false,null,"x"]}','$.a[0]');
select json_type('{"a":[2,3.5,true,false,null,"x"]}','$.a[1]');
select json_type('{"a":[2,3.5,true,false,null,"x"]}','$.a[2]');
select json_type('{"a":[2,3.5,true,false,null,"x"]}','$.a[3]');
select json_type('{"a":[2,3.5,true,false,null,"x"]}','$.a[4]');
select json_type('{"a":[2,3.5,true,false,null,"x"]}','$.a[5]');
select json_type('{"a":[2,3.5,true,false,null,"x"]}','$.a[6]');
select json_valid('{"bla": inf}');
select json_valid('{"bla": infinity}');
select * from j1 where not json_valid(x);
select json_valid('{"a":55,"b":72,}');
select json_valid('{"a":55,"b":72}');
select json_valid('["a",55,"b",72,]');
select json_valid('["a",55,"b",72]');
select json_valid('" \ "');
select json_valid('" \! "');
select json_valid('" \" "');
select json_valid('" \# "');
select json_valid('" \$ "');
select json_valid('" \% "');
select json_valid('" \& "');
select json_valid('" \' "');
select json_valid('" \( "');
select json_valid('" \) "');
select json_valid('" \* "');
select json_valid('" \+ "');
select json_valid('" \, "');
select json_valid('" \- "');
select json_valid('" \. "');
select json_valid('" \/ "');
select json_valid('" \0 "');
select json_valid('" \1 "');
select json_valid('" \2 "');
select json_valid('" \3 "');
select json_valid('" \4 "');
select json_valid('" \5 "');
select json_valid('" \6 "');
select json_valid('" \7 "');
select json_valid('" \8 "');
select json_valid('" \9 "');
select json_valid('" \: "');
select json_valid('" \; "');
select json_valid('" \< "');
select json_valid('" \= "');
select json_valid('" \> "');
select json_valid('" \? "');
select json_valid('" \@ "');
select json_valid('" \a "');
select json_valid('" \b "');
select json_valid('" \c "');
select json_valid('" \d "');
select json_valid('" \e "');
select json_valid('" \f "');
select json_valid('" \g "');
select json_valid('" \h "');
select json_valid('" \i "');
select json_valid('" \j "');
select json_valid('" \k "');
select json_valid('" \l "');
select json_valid('" \m "');
select json_valid('" \n "');
select json_valid('" \o "');
select json_valid('" \p "');
select json_valid('" \q "');
select json_valid('" \r "');
select json_valid('" \s "');
select json_valid('" \t "');
select json_valid('" \u "');
select json_valid('" \v "');
select json_valid('" \w "');
select json_valid('" \x "');
select json_valid('" \y "');
select json_valid('" \z "');
select json_valid('" \[ "');
select json_valid('" \\ "');
select json_valid('" \] "');
select json_valid('" \^ "');
select json_valid('" \_ "');
select json_valid('" \` "');
select json_valid('" \ua "');
select json_valid('" \uab "');
select json_valid('" \uabc "');
select json_valid('" \uabcd "');
select json_valid('" \ufedc "');
select json_valid('" \u1234 "');
select json_valid('" \{ "');
select json_valid('" \| "');
select json_valid('" \} "');
select json_valid('" \~ "');
select json_valid('{"x":01}');
select json_valid('{"x":-01}');
select json_valid('{"x":0}');
select json_valid('{"x":-0}');
select json_valid('{"x":0.1}');
select json_valid('{"x":-0.1}');
select json_valid('{"x":0.0000}');
select json_valid('{"x":-0.0000}');
select json_valid('{"x":01.5}');
select json_valid('{"x":-01.5}');
select json_valid('{"x":00}');
select json_valid('{"x":-00}');
select `col""umn` from `sch""ema`.`ta""ble`;
select `ta""ble`.`col""umn` from `sch""ema`.`ta""ble`;
select `sch""ema`.`ta""ble`.`col""umn` from `sch""ema`.`ta""ble`;
select `col""umn`.`so""me`.`i""n` from `sch""ema`.`ta""ble`;
select ((`sch""ema`.`ta""ble`.`col""umn`).`so""me`).`i""n` from `sch""ema`.`ta""ble`;
select `sch""ema`.`ta""ble`.`col""umn`['so"me']['i"n'] from `sch""ema`.`ta""ble`;
select `column` from `schema`.`table`;
select `table`.`column` from `schema`.`table`;
select `schema`.`table`.`column` from `schema`.`table`;
select `column`.`some`.`in` from `schema`.`table`;
select `table`.`column`.`some`.`in` from `schema`.`table`;
select `schema`.`table`.`column`.`some`.`in` from `schema`.`table`;
select ((`schema`.`table`.`column`).`some`).`in` from `schema`.`table`;
select `schema`.`table`.`column`['some']['in'] from `schema`.`table`;
select * from (select sum(i) from range(100000000000) tbl(i)) limit 0;
select * from integers limit 5;
select * from integers limit 5 offset 500000;
select * from integers2 where i in (337, 195723, 442578, 994375);
select * from integers2 where i in (337, 195723, 442578, 994375) limit 4;
select count(*), count(), count(i) from integers;
select count(*), count(), sum(i), count(i), sum(i) / count(i) from integers;
select i from integers where (i=1 and i>0) or (i=1 and i<3) order by i;
select i from integers where (i=1) or (i=1) order by i;
select i from integers where (i=1) or (i=1) or (i=1) or (i=1) or (i=1) order by i;
select i from integers where (i is null and i=1) or (i is null and i<10) order by i;
select i from integers where (i is not null and i>1) or (i is not null and i<10) order by i;
select i from integers where (i is null and (i+1) is null) or (i is null and (i+2) is null) order by i;
select i from integers where i=1 or 1=1 order by i;
select i from integers where i=1 or 1=0 or 1=1 order by i;
select i from integers where (i=1 or 1=0 or i=1) and (0=1 or 1=0 or 1=1) order by i;
select (i=1 and i>0) or (i=1 and i<3) from integers order by i;
select (i=1) or (i=1) from integers order by i;
select (i=1) or (i=1) or (i=1) or (i=1) or (i=1) from integers order by i;
select (i is null and i=1) or (i is null and i<10) from integers order by i;
select (i is not null and i>1) or (i is not null and i<10) from integers order by i;
select (i is null and (i+1) is null) or (i is null and (i+2) is null) from integers order by i;
select (a*2)+(a*2) from test;
select (a*2)+(a*2)+(a*2)+(a*2)+(a*2) from test;
select (a*2)+(a*2)+(a*2)+(a*2)+(a*2), a from test;
select sum((a*2)+(a*2)+(a*2)+(a*2)+(a*2)) from test;
select a, sum((a*2)+(a*2)+(a*2)+(a*2)+(a*2)) from test group by a;
select * from test where ((a*2)+(a*2))>100;
select * from test where ((a*2)+(a*2)+(a*2)+(a*2)+(a*2))>400;
select substring(a, 1, 3)=substring(a, 1, 3) from test2 order by 1;
select substring(a, 1, 3)=substring(a, 1, 3) as b from test2 group by b order by b;
select i from test where (i=j) or (i is null and j is null);
select i from test where (i is null and j is null) or (i=j);
select test1.i from test as test1, test as test2 where (test1.i=test2.j) or (test1.i is null and test2.j is null) order by 1;
select i from test where (i=k) or (i is null and j is null);
select i from test where (i=j) or (i is null and j = 1);
select test1.i from test as test1, test as test2 where (test1.i=test2.j) or (test2.i is null and test1.j is null);
select test1.i from test as test1, test as test2 where (test1.i=test2.k) or (test2.i is null and test2.j is null);
select * from vals where v+(1234-10)::smallint=-100::smallint;
select * from vals where v+(1234-10)::integer=-100::integer;
select * from vals where v+(1234-10)::bigint=-100::bigint;
select * from vals where v+(1234-10)::hugeint=-100::hugeint;
select * from vals where v+(1234-10)::float=-100::float;
select * from vals where v+(1234-10)::double=-100::double;
select v+(1234-10)::smallint=-100::smallint from vals;
select v+(1234-10)::integer=-100::integer from vals;
select v+(1234-10)::bigint=-100::bigint from vals;
select v+(1234-10)::hugeint=-100::hugeint from vals;
select v+(1234-10)::float=-100::float from vals;
select v+(1234-10)::double=-100::double from vals;
select * from vals where v-1234::smallint=1234::smallint;
select * from vals where v-1234::integer=1234::integer;
select * from vals where v-1234::bigint=1234::bigint;
select * from vals where v-1234::hugeint=1234::hugeint;
select * from vals where v-1234::float=1234::float;
select * from vals where v-1234::double=1234::double;
select * from vals where (-1234+100)::smallint-v=1234::smallint;
select * from vals where (-1234+100)::integer-v=1234::integer;
select * from vals where (-1234+100)::bigint-v=1234::bigint;
select * from vals where (-1234+100)::hugeint-v=1234::hugeint;
select * from vals where (-1234+100)::float-v=1234::float;
select * from vals where (-1234+100)::double-v=1234::double;
select * from vals where v*0::smallint=1::smallint;
select * from vals where v*0::integer=1::integer;
select * from vals where v*0::bigint=1::bigint;
select * from vals where v*0::hugeint=1::hugeint;
select * from vals where v*0::float=1::float;
select * from vals where v*0::double=1::double;
select * from vals where v*0::smallint=0::smallint;
select * from vals where v*0::integer=0::integer;
select * from vals where v*0::bigint=0::bigint;
select * from vals where v*0::hugeint=0::hugeint;
select * from vals where v*0::float=0::float;
select * from vals where v*0::double=0::double;
select v*0::smallint=0::smallint from vals;
select v*0::integer=0::integer from vals;
select v*0::bigint=0::bigint from vals;
select v*0::hugeint=0::hugeint from vals;
select v*0::float=0::float from vals;
select v*0::double=0::double from vals;
select v*0::smallint=1::smallint from vals;
select v*0::integer=1::integer from vals;
select v*0::bigint=1::bigint from vals;
select v*0::hugeint=1::hugeint from vals;
select v*0::float=1::float from vals;
select v*0::double=1::double from vals;
select * from vals where v*(-1)::smallint=(-1234)::smallint;
select * from vals where v*(-1)::integer=(-1234)::integer;
select * from vals where v*(-1)::bigint=(-1234)::bigint;
select * from vals where v*(-1)::hugeint=(-1234)::hugeint;
select * from vals where v*(-1)::float=(-1234)::float;
select * from vals where v*(-1)::double=(-1234)::double;
select * from vals where v+5::usmallint=3::usmallint;
select v+5::usmallint=3::usmallint from vals;
select * from vals where 5::usmallint+v=3::usmallint;
select * from vals where v+1::usmallint=3::usmallint;
select * from vals where 1::usmallint+v=3::usmallint;
select * from vals where v-2::usmallint=255::usmallint;
select * from vals where 2::usmallint-v=3::usmallint;
select * from vals where v-1::usmallint=1::usmallint;
select * from vals where 4::usmallint-v=2::usmallint;
select * from vals where v*0::usmallint=1::usmallint;
select * from vals where v*0::usmallint=0::usmallint;
select v*0::usmallint=0::usmallint from vals;
select v*0::usmallint=1::usmallint from vals;
select * from vals where v*3::usmallint=7::usmallint;
select v*3::usmallint=7::usmallint from vals;
select * from vals where v*3::usmallint=6::usmallint;
select v*3::usmallint=6::usmallint from vals;
select -v from vals where id>1 order by id;
select a + 0 from test;
select 0 + a from test;
select a - 0 from test;
select 0 - a from test;
select a * 1 from test;
select 1 * a from test;
select a * 0 from test;
select 0 * a from test;
select a / 1 from test;
select 1 / a from test;
select a / 0 from test;
select 0 / a from test;
select rowid * 0 from test;
select 0 / rowid from test;
select * from integers i1, integers i2 where i1.i=i2.i order by 1;
select * from integers i1, integers i2 where i1.i=i2.i and i1.i>1 order by 1;
select * from integers i1, integers i2, integers i3 where i1.i=i2.i and i1.i=i3.i and i1.i>1 order by 1;
select * from integers i1 join integers i2 on i1.i=i2.i where i1.i>1 order by 1;
select * from integers i1 left outer join integers i2 on 1=1 where i1.i>2 order by 2;
select * from integers i1 left outer join integers i2 on 1=0 where i2.i is not null order by 2;
select * from integers i1 left outer join integers i2 on 1=0 where i2.i>1 order by 2;
select * from integers i1 left outer join integers i2 on 1=0 where case when i2.i is null then false else true end order by 2;
select distinct * from integers i1 left outer join integers i2 on 1=0 where i2.i is null order by 1;
select * from integers i1 left outer join integers i2 on 1=1 where i1.i=i2.i order by 1;
select * from integers where i in ((select * from integers)) order by i;
select * from integers where i not in ((select * from integers where i=1)) order by i;
select * from integers where i in ((select * from integers)) and i<3 order by i;
select * from integers i1, integers i2 where i1.i in ((select * from integers)) and i1.i=i2.i order by 1;
select * from integers i1 where exists(select i from integers where i=i1.i) order by i1.i;
select * from integers i1 where not exists(select i from integers where i=i1.i) order by i1.i;
select * from integers i1, integers i2 where i1.i=(select i from integers where i1.i=i) and i1.i=i2.i order by i1.i;
select * from (select i1.i as a, i2.i as b from integers i1, integers i2) a1 where a=b order by 1;
select * from (select i1.i=i2.i as cond from integers i1, integers i2) a1 where cond order by 1;
select * from (select distinct i1.i as a, i2.i as b from integers i1, integers i2) res where a=1 and b=3;
select * from (select * from integers i1 union select * from integers i2) a where i=3;
select * from (select i1.i as a, i2.i as b, row_number() over (order by i1.i, i2.i) from integers i1, integers i2 where i1.i is not null and i2.i is not null) a1 where a=b order by 1;
select * from (select 0=1 as cond from integers i1, integers i2) a1 where cond order by 1;
select * from (select 0=1 as cond from integers i1, integers i2 group by 1) a1 where cond order by 1;
select i, k from (select i, k from vals1, vals2) tbl1 where i=k and i<5 order by i;
select i, k from (select distinct i, k from vals1, vals2) tbl1 where i=k and i<5 order by i;
select i, k, sum(j) from vals1, vals2 group by i, k having i=k and i<5 order by i;
select i, k, sum(j) from (select * from vals1, vals2) tbl1 group by i, k having i=k and i<5 order by i;
select i, k, sum from (select i, k, sum(j) as sum from vals1, vals2 group by i, k) tbl1 where i=k and i<5 order by i;
select * from vals1 left outer join vals2 on 1=1 where i=k and k=5;
select * from vals1 left outer join vals2 on 1=1 where i=k order by i limit 5;
select * from (select * from vals1, vals2 where j=5 and l=5) tbl1 left outer join (select * from vals1, vals2) tbl2 on tbl1.i=tbl2.i and tbl1.k=tbl2.k where tbl2.j=5 and tbl2.l=5;
select * from (select * from vals1, vals2) tbl1 left outer join (select * from vals1, vals2 where i=5 and k=10) tbl2 on tbl1.i=tbl2.i and tbl1.k=tbl2.k where tbl1.i=5 and tbl1.k=10;
select * from (select * from vals1, vals2 where i=5 and k=5) tbl1 left outer join (select * from vals1, vals2) tbl2 on tbl2.i=5 and tbl2.k=5;
select * from (select * from vals1, vals2 where i=5 and k=5) tbl1 left outer join (select * from vals1, vals2) tbl2 on tbl2.i>10000 and tbl2.k=5;
select * from (select * from vals1, vals2) tbl1 left outer join (select * from vals1, vals2) tbl2 on tbl1.i=tbl2.i and tbl1.k=tbl2.k where tbl1.i=5 and tbl1.k=10;
select * from (select * from vals1, vals2) tbl1 left outer join (select * from vals1, vals2) tbl2 on tbl1.i=tbl2.i and tbl1.k=tbl2.k where tbl1.i>4 and tbl1.i<6 and tbl1.k=10;
select * from (select * from vals1, vals2 union select * from vals1, vals2) tbl1 where i=3 and k=5;
select * from (select * from vals1, vals2 except select * from vals1, vals2) tbl1 where i=3 and k=5;
select * from (select * from vals1, vals2 except select * from vals1, vals2 where i<>1) tbl1 where i<5 and k<5 order by 1, 2, 3, 4;
select * from (select * from vals1, vals2 intersect select * from vals1, vals2) tbl1 where i=3 and k=5;
select * from (select 0=1 as cond from vals1, vals2) a1 where cond order by 1;
select * from (select 1 as a from vals1, vals2) a1 where a=0 order by 1;
select * from (select 0=1 as cond from vals1, vals2 group by 1) a1 where cond order by 1;
select * from (select 1 as a from vals1, vals2 group by a) a1 where a=0 order by 1;
select count(*) from (select * from vals1, vals2) tbl1, (select * from vals1, vals2) tbl2 where tbl1.i=tbl1.k and tbl1.i=tbl2.k and tbl1.i=tbl2.i and tbl1.i=5000;
select count(*) from (select * from vals1, vals2) tbl1, (select * from vals1, vals2) tbl2 where tbl1.i=tbl1.k and tbl1.i=tbl2.k and tbl1.i=tbl2.i and tbl1.i>4999 and tbl1.i<5001;
select count(*) from (select * from vals1, vals2) tbl1, (select * from vals1, vals2) tbl2 where tbl1.i=5000 and tbl1.i<>5000;
select count(*) from (select * from vals1, vals2) tbl1, (select * from vals1, vals2) tbl2 where tbl1.i=5000 and tbl1.i=tbl2.i and tbl2.i<>5000;
select count(*) from (select * from vals1, vals2) tbl1, (select * from vals1, vals2) tbl2 where tbl1.i=5000 and tbl1.i=tbl2.i and tbl1.i=tbl2.k and tbl1.i=tbl1.k and tbl2.i<>5001;
select count(*) from (select * from vals1, vals2) tbl1, (select * from vals1, vals2) tbl2 where tbl2.i>10 and tbl1.k>=500 and tbl2.k<7000 and tbl2.k<=6000 and tbl2.k<>8000 and tbl1.i<>4000 and tbl1.i=tbl2.i and tbl1.i=tbl2.k and tbl1.i=tbl1.k and tbl1.i=5000;
select j from integers where j = 99;
select j from integers where j = 99 and i=99;
select j from integers where j = 99 and i=90;
select count(i) from integers where j > 90 and i < 95;
select count(i) from integers where j > 90 and j < 95;
select count(*) from test, test2 where test.b = test2.b;
select sum(test.a), min(test.a), max(test.a) from test, test2 where test.b = test2.b;
select count(*) from test a1, test a2, test a3 where a1.b=a2.b and a2.b=a3.b;
select sum(a1.a) from test a1, test a2, test a3 where a1.b=a2.b and a2.b=a3.b;
select count(*) from test a1, test a2, test a3 where a1.b=a2.b and a2.b=a3.b and a1.a=11 and a2.a=11 and a3.a=11;
select (true or a1.a=a2.b) from test a1, test a2 where a1.a=11 and a2.a>=10;
select * from t where i in ('1','2','y');
select x::varchar in ('1', y) from (values (1, 2), (2, 3)) tbl(x, y);
select x::bigint in (1::bigint, y) from (values (1::integer, 2::bigint), (2::integer, 3::bigint)) tbl(x, y);
select * from test order by a desc;
select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k limit 2;
select count(*) from (select i, j, k, l from integers full outer join integers2 on integers.i=integers2.k limit 2) tbl;
select * from generate_series(0, 10000, 1) tbl(i) order by i desc limit 5;
select * from range(5) union all select * from range(5) limit 7;
select count(*) from (select * from range(5) union all select * from range(5) limit 7) tbl;
select a from test limit 1;
select a from test limit 20 %;
select a from test limit 40 percent;
select a from test limit 35%;
select a from test limit 79.9%;
select a from test limit 80.1%;
select a from test limit 101.1 percent;
select a from test limit 50% offset 2;
select * from range(10) limit 50% offset 2;
select * from range(10000) limit 0.1% offset 8000;
select * from range(10000) limit 0.1% offset 9999;
select count(*) from (select * from (select * from (select * from range(1000000) limit 10%) limit 10%) limit 10%);
select * from range(10) union all select * from range(10, 20) limit 10%;
select * from range(1000000) limit 0.0001%;
select g, 5=any(l) from v3 order by g limit 80%;
select g, 3>any(l) from v3 order by g limit 50%;
select struct_pack(a := 42, b := 43);
select e, struct_pack(e) from struct_data order by e limit 60%;
select * from integers order by i nulls first;
select * from integers order by i nulls last;
select 10 as j, i from integers order by j, i nulls last;
select * from test order by i nulls first, j nulls last;
select * from test order by i nulls first, j nulls first;
select * from test order by i nulls last, j nulls first;
select i, j, row_number() over (partition by i order by j nulls first) from test order by i nulls first, j nulls first;
select i, j, row_number() over (partition by i order by j nulls last) from test order by i nulls first, j nulls first;
select * from test order by i nulls first, j nulls last limit 2;
select * from test order by i nulls last, j nulls last limit 2;
select b from test order by a desc;
select a, b from test order by a;
select a, b from test order by a desc;
select a, b from test order by b, a;
select a, b from test order by 2, 1;
select a, b from test order by b desc, a;
select a, b from test order by b, a desc;
select a, b from test order by b, a desc limit 1;
select a, b from test order by b, a desc limit 1 offset 1;
select a, b from test where a < 13 order by b;
select a, b from test where a < 13 order by 2;
select a, b from test where a < 13 order by b desc;
select b, a from test where a < 13 order by b desc;
select b % 2 as f, sum(a) from test group by f order by b % 2;
select b % 2 as f, a from test order by b % 2, a;
select b % 2 as f, sum(a) from test group by f order by 1;
select a-10 as k from test union select a-10 as l from test order by k;
select a-10 as k from test union select a-10 as l from test order by l;
select a-10 as k from test union select a-10 as l from test order by a-10;
select a-10 as k from test union select a-11 as l from test order by a-11;
select a from test order by 'hello', a;
select a as k, b from test union select a as k, b from test order by k;
select a % 2, b from test union select a % 2 as k, b from test order by a % 2;
select * from test order by a;
select * from test0 order by i;
select * from test0 order by i desc;
select * from test0 order by i nulls last;
select * from test0 order by i desc nulls last;
select * from test2 order by i;
select * from test2 order by i desc;
select * from test3 order by i;
select * from test3 order by i desc;
select * from test4 order by i;
select * from test4 order by i desc;
select * from test10 order by s;
select * from test10 order by s desc;
select * from test11 order by s;
select * from test11 order by s desc;
select * from test13 order by s;
select * from test13 order by s desc;
select * from test20 order by l;
select * from test20 order by l desc;
select * from test22 order by s;
select * from test22 order by s desc;
select * from test24 order by l;
select * from test24 order by l desc;
select a from test order by a;
select * from test order by i;
select o_orderkey, o_clerk, o_orderstatus, o_totalprice from orders_small order by o_orderkey nulls first, o_clerk nulls first, o_orderstatus nulls first, o_totalprice desc nulls last limit 360;
select o_orderkey, o_clerk, o_orderstatus, o_totalprice from orders_small order by o_orderkey nulls first, o_clerk nulls first, o_orderstatus nulls first, o_totalprice desc nulls last limit 10 offset 440;
select 251658240::bigint * 251658240::bigint;
select -1::bigint * 9223372036854775807::bigint;
select 8589934592::bigint * 1073741823::bigint;
select 1073741823::bigint * 8589934592::bigint;
select (-9223372036854775808)::bigint * 0::bigint;
select (-9223372036854775808)::bigint * 1::bigint;
select 0::bigint * (-9223372036854775808)::bigint;
select 1::bigint * (-9223372036854775808)::bigint;
select (-9223372036854775807)::bigint * -1::bigint;
select -1::bigint * (-9223372036854775807)::bigint;
select (-9223372036854775807)::bigint * 0::bigint;
select (-9223372036854775807)::bigint * 1::bigint;
select 0::bigint * (-9223372036854775807)::bigint;
select 1::bigint * (-9223372036854775807)::bigint;
select i+100::tinyint from tinyints order by 1;
select i+120::tinyint from tinyints where i=1 order by 1;
select -100::tinyint-i from tinyints order by 1;
select -120::tinyint-i from tinyints where i=1 order by 1;
select i*10::tinyint from tinyints order by 1;
select (i*10::tinyint)*10::tinyint from tinyints where i=1 order by 1;
select (i*10::tinyint)*10::tinyint from (select * from tinyints) tbl(i) where i=1 order by 1;
select i+32765::smallint from smallints where i=1;
select -32765::smallint-i from smallints where i=1;
select i*10000::smallint from smallints where i=1;
select i::tinyint+120::tinyint from smallints where i=1;
select 1e1000;
select 1e1000::real;
select '1e1000'::double;
select '1e100'::real;
select all cast ( - sum ( distinct - cast ( null as integer ) ) as integer ) from test;
select b, avg(a) from test group by b order by b;
select sum(b) from test2;
select count(*) from (select unnest(l1) as un from (select list(a) l1 from t) t1) t2 where un is not null;
select count(*) from (select unnest(l1) as un from (select list(a) l1 from t) t1) t2 where un is null;
select count(*) from (select unnest(l1) as un from (select list(a) l1 from t) t1) t2;
select count (*) from (select list(b) l1 from t group by a) t1;
select min([a]), max([a]) from t group by b%2;
select min([-a, 1, a]), max([-a, 1, a]) from t group by b%2;
select min({'i': a}), max({'i': a}) from t group by b%2;
select min({'i': a, 'j': a % 2}), max({'i': a, 'j': a % 2}) from t group by b%2;
select first(null::int[]) from t group by b%2;
select min(null::int[]) from t group by b%2;
select min(i), max(i) from integers;
select sum(i) from integers union all select avg(i) from integers union all select min(i) from integers union all select max(i) from integers;
select * from v1 t1 join v1 t2 using (i);
select min(i), max(i) from integers where i>2000;
select i, sum(j), min(j), max(j) from integers2 group by i order by i;
select 2*3+1;
select 1+2*3;
select 2^2 + 1;
select 1+2^2;
select 42,;
select 42, 84,;
select distinct 42, 84,;
select * from (values (42,));
select * from integers,;
select i, sum(j) from integers group by i,;
select [1,];
select array[1,];
select {'a': 42, 'b': 84,};
select * from values (42) t;
select * from values (42) t, values (84) x;
select count(*) from pg_namespace where nspname='myschema';
select nspname from pg_namespace ` `where lower(nspname)='main';
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname='integral_values';
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname='f';
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where n.nspname='main' and relname='integral_values';
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where n.nspname='main' and relname='f';
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where relkind='s' and n.nspname='main' and relname='seq';
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where relkind='s' and n.nspname='main' and relname='f';
select count(c.oid) from pg_catalog.pg_class c left join pg_catalog.pg_namespace n on n.oid = c.relnamespace where (pg_catalog.pg_table_is_visible(c.oid)) and c.relname = 'integral_values' and c.relkind in ('r', 'v', 'm', 'f', 'p');
select c.relname from pg_class c join pg_namespace n on n.oid = c.relnamespace where n.nspname = 'main' and c.relkind in ('r', 'p');
select c.relname from pg_class c join pg_namespace n on n.oid = c.relnamespace where n.nspname = 'myschema' and c.relkind in ('v', 'm');
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where relkind='s' and n.nspname='main';
select string_split_regex(pg_get_viewdef(c.oid), '\n')[1] view_def from pg_class c join pg_namespace n on n.oid = c.relnamespace where n.nspname = 'myschema' and c.relname = 'v1' and c.relkind in ('v', 'm');
select a.attname, pg_catalog.format_type(a.atttypid, a.atttypmod), ( select pg_catalog.pg_get_expr(d.adbin, d.adrelid) from pg_catalog.pg_attrdef d where d.adrelid = a.attrelid and d.adnum = a.attnum and a.atthasdef ) as default, a.attnotnull from pg_catalog.pg_attribute a left join pg_catalog.pg_description pgd on ( pgd.objoid = a.attrelid and pgd.objsubid = a.attnum) where a.attrelid = (select min(oid) from pg_class where relname='integral_values') and a.attnum > 0 and not a.attisdropped order by a.attnum;
select current_database();
select current_query();
select 1, 2, 3, current_query();
select inet_client_addr(), inet_client_port(), inet_server_addr(), inet_server_port();
select pg_is_other_temp_schema(33);
select col_description(0, 0), obj_description(0, 'duckdb'), shobj_description(0, 'duckdb');
select pg_typeof(1);
select * from pragma_database_list();
select seq, name from pragma_database_list() where file like '%test.db%';
select name from pragma_functions() where name='count' group by name;
select 42;
select * from read_csv('__test_dir__/query_log.txt', columns={'sql': 'varchar'}, auto_detect=false);
select * from b order by 1;
select i from b;
select coalesce(1, 'hello'::int);
select coalesce(a, b::int) from vals;
select i, coalesce(rowid+i, rowid) from tbl order by rowid;
select i, rowid, rowid+i, coalesce(rowid+i, null) is null or rowid+3=6 from tbl order by rowid;
select * exclude i from integers;
select * exclude (i, j) from integers;
select * exclude (j) from integers;
select * exclude (`j`) from integers;
select integers.* exclude (i) from integers;
select integers.* exclude (i, j) from integers;
select integers.* exclude (j) from integers;
select integers.* exclude (i, j), * exclude (i, j), * exclude (i, k) from integers;
select * exclude (i, j) from integers i1, integers i2;
select i1.* exclude (i, j), i2.* exclude (i, j, k) from integers i1, integers i2;
select i1.* exclude (i, j), i2.* exclude (k) from integers i1, integers i2;
select * exclude (i) from integers i1 join integers i2 using (i);
select * replace i+100 as i from integers;
select * exclude (j, k) replace (i+100 as i), * exclude (j) replace (i+100 as i), * exclude (j, k) replace (i+101 as i) from integers;
select * replace (i+100 as i, j+200 as `j`) from integers;
select integers.* replace (i+100 as i) from integers;
select coalesce(null);
select coalesce(42::smallint);
select coalesce(42::integer);
select coalesce(42::bigint);
select coalesce(42::hugeint);
select coalesce(42::float);
select coalesce(42::double);
select coalesce(a) from exprtest;
select coalesce(null, null, 42, 43);
select coalesce(null, null, 42);
select coalesce(42, null, 43);
select coalesce(null, null, null);
select coalesce(a, b) from exprtest;
select coalesce(null, null, null, a, null, b) from exprtest;
select * from exprtest where b=1 or coalesce(a, b)=42 order by 1;
select * from exprtest where coalesce(a, b)=1 or coalesce(a, b)=43 or coalesce(a, b)=45 order by 1;
select * from exprtest where coalesce(a, b)=1 or coalesce(a, b)=42 or coalesce(a, b)=43 or coalesce(a, b)=45 order by 1;
select * from exprtest where b=1 and coalesce(a, b)=1 order by 1;
select * from exprtest where (b=1 and coalesce(a, b)=1) or (b=100 and coalesce(a, b)=43) order by 1;
select coalesce(n, s) from strings;
select coalesce(n, n, n, n, n, n, n, n, n, n, s, n, n, n, n, n, n, n) from strings;
select coalesce(n, n, n, n, n, n, n, n, n, n, s, n, n, n, n, n, n, n, 'default') from strings;
select coalesce(n, n, n, n, n, n, n, n, n, n, s, n, n, n, n, n, n, n) from strings where s not like 'this%';
select coalesce(s1, s2, s3, s4, s5) from multistrings;
select coalesce(s5, s4, s3, s2, s1) from multistrings;
select coalesce(s5, s4, s3, s2, s1) from multistrings where coalesce(s5, s4, s3, s2, s1) is not null;
select coalesce(s1, s2, s3, s4, s5) from multilists;
select coalesce(s5, s4, s3, s2, s1) from multilists;
select coalesce(s5, s4, s3, s2, s1) from multilists where coalesce(s5, s4, s3, s2, s1) is not null;
select coalesce(s1, s2, s3, s4, s5) from nestedtypes;
select coalesce(s5, s4, s3, s2, s1) from nestedtypes;
select coalesce(s5, s4, s3, s2, s1) from nestedtypes where coalesce(s5, s4, s3, s2, s1) is not null;
select unnest(coalesce(s5, s4, s3, s2, s1)) from nestedtypes;
select * from exprtest;
select a from exprtest where a between 43 and 44;
select a from exprtest where a not between 43 and 44;
select a from exprtest where a between b and 44;
select case a when 42 then 100 when 43 then 200 else 300 end from exprtest;
select case when a = 42 then 100 when a = 43 then 200 else 300 end from exprtest;
select case when a = 42 then 100 when a = 43 then 200 end from exprtest;
select abs(1), abs(-1), abs(null);
select abs(b) from exprtest;
select * from intest where a in (42, 43);
select a in (42, 43) from intest;
select * from intest where a in (86, 103, 162);
select * from intest where a in (null, null, null, null);
select * from intest where a in (b);
select * from intest where a in (b, c);
select * from intest where a in (43, b) order by 1;
select * from intest where a not in (42, 43);
select * from intest where a not in (86, 103, 162) order by 1;
select * from intest where a not in (null, null);
select * from intest where a not in (b) order by 1;
select * from intest where a not in (b, c);
select * from intest where a not in (43, b);
select * from intest where null in ('a', 'b');
select * from intest where null not in ('a', 'b');
select a from strtest where b = 'a';
select a from strtest where b <> 'a';
select a from strtest where b < 'h';
select a from strtest where b <= 'h';
select a from strtest where b > 'h';
select a from strtest where b >= 'h';
select rowid, * from a;
select rowid+1 from a where case when i=42 then rowid=0 else rowid=1 end;
select rowid from b order by 1;
select * from b;
select rowid + 1, rowid - 1, rowid + rowid, i + rowid from a;
select -rowid, +rowid, abs(rowid) from a;
select rowid between -1 and 1, 0 between rowid and 1, 1 between -3 and rowid from a;
select rowid < i, rowid = null, rowid = i, rowid <> 0 from a;
select sum(rowid), min(rowid), max(rowid), count(rowid), first(rowid) from a;
select sum(rowid), min(rowid), max(rowid), count(rowid), last(rowid) from a;
select sum(rowid), min(rowid), max(rowid), count(rowid), first(rowid), last(rowid) from a group by i;
select sum(i) from a group by rowid;
select * from a, a a2 where a.rowid=a2.rowid;
select * from a, a a2 where a.rowid<>a2.rowid;
select * from a, a a2 where a.rowid>=a2.rowid;
select * from a order by rowid;
select * from a order by 1;
select * from a where rowid=0;
select * from a where rowid between -100 and 100 order by 1;
select * from a where rowid=0 or rowid=1;
select row_number() over (partition by rowid) from a order by rowid;
select row_number() over (order by rowid) from a order by rowid;
select row_number() over (order by rowid desc) from a order by rowid;
select (select rowid from a limit 1);
select 0 in (select rowid from a);
select exists(select rowid from a);
select (select a2.rowid from a a2 where a.rowid=a2.rowid) from a;
select a.rowid in (select a2.rowid from a a2 where a.rowid>=a2.rowid) from a;
select exists(select a2.rowid from a a2 where a.rowid>=a2.rowid) from a;
select 42 + 1;
select 2 * (42 + 1), 35 - 2;
select 'hello';
select cast('3' as integer);
select cast(3 as varchar);
select case when 43 > 33 then 43 else 33 end;
select + case when not + 84 not between - 78 + 98 * 51 and - ( ( - 28 ) ) * count ( * ) + + - 65 then null else 16 / + 34 + + - 98 end / + 70 - ( - - case - coalesce ( + 73, + - 66 * - 89 * - 72 ) when count ( * ) / + 4 * cast ( - - 18 as integer ) + + + count ( * ) - - 88 then null when 92 then null else count ( * ) end ) as col0;
select i, j from a;
select x, y from a i1(x, y);
select a + 2, b from test where a = 11;
select a + 2, b from test where a = 12;
select cast(a as varchar) from test;
select cast(cast(a as varchar) as integer) from test;
select test.* from test;
select t.* from test t;
select t1.i, t1.j as a, t2.j as b from r4 t1 inner join r4 t2 using(i,j) order by a;
select t1.i, t1.j as a, t2.j as b from r4 t1 inner join r4 t2 on t1.i=t2.i and t1.j=t2.j order by a;
select t1.*, t2.j b from r4 t1 inner join r4 t2 using(i,j) order by t1.j;
select t1.*, t2.j b from r4 t1 inner join r4 t2 on t1.i=t2.i and t1.j=t2.j order by t1.j;
select * from (values (null, null), (3, 4), (3, 7)) v1;
select * from (values (1, 2, 3), (1, 2, 3)) v1;
select * from (values (1 + 1, 2, 3), (1 + 3, 2, 3)) v1;
select * from (values ((select 42), 2, 3), (1 + 3,2,3)) v1;
select * from (values ((select min(a) from test), 2, 3), ((select max(b) from test), 2, 3)) v1;
select * from (values ('hello', 2), (1 + 3, '5'), (date '1992-09-20', 3)) v1;
select * from (values (date '1992-09-20', 3), (null, null)) v1;
select * from (values (null, null)) v1;
select * from (values (null, null), (3, 4)) v1;
select * from (values (3), ('hello')) v1;
select * from (values (null), ('hello')) v1;
select * from varchars order by 1;
select count(*) from table1;
select a3, b3, c3 in (1, 200) from table3;
select * from table4;
select test.tbl.col from test.tbl;
select t from t.t;
select t.t from t.t;
select t.t.t from t.t;
select t.t.t.t from t.t;
select t.t.t.t.t.t.t.t from t.t;
select t.t.t.t.t.t.t from t.t;
select t.t.t.t.t.t from t.t;
select t.t.t.t.t from t.t;
select name from pragma_table_info('tbl') order by name;
select * from a except select * from b order by 1;
select * from a intersect select * from b;
select count(*) from v1 join v2 using (i);
select count(*) from v1 left join v2 using (i);
select count(*) from v1 right join v2 using (i);
select count(*) from v1 full outer join v2 using (i);
select count(*) from v1 join v1 v2 using (i);
select count(*) from v1 full outer join v1 v2 using (i);
select count(*) from v3;
select count(*) from v4;
select count(*) from v3 join v4 using (i);
select count(*) from v3 left join v4 using (i);
select count(*) from v3 right join v4 using (i);
select count(*) from v3 full outer join v4 using (i);
select * from a except select * from b except select * from c;
select 1 union all select 2;
select 1, 'a' union all select 2, 'b';
select 1, 'a' union all select 2, 'b' union all select 3, 'c' order by 1;
select 1, 'a' union all select 2, 'b' union all select 3, 'c' union all select 4, 'd' order by 1;
select null union select null;
select null except select null;
select null intersect select null;
select a from test where a < 13 union all select a from test where a = 13;
select b from test where a < 13 union all select b from test where a > 11;
select 1 union all select 'asdf';
select null union all select 'asdf';
select 1 union select 1;
select 1, 'a' union select 2, 'b' union select 3, 'c' union select 1, 'a' order by 1;
select b from test where a < 13 union select b from test where a > 11 order by 1;
select 1, 'a' union all select 1, 'a' union select 2, 'b' union select 1, 'a' order by 1;
select 1, 'a' union all select 1, 'a' union select 2, 'b' union select 1, 'a' order by 1 desc;
select * from (select * from test union select * from test2) res order by 1;
select a from (select * from test union select * from test2) res order by 1;
select b from (select * from test2 union select * from test) res order by 1;
select col1 from (select * from test2 union select * from test) res(col1) order by 1;
select a from test union select b from test2 order by a;
select a from test union select b from test2 order by b;
select a from test union select b from test2 union select b as c from test2 order by c;
select a from test union select b from test2 union select b + 1 from test2 order by b + 1;
select a, 10 - a as b from test union select b, b + 1 from test2 order by 2;
select a from test union select b from test2 order by 1;
select * from test union select * from test2 order by a;
select * from test union select * from test2 order by b;
select a from test union select * from test2 order by test.a;
select a from test union select b from test2 order by test2.b;
select test.a from test union select * from test2 order by a;
select test.a from test union select test2.b from test2 order by b;
select a from test union select * from test2 union select * from test t1 order by test.a, test2.b, t1.a;
select a from test union select * from test2 union select * from test t1 order by a;
select a from (select * from test) bla union select * from test2 order by bla.a;
select t1.a, t2.a from test t1, test t2 where t1.a=t2.a union select b, b - 1 from test2 order by t1.a, t2.a, test2.b;
select null as a, null as b, 1 as id union select cast('2015-10-11 00:00:00' as timestamp) as a, cast('2015-10-11 12:34:56' as timestamp) as b, 2 as id order by 3;
select 1 union all select 2 union all select null union all select 3;
select min(1) from range(10) union all select min(2) from range(10) union all select min(null) from range(10) union all select min(3) from range(10);
select i, j from (select i, 1 as j from t group by i union all select i, 2 as j from t group by i) sq1;
select 1 union select 1.0;
select 1 union all select 1.0;
select 1 union (select 1 union select 1 union select 1);
select 1 union (select 1.0 union select 1.0 union select 1.0) union select 1;
select 1 union all (select 1.0 union all select 1.0 union all select 1.0) union all select 1;
select 1 union (select '1' union select '1' union select '1') union select 1;
select count(*) from range(1) union all select count(*) from range(1);
select count(*) from range(1) union all select count(*) from range(1) union all select count(*) from range(1) union all select count(*) from range(1) union all select count(*) from range(1);
select count(*) from range(1) union select count(*) from range(1);
select count(*) from range(1) union select count(*) from range(2) order by 1;
select count(*) from range(1) union select count(*) from range(2) union select count(*) from range(3) union select count(*) from range(4) union select count(*) from range(5) order by 1;
select * from ( select 1 union all select 1 ) tbl(i);
select * from ( select 1 union select 2 union select 3 union select 4 union select 5 ) tbl(i) order by 1;
select count(*) from (select * from a union all select * from b) t1 join (select 43) t2(l) on t1.l=t2.l;
select count(*) from (select * from a union all select * from b) t1;
select count(*) from (select i, j, min(k), min(l) from a group by i, j union all select * from b) t1;
select count(*) from (select distinct i, j, k, l from a union all select * from b) t1;
select count(*) from (select distinct * from (select distinct i, j, k, l from a union all select * from b) t1) t2;
select count(*) from (select * from a union all select * from b union all select a.i,a.j,a.k,a.l from a,b) t1;
select count(*) from (select * from a union select * from b union select a.i,a.j,a.k,a.l from a,b) t1;
select j from (select * from a where i=42 union all select * from b) t1 where i=40;
select j from (select i, count(*) j, count(*) k, count(*) l from a where i=42 group by i union all select * from b) t1 where i=40;
select j from (select i i, i j, k, l from a union all select * from b) t1 where i=40 and j=41;
select * from (select 'hello' i union all select 'h' i) t1 where i='h';
select min(t2.b) from (select * from a union all select * from b) t1 join (select 43, 'hello', 44, 'world') t2(l, a, b, c) on t1.l=t2.l;
select 1 union all select * from range(2, 100) union all select 999 limit 5;
select 1 union all ( select * from generate_series(10, 12, 1) union all ( select * from generate_series(100, 103, 1) ) union all select * from generate_series(1000, 1002, 1) ) union all select * from generate_series(10000, 10002, 1) union all ( select * from generate_series(100000, 100002, 1) union all select * from generate_series(1000000, 1000003, 1) );
select array_agg(1) union all ( select array_agg(i) from generate_series(10, 12, 1) tbl(i) union all ( select array_agg(i) from generate_series(100, 103, 1) tbl(i) ) union all select array_agg(i) from generate_series(1000, 1002, 1) tbl(i) ) union all select array_agg(i) from generate_series(10000, 10002, 1) tbl(i) union all ( select array_agg(i) from generate_series(100000, 100002, 1) tbl(i) union all select array_agg(i) from generate_series(1000000, 1000003, 1) tbl(i) );
select 1 union all ( select * from generate_series(10, 12, 1) union all ( select * from generate_series(100, 103, 1) ) union all select * from generate_series(1000, 1002, 1) ) union all select * from generate_series(10000, 10002, 1) union all ( select * from generate_series(100000, 100002, 1) union all select * from generate_series(1000000, 1000003, 1) ) limit 1000;
select array_agg(1) union all ( select array_agg(i) from generate_series(10, 12, 1) tbl(i) union all ( select array_agg(i) from generate_series(100, 103, 1) tbl(i) ) union all select array_agg(i) from generate_series(1000, 1002, 1) tbl(i) ) union all select array_agg(i) from generate_series(10000, 10002, 1) tbl(i) union all ( select array_agg(i) from generate_series(100000, 100002, 1) tbl(i) union all select array_agg(i) from generate_series(1000000, 1000003, 1) tbl(i) ) limit 1000;
select count(*) from (select * from range(1000000) tbl(i) union all select * from range(1000000) tbl(i)) tbl(i);
select * from t1;
select count(*) from (select * from range(1000000) tbl(i) union all select * from range(1000000) tbl(i) union all select * from range(1000000) tbl(i) union all select * from range(1000000) tbl(i) union all select * from range(1000000) tbl(i)) tbl(i);
select sum(i) from tbl union all select count(i) from tbl union all select avg(i) from tbl union all select avg(i) + sum(i) from tbl order by 1;
select * from vals;
select * from vunion order by i;
select * from vunion order by i limit 1;
select * from (select * from vunion order by i limit 4) tbl order by j limit 2;
select * from vunion where i=1;
select distinct * from (select * from vunion union all select * from vunion) tbl order by 1;
select * from (select * from vunion intersect select * from vunion) tbl order by 1;
select * from (select * from vunion except select * from vunion) tbl;
select * from range(3) order by 1;
select value from duckdb_settings() where name='preserve_identifier_case';
select duckdb_tables.schema_name, duckdb_tables.table_name, column_name from duckdb_tables join duckdb_columns using (table_oid);
select unnest(['i', 'j', 'k', 'd']) column_names, unnest(['integer', 'varchar', 'hugeint', 'double']) column_types, unnest([min(i)::varchar, min(j)::varchar, min(k)::varchar, min(d)::varchar]) min, unnest([max(i)::varchar, max(j)::varchar, max(k)::varchar, max(d)::varchar]) max from (select * from types) tbl;
select min(i), max(i), min(v), max(v) from vals;
select gcol from tbl;
select plus1(2);
select plus2(3);
select plus2(4);
select * from test_default;
select a from t;
select k from test order by k;
select * from test where b='hello';
select * from test order by b;
select a from new_name order by 1;
select a from vtest order by a;
select nextval('seq_cycle');
select nextval('seq'), nextval('seq');
select * from xt(10, '*') order by height limit 1;
select * from my_seq(0,6);
select * from my_range(2);
select min(i), max(i), count(i), count(*) from vals;
select count(*), count(a), count(b), sum(a), sum(b), sum(length(c)) from test;
select * from test order by a, b, c;
select sum(col), min(col), max(col), count(*) from test where col >= 5000;
select min(id), max(id), sum(col), min(col), max(col), count(*) from test where id='5000';
select sum(a), min(a), max(a), count(*) from test;
select a from test limit 5;
select sum(a) from test_2;
select sum(s['a']), min(s['a']), max(s['a']), count(*) from test;
select (uncompressed::float / dictionary::float) > 35, (uncompressed::float / dictionary::float) < 43 from ( select (select count(distinct block_id) from pragma_storage_info('test_dictionary') where segment_type in('varchar')) as dictionary, (select count(distinct block_id) from pragma_storage_info('test_uncompressed') where segment_type in('varchar')) as uncompressed );
select min(col), max(col), count(*) from test where col >= 'bleepbloop-5';
select min(id), max(id), min(col), max(col), count(*) from test where id='5000';
select min(id), max(id), sum(col::int), min(col::int), max(col::int), count(*) from test where id=5000;
select sum(a::int), min(a::int), max(a::int), count(*) from test;
select avg(a::int) from test;
select sum(s['a']::int), min(s['a']::int), max(s['a']::int), count(*) from test;
select sum(a::int) from test;
select sum(a::int) from test_2;
select sum(col), min(col), max(col), count(*) from test where col=2;
select sum(a), sum(b) from test;
select stats(i), stats(j) from test limit 1;
select count(*) from test;
select * from test order by 1, 2, 3;
select min(i), max(i), count(*) from test;
select i0=0 from integers;
select i0=0+1 from integers;
select i0=0 from integers2;
select i0=0+1 from integers2;
select total_blocks<10 from pragma_database_size();
select count(*) from pragma_storage_info('integers') where block_id is null;
select total_blocks from pragma_database_size();
select total_blocks<15 from pragma_database_size();
select i0='0' from strings;
select i0=(0+1)::varchar from strings;
select i0=0::varchar from strings;
select a, b from test where a=11 order by b;
select a, b from test where a>11 order by b;
select * from test where a=12;
select min(i), max(i), count(*), count(i) from a_smallint;
select min(i), max(i), count(*), count(i) from a_integer;
select min(i), max(i), count(*), count(i) from a_bigint;
select min(i), max(i), count(*), count(i) from a_hugeint;
select min(i), max(i), count(*), count(i) from a_float;
select min(i), max(i), count(*), count(i) from a_double;
select min(i), max(i), count(*), count(i) from a_smallint where i=1;
select min(i), max(i), count(*), count(i) from a_integer where i=1;
select min(i), max(i), count(*), count(i) from a_bigint where i=1;
select min(i), max(i), count(*), count(i) from a_hugeint where i=1;
select min(i), max(i), count(*), count(i) from a_float where i=1;
select min(i), max(i), count(*), count(i) from a_double where i=1;
select min(i), max(i), count(*), count(i) from a_interval;
select min(i), max(i), count(*), count(i) from a_interval where i=interval 1 year;
select min(i), max(i), count(*), count(i) from a_bool;
select min(i), max(i), count(*), count(i) from a_bool where not i;
select * from tbl where id=1;
select min(i), max(i), count(*) from test;
select length(substring(a, 0, 1000000)) from test;
select a, b from test order by a;
select * from test2 order by a;
select count(*), sum(a), min(a), max(a), min(b), max(b), count(a), count(b) from test;
select * from test where a is null;
select * from c;
select * from a order by id;
select c['r1']['a'] from a;
select column_path, stats from pragma_storage_info('a') where stats like '%[min: -2147483648, max: -2147483648]%';
select count(*) from a where b is null;
select * from blobs;
select * from hugeints;
select * from hugeints where h = 42;
select h from hugeints where h < 10 order by 1;
select * from timestamp order by sec;
select * from timestamp where micro=timestamp '2008-01-01 00:00:01.88926' order by micro;
select * from timestamp where micro=timestamp '2020-01-01 00:00:01.88926' order by micro;
select * from unsigned;
select * from unsigned where a = 42;
select a from unsigned where a < 10 order by 1;
select * from unsigned where b = 42;
select b from unsigned where b < 10 order by 1;
select * from unsigned where c = 42;
select c from unsigned where c < 10 order by 1;
select * from unsigned where d = 42;
select d from unsigned where d < 10 order by 1;
select * from uuids;
select * from uuids where u = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';
select u from uuids where u > '10203040-5060-7080-0102-030405060708' order by 1;
select sum(a), count(a) from test;
select count(a) from test where a=0;
select count(a) from test where a=1;
select count(a) from test where a=2;
select count(a) from test where a=17;
select * from person;
select count(*), sum(a), sum(b), min(a), max(a), min(b), max(b) from test where a>0;
select count(*) from test where a>0;
select count(*) from test where a>0 and a<>b;
select sum(case when b is null then 1 else 0 end) from test where a>0 and a%2=0;
select * from test where a>0 order by 1,2;
select count(*) from test where a>0 and a%2=0;
select count(*) from test where a is null or b is null;
select count(*) from test where a>0 and b is null;
select count(*), sum(a), sum(b), min(a), max(a), min(b), max(b), count(b) from test where a>0;
select a, b from test where a>0 or a is null order by a;
select a, b from test where a::integer>0 or a is null order by a;
select * from timestamp order by t;
select * from timestamp where t=timestamp '2007-01-01 00:00:01' order by t;
select * from timestamp where t=timestamp '2000-01-01 00:00:01' order by t;
select (false) in (true, (select time '13:35:07' from t1) between t0.c0 and t0.c0) from t0;
select 2 > any(select * from integers);
select 1 > any(select * from integers);
select 4 > all(select * from integers);
select 1 > all(select * from integers);
select null > any(select * from integers);
select null > all(select * from integers);
select i=any(select i from integers where i=i1.i) from integers i1 order by i;
select i>all(select (i+i1.i-1)/2 from integers where i is not null) from integers i1 order by i;
select i=all(select i from integers where i<>i1.i) from integers i1 order by i;
select i from integers i1 where i=any(select i from integers where i=i1.i) order by i;
select i from integers i1 where i<>any(select i from integers where i=i1.i) order by i;
select i from integers i1 where i=any(select i from integers where i<>i1.i) order by i;
select i from integers i1 where i>any(select i from integers where i<>i1.i) order by i;
select i from integers i1 where i>all(select (i+i1.i-1)/2 from integers where i is not null) order by i;
select i=all(select i from integers where i=i1.i) from integers i1 order by i;
select i<>all(select i from integers where i=i1.i) from integers i1 order by i;
select i<>any(select i from integers where i=i1.i) from integers i1 order by i;
select i=any(select i from integers where i<>i1.i) from integers i1 order by i;
select i>any(select i from integers where i<>i1.i) from integers i1 order by i;
select i>all(select (i+i1.i-1)/2 from integers) from integers i1 order by i;
select i=any(select i from integers where i=i1.i or i is null) from integers i1 order by i;
select i=all(select i from integers where i=i1.i or i is null) from integers i1 order by i;
select min(i)>any(select i from integers where i>min(i1.i)) from integers i1;
select sum(i)>any(select i from integers where i>min(i1.i)) from integers i1;
select (select sum(i)+sum(i1.i) from integers)>any(select i from integers where i>min(i1.i)) from integers i1;
select i=any(select i from integers where i=i1.i and i>10) from integers i1 order by i;
select 1 = any(select 1);
select 1 = any(select null);
select 1 = any(select 2);
select null = any(select 2);
select 1 = all(select 1);
select 1 = all(select null);
select 1 = all(select 2);
select null = all(select 2);
select 1 in (select 1);
select null in (select 1);
select 1 in (select null);
select 1 in (select 2);
select 4 in (select * from integers);
select 1 in (select * from integers);
select 1 in (select * from integers) from integers;
select * from integers where (4 in (select * from integers)) is null order by 1;
select * from integers where (i in (select * from integers)) is null order by 1;
select * from test where b in (select b from test where b * id < 30) order by id, b;
select * from test where b not in (select b from test where b * id < 30) order by id, b;
select i from integers where i >= all(select i from integers);
select i, i >= all(select i from integers) from integers order by i;
select i from integers where i >= all(select i from integers where i is not null);
select i, i >= all(select i from integers where i is not null) from integers order by i;
select i from integers where i > all(select min(i) from integers);
select i from integers where i < all(select max(i) from integers) order by 1;
select i from integers where i <= all(select i from integers);
select i from integers where i <= all(select i from integers where i is not null);
select i from integers where i = all(select i from integers where i=1);
select i from integers where i <> all(select i from integers where i=1);
select i from integers where i = all(select i from integers where i is not null);
select i from integers where i <> all(select i from integers where i is not null);
select i from integers where i <> all(select i from integers where i>10) order by i;
select i, i <> all(select i from integers where i>10) from integers order by i;
select i, i > any(select i from integers where i>10) from integers order by i;
select i, i = any(select i from integers where i>10) from integers order by i;
select i, i >= any(select i from integers where i>10) from integers order by i;
select i, i <= any(select i from integers where i>10) from integers order by i;
select i, i < any(select i from integers where i>10) from integers order by i;
select i, i <> any(select i from integers where i>10) from integers order by i;
select (select (select (select 42)));
select (select exists(select * from integers where i>2)) from integers;
select (select max(i) from integers) as k, sum(i) from integers group by k;
select i >= all(select i from integers where i is not null) as k, sum(i) from integers group by k order by k;
select sum(i) from integers group by (i >= all(select i from integers where i is not null)) order by 1;
select i >= all(select min(i) from integers where i is not null) as k, sum(i) from integers group by k order by k;
select i, sum(case when (i >= all(select i from integers where i=2)) then 1 else 0 end) from integers group by i order by i;
select i % 2 as k, sum(i) from integers group by k having sum(i) > (select max(i) from integers);
select i from integers where not(i in (select i from integers where i>1));
select (select sum(i) from integers), (select 42);
select i from integers where i <= any(select i from integers);
select i from integers where i > any(select i from integers) order by 1;
select i, i > any(select i from integers) from integers order by i;
select i, i > any(select i from integers where i is not null) from integers order by i;
select i, null > any(select i from integers) from integers order by i;
select i, null > any(select i from integers where i is not null) from integers order by i;
select i from integers where i = any(select i from integers);
select i, i = any(select i from integers where i>2) from integers order by i;
select i, i = any(select i from integers where i>2 or i is null) from integers order by i;
select i, i <> any(select i from integers where i>2) from integers order by i;
select i, i <> any(select i from integers where i>2 or i is null) from integers order by i;
select i, i = any(select i1.i from integers i1, integers i2, integers i3, integers i4, integers i5, integers i6 where i1.i is not null) from integers order by i;
select i, i = any(select i1.i from integers i1, integers i2, integers i3, integers i4, integers i5, integers i6 where i1.i is not null and i1.i <> 2) from integers order by i;
select i, i >= any(select i1.i from integers i1, integers i2, integers i3, integers i4, integers i5, integers i6 where i1.i is not null) from integers order by i;
select i, i >= any(select i1.i from integers i1, integers i2, integers i3, integers i4, integers i5, integers i6 where i1.i is not null and i1.i <> 1 limit 1) from integers order by i;
select l, (select min(l[1])+i1.l[1] from lists) from lists i1 order by l;
select l, (select min(l[1]+2*i1.l[1]) from lists) from lists i1 order by l;
select l, sum(l[1]), (select sum(l[1])+sum(i1.l[1]) from lists) from lists i1 group by l order by l;
select l, sum(l[1]), (select sum(l[1])+count(i1.l[1]) from lists) from lists i1 group by l order by l;
select l, (select count(*) from lists i2 where i2.l[1]>i1.l[1]) from lists i1 order by l;
select (select sum(i1.l[1])) from lists i1;
select min(l[1]), (select sum(i1.l[1])) from lists i1;
select (select sum(i1.l[1])), (select sum(i1.l[1])) from lists i1;
select sum(l[1]), sum((select l[1] from lists where l[1]=i1.l[1])) from lists i1;
select sum(l[1]), (select sum(l[1]) from lists where l[1]>sum(i1.l[1])) from lists i1;
select l, (select min(l[1]) from lists where l[1]>i1.l[1]) from lists i1 order by l;
select l, (select min(l[1])+i1.l[1] from lists where l[1]>i1.l[1]) from lists i1 order by l;
select l, (select min(l[1]) from lists group by i1.l[1]) as j from lists i1 order by l;
select l, (select l[1] from lists group by l[1] having l[1]=i1.l[1]) as j from lists i1 order by l;
select i1.l, sum(l[1]) from lists i1 group by i1.l having sum(l[1])=(select min(l[1]) from lists where l[1]<>i1.l[1]+1) order by 1;
select l[1] % 2 as j, sum(l[1]) from lists i1 group by j having sum(l[1])=(select sum(l[1]) from lists where l[1]<>j+1) order by 1;
select (select l[1]+sum(i1.l[1]) from lists where l[1]=1 limit 1) from lists i1;
select (select sum(l[1])+sum(i1.l[1]) from lists) from lists i1 order by 1;
select l, (select l[1]+sum(i1.l[1]) from lists where l[1]=1) from lists i1 group by l order by l;
select sum((select l[1]+i1.l[1] from lists where l[1]=1)) from lists i1;
select l, sum(i1.l[1]), (select sum(i1.l[1]) from lists) as k from lists i1 group by l order by l;
select i1.l as j, (select sum(j[1]+l[1]) from lists) as k from lists i1 group by j order by j;
select (select sum(i1.l[1]*l[1]) from lists) from lists i1 order by l;
select l, sum(i1.l[1]) from lists i1 group by l order by (select sum(i1.l[1]) from lists);
select l, sum((select sum(l[1])*i1.l[1] from lists limit 0)) as k from lists i1 group by l order by l;
select (select l[1]+i1.l[1] from lists where l[1]=1) as k, sum(l[1]) as j from lists i1 group by k order by 1;
select sum(l[1]) from lists i1 where l[1]>(select (l[1]+i1.l[1])/2 from lists where l[1]=1);
select sum(l[1]) from lists i1 where l[1]>(select (sum(l[1])+i1.l[1])/2 from lists where l[1]=1);
select l, (select min(l[1]) from lists where l[1]=i1.l[1]) >= all(select l[1] from lists where l[1] is not null) from lists i1 order by l;
select l, l in (select i1.l from (select * from lists i1 where i1.l=lists.l) i1 join generate_series(1, 2, 1) tbl(s) on i1.l=array[tbl.s]) from lists order by l nulls last;
select l in (select i1.l from (select * from lists i1 where i1.l=lists.l) i1 left join generate_series(1, 2, 1) tbl(s) on i1.l=array[tbl.s]) from lists order by l nulls last;
select l in (select i1.l from (select * from lists i1 where i1.l=lists.l) i1 right join generate_series(1, 2, 1) tbl(s) on i1.l=array[tbl.s]) from lists order by l nulls last;
select l in (select i1.l from generate_series(1, 2, 1) tbl(s) left join (select * from lists i1 where i1.l=lists.l) i1 on i1.l=array[tbl.s]) from lists order by l nulls last;
select l in (select i1.l from generate_series(1, 2, 1) tbl(s) right join (select * from lists i1 where i1.l=lists.l) i1 on i1.l=array[tbl.s]) from lists order by l nulls last;
select ( select count(*) as value from ( select unnest(array_agg(distinct id)) ) a ) as total_seats from ( select gen_random_uuid() id, 1 as val from generate_series(0, 160) ) as m;
select z%2 as k, ( select count(*) as value from ( select unnest(array_agg(distinct id)) ) a ) as total_seats from ( select row_number() over () as z, gen_random_uuid() id, 1 as val from generate_series(0, 160) ) as m group by k order by k;
select ( select count(*) as value from ( select unnest(array_agg(distinct id)) ) a ) as total_seats from ( select gen_random_uuid() id, 1 as val from generate_series(0, 100000) ) as m;
select ( select sum(a.val) as value from ( select unnest(list(distinct {key:m.id, val: m.val})) a ) x ) as total_seats from ( select gen_random_uuid() id, 1 as val from range(0, 100000) ) as m cross join (select * from range(0,3)) as r;
select l, (select (select 42+i1.l[1])+42+i1.l[1]) as j from lists i1 order by l;
select l, (select (select (select (select 42+i1.l[1])++i1.l[1])+42+i1.l[1])+42+i1.l[1]) as j from lists i1 order by l;
select l, (select (select i1.l[1]+sum(i2.l[1])) from lists i2) as j from lists i1 order by l;
select l, (select (select (select (select i1.l[1]+i1.l[1]+i1.l[1]+i1.l[1]+i1.l[1])))) as j from lists i1 order by l;
select l, (select sum(l[1])+(select 42+i1.l[1]) from lists) as j from lists i1 order by l;
select l, (select ((select ((select ((select sum(l[1])+sum(i4.l[1])+sum(i3.l[1])+sum(i2.l[1])+sum(i1.l[1]) from lists i5)) from lists i4)) from lists i3)) from lists i2) as j from lists i1 group by l order by l;
select l, (select (select (select (select i1.l[1]+i1.l[1]+i1.l[1]+i1.l[1]+i1.l[1]+i2.l[1]) from lists i2 where i2.l=i1.l))) as j from lists i1 order by l;
select (select (select sum(i1.l[1])+sum(i2.l[1])+sum(i3.l[1]) from lists i3) from lists i2) from lists i1 order by 1;
select l, (select sum(s1.l[1]) from lists s1 inner join lists s2 on (select i1.l[1]+s1.l[1])=(select i1.l[1]+s2.l[1])) as j from lists i1 order by l;
select l, sum(l[1]), (select (select sum(l[1])+sum(i1.l[1])+sum(i2.l[1]) from lists) from lists i2) from lists i1 group by l order by l;
select l, (select sum(ss1.l[1]) from (select l from lists s1 where l[1]>any(select l[1] from lists where l<>s1.l)) ss1) as j from lists i1 order by l;
select l, (select sum(ss2.l[1]) from (select l from lists s1 where l=i1.l and l=any(select l from lists where l=s1.l)) ss2) as j from lists i1 order by l;
select l, (select sum(ss1.l[1])+sum(ss2.l[1]) from (select l from lists s1 where l>any(select l from lists where l<>s1.l)) ss1 left outer join (select l from lists s1 where l=any(select l from lists where l=s1.l)) ss2 on ss1.l=ss2.l) as j from lists i1 order by l;
select l, (select sum(s1.l[1]) from (select l from lists where l=i1.l) s1 left outer join lists s2 on s1.l=s2.l) as j from lists i1 order by l;
select l, (select sum(s1.l[1]) from (select l from lists where l<>i1.l) s1 left outer join lists s2 on s1.l=s2.l) as j from lists i1 order by l;
select l, (select sum(s2.l[1]) from lists s1 left outer join (select l from lists where l=i1.l) s2 on s1.l=s2.l) as j from lists i1 order by l;
select l, (select sum(s2.l[1]) from lists s1 left outer join (select l from lists where l<>i1.l) s2 on s1.l=s2.l) as j from lists i1 order by l;
select l, (select sum(ss2.l[1]) from (select l from lists s1 where case when (l=i1.l and l=any(select l from lists where l=s1.l)) then true else false end) ss2) as j from lists i1 order by l;
select l, (select sum(ss2.l[1]) from (select l from lists s1 where l=i1.l) ss2) as j from lists i1 order by l;
select l, (select sum(ss2.l[1]) from (select l from lists s1 where l=any(select l from lists where l=s1.l)) ss2) as j from lists i1 order by l;
select l, (select l=any(select l from lists where l=s1.l) from lists s1 where l=i1.l) as j from lists i1 order by l;
select l, (select sum(ss2.l[1]) from (select l from lists s1 where l=i1.l or l=any(select l from lists where l=s1.l)) ss2) as j from lists i1 order by l;
select l, (select sum(ss2.l[1]) from (select l from lists s1 where l=i1.l and exists(select l from lists where l=s1.l)) ss2) as j from lists i1 order by l;
select l, (select sum(ss1.l[1]) from (select l from lists s1 where l>any(select l from lists where l<>s1.l)) ss1) as j from lists i1 order by l;
select l, (select sum(ss1.l[1]) from (select l from lists s1 where l>any(select l from lists where l<>s1.l)) ss1 left outer join (select l from lists s1 where l=i1.l and l=any(select l from lists where l=s1.l)) ss2 on ss1.l=ss2.l) as j from lists i1 order by l;
select l, (select sum(ss2.l[1]) from (select l from lists s1 where l>any(select l from lists where l<>s1.l)) ss1 left outer join (select l from lists s1 where l=i1.l and l=any(select l from lists where l=s1.l)) ss2 on ss1.l=ss2.l) as j from lists i1 order by l;
select l, (select sum(ss1.l[1])+sum(ss2.l[1]) from (select l from lists s1 where l>any(select l from lists where l<>s1.l)) ss1 left outer join (select l from lists s1 where l=i1.l and l=any(select l from lists where l=s1.l)) ss2 on ss1.l=ss2.l) as j from lists i1 order by l;
select l, (select sum(ss1.l[1])+sum(ss2.l[1]) from (select l from lists s1 where l=i1.l and l>any(select l from lists where l<>s1.l)) ss1 left outer join (select l from lists s1 where l=any(select l from lists where l=s1.l)) ss2 on ss1.l=ss2.l) as j from lists i1 order by l;
select l, (select sum(ss1.l[1])+sum(ss2.l[1]) from (select l from lists s1 where l=i1.l and l>any(select l from lists where l<>s1.l)) ss1 left outer join (select l from lists s1 where l<>i1.l or l=any(select l from lists where l=s1.l)) ss2 on ss1.l=ss2.l) as j from lists i1 order by l;
select l, (select * from (select (select 42+i1.l[1])) s1) as j from lists i1 order by l;
select l, (select s1.k+s2.k from (select (select 42+i1.l[1]) as k) s1, (select (select 42+i1.l[1]) as k) s2) as j from lists i1 order by l;
select l, (select s1.k+s2.k from (select (select 42+i1.l[1]) as k) s1 left outer join (select (select 42+i1.l[1]) as k) s2 on s1.k=s2.k) as j from lists i1 order by l;
select l, (select i1.l[1] in (1, 2, 3, 4, 5, 6, 7, 8)) as j from lists i1 order by l;
select (select (select covar_pop(i1.l[1], i3.l[1]) from lists i3) from lists i2 limit 1) from lists i1 order by 1;
select (select (select covar_pop(i2.l[1], i3.l[1]) from lists i3) from lists i2 limit 1) from lists i1 order by 1;
select unnest(l) from nested_lists;
select l, (select sum(a) from (select unnest(b) as a from (select unnest(l) as b))) from nested_lists order by l;
select i, exists(select i from integers where i1.i>2) from integers i1 order by i;
select i, exists(select i from integers where i=i1.i) from integers i1 order by i;
select i, exists(select i from integers where i is null or i>i1.i*10) from integers i1 order by i;
select i, exists(select i from integers where i1.i>i or i1.i is null) from integers i1 order by i;
select i from integers i1 where exists(select i from integers where i=i1.i) order by i;
select exists(select i from integers where i>min(i1.i)) from integers i1;
select i, sum(i) from integers i1 group by i having exists(select i from integers where i>min(i1.i)) order by i;
select exists(select i+min(i1.i) from integers where i=3) from integers i1;
select exists(select i+min(i1.i) from integers where i=5) from integers i1;
select exists(select i from integers where i=i1.i) as g, count(*) from integers i1 group by g order by g;
select sum(case when exists(select i from integers where i=i1.i) then 1 else 0 end) from integers i1;
select (select covar_pop(i1.i, i2.i) from integers i2) from integers i1 order by 1;
select (select covar_pop(i2.i, i1.i) from integers i2) from integers i1 order by 1;
select (select covar_pop(i1.i+i2.i, i1.i+i2.i) from integers i2) from integers i1 order by 1;
select (select covar_pop(i2.i, i2.i) from integers i2) from integers i1 order by 1;
select (select covar_pop(i1.i, i1.i) from integers i2 limit 1) from integers i1 order by 1;
select exists(select 1);
select exists(select 1) from integers;
select exists(select * from integers);
select exists(select * from integers where i is null);
select * from integers where exists(select 1) order by i;
select * from integers where exists(select * from integers) order by i;
select * from integers where not exists(select * from integers) order by i;
select * from integers where exists(select null) order by i;
select exists(select * from integers where i>10);
select exists(select * from integers), exists(select * from integers);
select exists(select * from integers) and exists(select * from integers);
select exists(select exists(select * from integers));
select * from integers where 1 in (select 1) order by i;
select * from integers where 1 in (select * from integers) order by i;
select * from integers where 1 in (select null::integer) order by i;
select 1 in (select null::integer) from integers;
select null in (select * from integers) from integers;
select sum(i) from integers where 1 in (select * from integers);
select i, j, (select max(x) from (values (i), (j)) as x(x)) as maxn from test;
select i, j, (select max(x) from (values (i), (j), (3), (null), (5)) as x(x)) as maxn from test;
select (select max(x) from (values ((select i))) tbl(x)) from integers order by i;
select (select max(x) from (values ((select * from (values (i)) tbl3(x)))) tbl(x)) from integers order by i;
select (select max(x) from (values (i)) tbl(x) join (values (i)) tbl2(x) using (x)) from integers order by i;
select sum(i), sum(j), sum(greatest(i, j)), sum((select max(x) from (values (i), (j)) as x(x))) as maxn from test2;
select sum(i), sum(j), sum(greatest(i, j)), sum((select max(x) from (values (i), (j), (i), (j), (i), (j)) as x(x))) as maxn from test2;
select sum(i), sum(j), sum((select max(x) from (values (i), (j)) as x(x))) as maxn from test3;
select sum(i), sum(j), sum((select max(x) from (values (i), (j), (null), (null), (6)) as x(x))) as maxn from test3;
select i, ( select * from integers where i>i1.i order by i asc nulls first limit 1 ) top from integers i1 order by i;
select i, ( select * from integers where i>i1.i order by i desc nulls first limit 1 ) top from integers i1 order by i;
select i, (select s1.i from (select * from integers where i=i1.i) s1) as j from integers i1 order by i;
select i, (select s1.i from (select i from integers where i=i1.i) s1 inner join (select i from integers where i=4-i1.i) s2 on s1.i>s2.i) as j from integers i1 order by i;
select i, (select s1.i from integers s1, integers s2 where s1.i=s2.i and s1.i=4-i1.i) as j from integers i1 order by i;
select i, (select s1.i from integers s1 inner join integers s2 on s1.i=s2.i and s1.i=4-i1.i) as j from integers i1 order by i;
select * from integers s1 inner join integers s2 on (select 2*sum(i)*s1.i from integers)=(select sum(i)*s2.i from integers) order by s1.i;
select * from integers s1 inner join integers s2 on (select s1.i=s2.i) order by s1.i;
select * from integers s1 inner join integers s2 on (select s1.i=i from integers where s2.i=i) order by s1.i;
select * from integers s1 left outer join integers s2 on (select 2*sum(i)*s1.i from integers)=(select sum(i)*s2.i from integers) order by s1.i;
select * from integers s1 left outer join integers s2 on s1.i=s2.i and (select case when s2.i>2 then true else false end) order by s1.i;
select i, (select i from integers where i=i1.i union select i from integers where i=i1.i) as j from integers i1 order by i;
select i, (select i from integers where i is not null except select i from integers where i<>i1.i) as j from integers i1 where i is not null order by i;
select i, (select i from integers where i=i1.i intersect select i from integers where i=i1.i) as j from integers i1 order by i;
select i, (select i from integers where i=i1.i union select i from integers where i<>i1.i except select i from integers where i<>i1.i) as j from integers i1 order by i;
select i, (select (select sum(i) from integers)+42+i1.i) as j from integers i1 order by i;
select exists(select t1.b+t1.c) from tbl t1;
select t1.c+(select t1.b from tbl t2 where exists(select t1.b+t2.a)) from tbl t1;
select 1 from tbl t1 join tbl t2 on (t1.d=t2.d) where exists(select t1.c from tbl t3 where t1.d+t3.c<100 and exists(select t2.f < date '2000-01-01'));
select * from tbl t1 left join tbl t2 on (select t2.a)<100;
select * from tbl t1 left join tbl t2 on (select t2.a)>100;
select i, (select min(i)+i1.i from integers) from integers i1 order by i;
select i, (select min(i+2*i1.i) from integers) from integers i1 order by i;
select i, sum(i), (select sum(i)+sum(i1.i) from integers) from integers i1 group by i order by i;
select i, sum(i), (select sum(i)+count(i1.i) from integers) from integers i1 group by i order by i;
select i, (select count(*) from integers i2 where i2.i>i1.i) from integers i1 order by i;
select (select sum(i1.i)) from integers i1;
select min(i), (select sum(i1.i)) from integers i1;
select (select sum(i1.i)), (select sum(i1.i)) from integers i1;
select sum(i), sum((select i from integers where i=i1.i)) from integers i1;
select sum(i), (select sum(i) from integers where i>sum(i1.i)) from integers i1;
select i, (select min(i) from integers where i>i1.i) from integers i1 order by i;
select i, (select min(i)+i1.i from integers where i>i1.i) from integers i1 order by i;
select i, (select min(i) from integers group by i1.i) as j from integers i1 order by i;
select i, (select i from integers group by i having i=i1.i) as j from integers i1 order by i;
select i1.i, sum(i) from integers i1 group by i1.i having sum(i)=(select min(i) from integers where i<>i1.i+1) order by 1;
select i % 2 as j, sum(i) from integers i1 group by j having sum(i)=(select sum(i) from integers where i<>j+1) order by 1;
select (select i+sum(i1.i) from integers where i=1 limit 1) from integers i1;
select (select sum(i)+sum(i1.i) from integers) from integers i1 order by 1;
select (select sum(i)+sum((case when i is not null then i*0 else 0 end)+i1.i) from integers) from integers i1 order by 1;
select i, (select i+sum(i1.i) from integers where i=1) from integers i1 group by i order by i;
select sum((select i+i1.i from integers where i=1)) from integers i1;
select i, sum(i1.i), (select sum(i1.i) from integers) as k from integers i1 group by i order by i;
select i1.i as j, (select sum(j+i) from integers) as k from integers i1 group by j order by j;
select (select sum(i1.i*i) from integers) from integers i1 order by i;
select i, (select sum(i1.i)) as k, (select sum(i1.i)) as l from integers i1 group by i order by i;
select i, (select sum(i1.i)*sum(i) from integers) as k from integers i1 group by i order by i;
select i as j, (select j*sum(i) from integers) as k from integers i1 group by j order by j;
select i as j, (select i1.i*sum(i) from integers) as k from integers i1 group by j order by j;
select i, sum((select sum(i)*i1.i from integers)) as k from integers i1 group by i order by i;
select first(i), (select sum(i1.i)) from integers i1;
select i as j, (select min(i1.i) from integers group by i having i=j) from integers i1 group by j order by j;
select i, sum(i1.i) from integers i1 group by i order by (select sum(i1.i) from integers);
select i, sum((select sum(i)*i1.i from integers limit 0)) as k from integers i1 group by i order by i;
select (select i+i1.i from integers where i=1) as k, sum(i) as j from integers i1 group by k order by 1;
select sum(i) from integers i1 where i>(select (i+i1.i)/2 from integers where i=1);
select sum(i) from integers i1 where i>(select (sum(i)+i1.i)/2 from integers where i=1);
select i, (select min(i) from integers where i=i1.i) >= all(select i from integers where i is not null) from integers i1 order by i;
select i, (select min(i) from integers where i<>i1.i) > any(select i from integers where i is not null) from integers i1 order by i;
select i, not((select min(i) from integers where i<>i1.i) > any(select i from integers where i is not null)) from integers i1 order by i;
select i, (select count(*) from (select i1.i from integers group by rollup (i1.i, i1.i, i1.i, i1.i)) tbl) as j from integers i1 order by i;
select count(distinct (select concat(gen_random_uuid()::varchar, r::varchar)) ) as total_seats from (select 1 from generate_series(1, 100, 1)) as t(r);
select i, (select 42+i1.i) as j from integers i1 order by i;
select i from integers i1 order by (select 100-i1.i);
select i, (select 42+i1.i from integers) as j from integers i1 order by i;
select i, (select 42+i1.i from integers limit 1) as j from integers i1 order by i;
select i, (select 42+i1.i from integers limit 0) as j from integers i1 order by i;
select i, (select i+i1.i from integers limit 1 offset 1) as j from integers i1 order by i;
select i, (select i+i1.i from integers order by i nulls last limit 1) as j from integers i1 order by i;
select i, (select i+i1.i from integers order by i nulls last limit 1 offset 1) as j from integers i1 order by i;
select i, (select i+i1.i from integers where i=1) as j from integers i1 order by i;
select i, (select i from integers where i=i1.i) as j from integers i1 order by i;
select i, (select i+1 from integers where i=i1.i) as j from integers i1 order by i;
select i, (select 42 from integers where i=i1.i) as j from integers i1 order by i;
select i, (with i2 as (select 42+i1.i as j) select j from i2) as j from integers i1 order by i;
select i from integers i1 order by (with i2 as (select 100-i1.i as j) select j from i2);
select i, (with i2 as (select 42+i1.i as j from integers) select j from i2) as j from integers i1 order by i;
select i, (with i2 as (select 42+i1.i as j from integers) select j from i2 limit 1) as j from integers i1 order by i;
select i, (with i2 as (select 42+i1.i as j from integers) select j from i2 limit 0) as j from integers i1 order by i;
select i, (with i2 as (select i+i1.i from integers limit 1 offset 1) select * from i2) as j from integers i1 order by i;
select i, (with i2 as (select i+i1.i from integers order by 1 nulls last limit 1 offset 1) select * from i2) as j from integers i1 order by i;
select i, (with i2 as (select i+i1.i from integers where i=1) select * from i2) as j from integers i1 order by i;
select i, (with i2 as (select i from integers where i=i1.i) select * from i2) as j from integers i1 order by i;
select i, (with i2 as (select i+1 from integers where i=i1.i) select * from i2) as j from integers i1 order by i;
select i, (with i2 as (select 42 from integers where i=i1.i) select * from i2) as j from integers i1 order by i;
select * from test where b=(select min(b) from test as a where a.id=test.id);
select * from test where b=(select min(b) from test as a where a.id=test.id and a.id < test.b);
select i, (select i from integers i2 where i=(select sum(i) from integers i2 where i2.i>i1.i)) from integers i1 order by 1;
select i, (select sum(i) is null from integers i2 where i2.i>i1.i) from integers i1 order by i;
select i, (select count(i) from integers i2 where i2.i>i1.i or i2.i is null) from integers i1 order by i;
select i, (select count(*) from integers i2 where i2.i>i1.i or i2.i is null) from integers i1 order by i;
select i, (select count(*) from integers i2 where i2.i>i1.i or (i1.i is null and i2.i is null)) from integers i1 order by i;
select i from integers i1 where (select count(*) from integers i2 where i2.i>i1.i)=0 order by i;
select i, (select i from integers i2 where i-2=(select count(*) from integers i2 where i2.i>i1.i)) from integers i1 order by 1;
select i, (select count(*) from integers i2 where i2.i>i1.i group by i1.i) from integers i1 order by i;
select i, (select case when (select count(*) from integers i2 where i2.i>i1.i)=0 then 1 else 0 end) from integers i1 order by i;
select id, i from integers order by id;
select col1 in (select colid from tbl_productsales) from another_t;
select col1 in (select colid + col1 from tbl_productsales) from another_t;
select col1 in (select colid + col1 from tbl_productsales) from another_t group by col1;
select col1 in (select colid + another_t.col1 from tbl_productsales) from another_t group by col1;
select (col1 + 1) as k, k in (select colid + k from tbl_productsales) from another_t group by k order by 1;
select col5 = all (select 1 from tbl_productsales having min(col8) is null) from another_t group by col1, col2, col5, col8;
select case when 1 in (select max(col7) union all (select min(colid) from tbl_productsales inner join another_t t2 on t2.col5 = t2.col1)) then 2 else null end from another_t t1;
select case when 1 in (select (select max(col7))) then 2 else null end from another_t t1;
select case when 1 in (select (select max(col7)) union all (select min(colid) from tbl_productsales inner join another_t t2 on t2.col5 = t2.col1)) then 2 else null end from another_t t1;
select case when 1 in (select (select min(colid) from tbl_productsales inner join another_t t2 on t2.col5 = t2.col1) union all (select max(col7))) then 2 else null end from another_t t1;
select (select min(colid) from tbl_productsales inner join another_t t2 on t1.col7 <> (select max(t1.col1 + t3.col4) from another_t t3)) from another_t t1;
select (select min(colid) from tbl_productsales inner join another_t t2 on t1.col7 <> any(select max(t1.col1 + t3.col4) from another_t t3)) from another_t t1;
select * from test, test2 where test.id=test2.id and test_value*test2_value=(select min(test_value*test2_value) from test as a, test2 where a.id=test.id and a.id=test2.id);
select a, sum(a), (select sum(a)+sum(t1.b) from test) from test t1 group by a order by a;
select (select test.a+test.b+sum(test2.a) from test2 where str=str2) from test order by 1;
select a, a>=any(select test2.a+c-b from test2 where c>=b and str=str2) from test order by 1;
select str, str=any(select str2 from test2) from test;
select str, str=any(select str2 from test2 where test.a<>test2.a) from test;
select i, (select (select 42+i1.i)+42+i1.i) as j from integers i1 order by i;
select i, (select (select (select (select 42+i1.i)++i1.i)+42+i1.i)+42+i1.i) as j from integers i1 order by i;
select i, (select (select i1.i+sum(i2.i)) from integers i2) as j from integers i1 order by i;
select i, (select (select (select (select i1.i+i1.i+i1.i+i1.i+i1.i)))) as j from integers i1 order by i;
select i, (select sum(i)+(select 42+i1.i) from integers) as j from integers i1 order by i;
select i, (select ((select ((select ((select sum(i)+sum(i4.i)+sum(i3.i)+sum(i2.i)+sum(i1.i) from integers i5)) from integers i4)) from integers i3)) from integers i2) as j from integers i1 group by i order by i;
select i, (select (select (select (select i1.i+i1.i+i1.i+i1.i+i1.i+i2.i) from integers i2 where i2.i=i1.i))) as j from integers i1 order by i;
select (select (select sum(i1.i)+sum(i2.i)+sum(i3.i) from integers i3) from integers i2) from integers i1 order by 1;
select i, (select sum(s1.i) from integers s1 inner join integers s2 on (select i1.i+s1.i)=(select i1.i+s2.i)) as j from integers i1 order by i;
select i, sum(i), (select (select sum(i)+sum(i1.i)+sum(i2.i) from integers) from integers i2) from integers i1 group by i order by i;
select i, (select sum(ss1.i) from (select i from integers s1 where i>any(select i from integers where i<>s1.i)) ss1) as j from integers i1 order by i;
select i, (select sum(ss2.i) from (select i from integers s1 where i=i1.i and i=any(select i from integers where i=s1.i)) ss2) as j from integers i1 order by i;
select i, (select sum(ss1.i)+sum(ss2.i) from (select i from integers s1 where i>any(select i from integers where i<>s1.i)) ss1 left outer join (select i from integers s1 where i=any(select i from integers where i=s1.i)) ss2 on ss1.i=ss2.i) as j from integers i1 order by i;
select i, (select sum(s1.i) from (select i from integers where i=i1.i) s1 left outer join integers s2 on s1.i=s2.i) as j from integers i1 order by i;
select i, (select sum(s1.i) from (select i from integers where i<>i1.i) s1 left outer join integers s2 on s1.i=s2.i) as j from integers i1 order by i;
select i, (select sum(s2.i) from integers s1 left outer join (select i from integers where i=i1.i) s2 on s1.i=s2.i) as j from integers i1 order by i;
select i, (select sum(s2.i) from integers s1 left outer join (select i from integers where i<>i1.i) s2 on s1.i=s2.i) as j from integers i1 order by i;
select i, (select sum(ss2.i) from (select i from integers s1 where case when (i=i1.i and i=any(select i from integers where i=s1.i)) then true else false end) ss2) as j from integers i1 order by i;
select i, (select sum(ss2.i) from (select i from integers s1 where i=i1.i) ss2) as j from integers i1 order by i;
select i, (select sum(ss2.i) from (select i from integers s1 where i=any(select i from integers where i=s1.i)) ss2) as j from integers i1 order by i;
select i, (select i=any(select i from integers where i=s1.i) from integers s1 where i=i1.i) as j from integers i1 order by i;
select i, (select sum(ss2.i) from (select i from integers s1 where i=i1.i or i=any(select i from integers where i=s1.i)) ss2) as j from integers i1 order by i;
select i, (select sum(ss2.i) from (select i from integers s1 where i=i1.i and exists(select i from integers where i=s1.i)) ss2) as j from integers i1 order by i;
select i, (select sum(ss1.i) from (select i from integers s1 where i>any(select i from integers where i<>s1.i)) ss1 left outer join (select i from integers s1 where i=i1.i and i=any(select i from integers where i=s1.i)) ss2 on ss1.i=ss2.i) as j from integers i1 order by i;
select i, (select sum(ss2.i) from (select i from integers s1 where i>any(select i from integers where i<>s1.i)) ss1 left outer join (select i from integers s1 where i=i1.i and i=any(select i from integers where i=s1.i)) ss2 on ss1.i=ss2.i) as j from integers i1 order by i;
select i, (select sum(ss1.i)+sum(ss2.i) from (select i from integers s1 where i>any(select i from integers where i<>s1.i)) ss1 left outer join (select i from integers s1 where i=i1.i and i=any(select i from integers where i=s1.i)) ss2 on ss1.i=ss2.i) as j from integers i1 order by i;
select i, (select sum(ss1.i)+sum(ss2.i) from (select i from integers s1 where i=i1.i and i>any(select i from integers where i<>s1.i)) ss1 left outer join (select i from integers s1 where i=any(select i from integers where i=s1.i)) ss2 on ss1.i=ss2.i) as j from integers i1 order by i;
select i, (select sum(ss1.i)+sum(ss2.i) from (select i from integers s1 where i=i1.i and i>any(select i from integers where i<>s1.i)) ss1 left outer join (select i from integers s1 where i<>i1.i or i=any(select i from integers where i=s1.i)) ss2 on ss1.i=ss2.i) as j from integers i1 order by i;
select i, (select * from (select (select 42+i1.i)) s1) as j from integers i1 order by i;
select i, (select s1.k+s2.k from (select (select 42+i1.i) as k) s1, (select (select 42+i1.i) as k) s2) as j from integers i1 order by i;
select i, (select s1.k+s2.k from (select (select 42+i1.i) as k) s1 left outer join (select (select 42+i1.i) as k) s2 on s1.k=s2.k) as j from integers i1 order by i;
select i, (select i1.i in (1, 2, 3, 4, 5, 6, 7, 8)) as j from integers i1 order by i;
select (select (select covar_pop(i1.i, i3.i) from integers i3) from integers i2 limit 1) from integers i1 order by 1;
select (select (select covar_pop(i2.i, i3.i) from integers i3) from integers i2 limit 1) from integers i1 order by 1;
select 1+(select 1);
select 1=(select 1);
select 1<>(select 1);
select 1=(select null);
select null=(select 1);
select (select 42);
select (select (select 42));
select * from (select 42) v1(a);
select * from (select 42, 41 as x) v1(a);
select (select a * 42 from test);
select a*(select 42) from test;
select c-(select sum(c) from t1) from t1;
select case when c>(select sum(c)/count(*) from t1) then a*2 else b*10 end from t1;
select a, (select sum(b) from test tsub where test.a=tsub.a) from test;
select a, (select case when test.a=11 then 22 else null end) from test order by a;
select a, (select case when test.a=11 then b else null end from test tsub) from test order by a;
select a, (select case when test.a=11 then b else null end from test tsub limit 1) from test order by a;
select * from test where a=(select min(a) from test t where t.b=test.b);
select * from test where exists (select a from test ts where ts.a = test.a and b>21);
select * from (select 42 as a, 44 as a) tbl1;
select 1+(with cte as (select 1) select * from cte);
select 1=(with cte as (select 1) select * from cte);
select 1<>(with cte as (select 1) select * from cte);
select 1=(with cte as (select null) select * from cte);
select (with cte as (select 42) select * from cte);
select (with cte1 as (with cte2 as (select 42) select * from cte2) select * from cte1);
select * from (with cte(x) as (select 42) select x from cte) v1(a);
select * from (with cte as (select 42, 41 as x) select * from cte) v1(a);
select (with cte as (select a * 42 from test) select * from cte);
select a*(with cte as (select 42) select * from cte) from test;
select c-(with cte as (select sum(c) from t1) select * from cte) from t1;
select case when c>(with cte as (select sum(c)/count(*) from t1) select * from cte) then a*2 else b*10 end from t1;
select a, (with cte as (select sum(b) from test tsub where test.a=tsub.a) select * from cte) from test;
select a, (with cte as (select case when test.a=11 then 22 else null end) select * from cte) from test order by a;
select a, (with cte as (select case when test.a=11 then b else null end from test tsub) select * from cte) from test order by a;
select a, (with cte as (select case when test.a=11 then b else null end from test tsub limit 1) select * from cte) from test order by a;
select * from test where a=(with cte as (select a from test t where t.b=test.b) select min(a) from cte);
select * from test where exists (with cte as (select * from test ts where ts.a = test.a and b>21) select a from cte);
select * from (with cte as (select 42 as a, 44 as a) select * from cte) tbl1;
select i in (select i1.i from (select * from integers i1 where i1.i=integers.i) i1 join generate_series(1, 2, 1) tbl(i) on i1.i=tbl.i) from integers order by i nulls last;
select i in (select i1.i from (select * from integers i1 where i1.i=integers.i) i1 left join generate_series(1, 2, 1) tbl(i) on i1.i=tbl.i) from integers order by i nulls last;
select i in (select i1.i from (select * from integers i1 where i1.i=integers.i) i1 right join generate_series(1, 2, 1) tbl(i) on i1.i=tbl.i) from integers order by i nulls last;
select i in (select i1.i from generate_series(1, 2, 1) tbl(i) left join (select * from integers i1 where i1.i=integers.i) i1 on i1.i=tbl.i) from integers order by i nulls last;
select i in (select i1.i from generate_series(1, 2, 1) tbl(i) right join (select * from integers i1 where i1.i=integers.i) i1 on i1.i=tbl.i) from integers order by i nulls last;
select * from item i1 where (select count(*) as item_cnt from item where (i_manufact = i1.i_manufact and i_manufact=3) or (i_manufact = i1.i_manufact and i_manufact=3)) > 0 order by 1 limit 100;
select * from item i1 where (select count(*) as item_cnt from item where (i_manufact = i1.i_manufact and i_manufact=3) or (i_manufact = i1.i_manufact and i_manufact=3)) order by 1 limit 100;
select * from integers where i=(select 1);
select * from integers where i=(select sum(1));
select * from integers where i=(select min(i) from integers);
select * from integers where i=(select max(i) from integers);
select *, (select max(i) from integers) from integers order by i;
select (select 42) as k, max(i) from integers group by k;
select i, max((select 42)) from integers group by i order by i;
select (select * from integers where i>10) from integers;
select * from integers where i=(select i from integers where i is not null order by i);
select * from integers where i=(select i from integers where i is not null order by i limit 1);
select * from integers where exists (select 1, 2);
select * from integers where exists (select i, i + 2 from integers);
select (select * from integers where i=1);
select (select i from integers where i=1);
select * from integers where i > (select i from integers where i=1) order by 1;
select null in (select * from strings);
select 'hello' in (select * from strings);
select 'bla' in (select * from strings);
select 'bla' in (select * from strings where v is not null);
select * from strings where exists(select null);
select * from strings where exists(select v from strings where v='bla');
select (select v from strings where v='hello') from strings;
select (select v from strings where v='bla') from strings;
select (select unnest([1]));
select (select unnest([null]));
select (select unnest([]));
select (select unnest(i)) from (values ([1])) tbl(i);
select (select unnest(i)) from (values ([null])) tbl(i);
select (select unnest(i)) from (values ([])) tbl(i);
select (select sum(k) from (select unnest(i)) tbl(k)) from (values ([1, 2, 3])) tbl(i);
select (select sum(k)+sum(l) from (select unnest(i), unnest(j) from (values ([1, 2, 3])) tbl(j)) tbl(k, l)) from (values ([1, 2, 3])) tbl(i);
select 1=any(select unnest(i)) from (values ([1, 2, 3])) tbl(i);
select 4=any(select unnest(i)) from (values ([1, 2, 3])) tbl(i);
select null=any(select unnest(i)) from (values ([1, 2, 3])) tbl(i);
select 4=any(select unnest(i)) from (values ([1, 2, 3, null])) tbl(i);
select 1 in (select unnest(i)) from (values ([1, 2, 3])) tbl(i);
select (select 1=any(select unnest(i))) from (values ([1, 2, 3])) tbl(i);
select (select 4=any(select unnest(i))) from (values ([1, 2, 3])) tbl(i);
select (select 4=any(select unnest(i))) from (values ([1, 2, 3, null])) tbl(i);
select (select 1+i[1]=any(select unnest(i))) from (values ([1, 2, 3])) tbl(i);
select null in (select * from strings where v=s1.v) from strings s1 order by v;
select 3 in (select * from strings where v=s1.v) from strings s1 order by v;
select 'hello' in (select * from strings where v=s1.v) from strings s1 order by v;
select 'bla' in (select * from strings where v=s1.v) from strings s1 order by v;
select 'hello' in (select * from strings where v=s1.v or v is null) from strings s1 order by v;
select 'bla' in (select * from strings where v=s1.v or v is null) from strings s1 order by v;
select * from strings where exists(select null, v) order by v;
select * from strings s1 where exists(select v from strings where v=s1.v or v is null) order by v;
select * from strings s1 where exists(select v from strings where v=s1.v) order by v;
select (select v from strings where v=s1.v) from strings s1 order by v;
select (select v from strings where v=s1.v or (v='hello' and s1.v is null)) from strings s1 order by v;
select i, (select row_number() over (order by i) from integers where i1.i=i) from integers i1 order by i;
select i1.i, (select rank() over (order by i) from integers where i1.i=i) from integers i1, integers i2 order by i1.i;
select i1.i, (select row_number() over (order by i) from integers where i1.i=i) from integers i1, integers i2 order by i1.i;
select i, (select sum(i) over (order by i) from integers where i1.i=i) from integers i1 order by i;
select i, (select sum(s1.i) over (order by s1.i) from integers s1, integers s2 where i1.i=s1.i limit 1) from integers i1 order by i;
select * from (select i as j from a group by j) sq1 where j = 42;
select * from (select i as j from a group by i) sq1 where j = 42;
select * from (select i, j from (select j as i, i as j from (select j as i, i as j from test) as a) as a) as a, (select i+1 as r,j from test) as b, test where a.i=b.r and test.j=a.i order by 1;
select i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from (select i + 1 as i from test) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a) as a;
select * from (select 42) sq1 union all select * from (select 43) sq2;
select * from (select i, j as d from test order by i) as b;
select b.d from (select i * 2 + j as d from test) as b;
select a.i,a.j,b.r,b.j from (select i, j from test) as a inner join (select i+1 as r,j from test) as b on a.i=b.r order by 1;
select * from (select i, j from test) as a, (select i+1 as r,j from test) as b, test where a.i=b.r and test.j=a.i order by 1;
select sum(x) from (select i as x from test group by i) sq;
select sum(x) from (select i+1 as x from test group by x) sq;
select a from (select 42 a);
select * from (select 42 a), (select 43 b);
select * from (values (42, 43));
select s.name, e.course, e.grade from students s, exams e where s.id=e.sid and e.grade=(select max(e2.grade) from exams e2 where s.id=e2.sid) order by name, course;
select s.name, e.course, e.grade from students s, exams e where s.id=e.sid and (s.major = 'cs' or s.major = 'games eng') and e.grade <= (select avg(e2.grade) - 1 from exams e2 where s.id=e2.sid or (e2.curriculum=s.major and s.year>=e2.year)) order by name, course;
select name, major from students s where exists(select * from exams e where e.sid=s.id and grade=10) or s.name='dirk' order by name;
select tables.table_name, column_name, data_type, column_default, is_nullable, numeric_precision, numeric_precision_radix, numeric_scale from duckdb_columns cols join duckdb_tables tables using (table_oid) order by 1, 2, 3;
select table_name, constraint_index, constraint_type, unnest(constraint_column_names) col_name from duckdb_constraints order by table_name, constraint_index, col_name;
select extension_name from duckdb_extensions() where loaded and extension_name='tpch';
select distinct function_name from duckdb_functions() where function_name='sqrt';
select count(*) from duckdb_schemas;
select count(*) from duckdb_schemas() where schema_name='scheme';
select count(*) from duckdb_schemas where schema_name='scheme';
select count(*) from duckdb_sequences();
select schema_name, sequence_name, temporary, start_value, min_value, max_value, increment_by, cycle from duckdb_sequences() order by sequence_name;
select name, value from duckdb_settings() where name='default_null_order';
select count(*) from duckdb_tables();
select schema_name, table_name, temporary, has_primary_key, estimated_size, column_count, index_count, check_constraint_count from duckdb_tables() order by table_name;
select count(*) from duckdb_views;
select schema_name, view_name, temporary from duckdb_views() where not internal order by view_name;
select schema_name, view_name, temporary from duckdb_views order by view_name;
select count(*) from information_schema.schemata where schema_name='scheme';
select table_type from information_schema.tables where table_schema='scheme' and table_name='integers';
select ordinal_position, column_name, data_type from information_schema.columns where table_name='integers';
select table_type from information_schema.tables where table_schema='temp' and table_name='reals';
select numeric_precision, numeric_scale, is_nullable from information_schema.columns where table_name='reals' order by ordinal_position;
select table_type from information_schema.tables where table_schema='scheme' and table_name='vintegers';
select ordinal_position, column_name, data_type from information_schema.columns where table_schema='scheme' and table_name='vintegers';
select count(*) from information_schema.tables where table_schema='scheme';
select count(*) from information_schema.columns where table_schema='scheme';
select * from range(4,15,6);
select * from range(-4,-15,-6);
select * from range(4,15);
select * from range(4,15,3)a;
select * from range(-4,-15,-3)a;
select * from range(4,15,5)a;
select * from range(4,19,5)a;
select * from generate_series(4,19,5)a;
select d::date from range(date '1992-01-01', date '1992-10-01', interval (1) month) tbl(d);
select d::date from generate_series(date '1992-01-01', date '1992-10-01', interval (1) month) tbl(d);
select d from range(timestamp '1992-01-01 00:00:00', timestamp '1992-01-01 12:00:00', interval (1) hour) tbl(d);
select * from sqlite_master;
select exists(select * from sqlite_master);
select count(*) from sqlite_master where name='test';
select count(*) from sqlite_master where name='integers';
select * from sqlite_master where name='tconstraint1';
select * from sqlite_master where name='tconstraint2';
select * from sqlite_master where name='i_index';
select "type", "name", "tbl_name", rootpage from sqlite_master where name='v1';
select count(1) from information_schema.columns where table_name='wide';
select count(1) from information_schema.columns where table_name='wide' and column_name='col1024' and data_type='bigint';
select count(1) from information_schema.columns where table_name='wide' or table_name='vwide';
select * from range(0, 10, 1);
select * from generate_series(0, 10, 1);
select * from range(10, 0, -1) order by 1 asc;
select * from generate_series(10, 0, -1) order by 1 asc;
select * from range(0, -5, -1);
select * from range(10);
select * from range(0, 10);
select exists(select * from range(10));
select exists(select * from range(0));
select * from range(10) t1(j) where j=3;
select * from generate_series(-2305843009213693951, 2305843009213693951, 2305843009213693951);
select * from generate_series(2305843009213693951, -2305843009213693951, -2305843009213693951);
select * from generate_series(0, 10, 9223372036854775807);
select * from generate_series(0, 9223372036854775807, 9223372036854775807);
select * from generate_series(0, -9223372036854775807, -9223372036854775807);
select * from generate_series(-9223372036854775808, 9223372036854775807, 9223372036854775807);
select * from generate_series(-9223372036854775807, -9223372036854775808, -1);
select * from generate_series(0, -9223372036854775808, -9223372036854775808);
select * from repeat(0, 3);
select * from repeat(null, 2);
select * from repeat('hello', 2);
select * from repeat('thisisalongstring', 2);
select * from repeat(blob '\x00\x00hello', 2);
select * from repeat(1, 10000);
select * from repeat(date '1992-01-01', 2);
select * from pragma_table_info('integers');
select name from pragma_table_info('integers');
select a.name, cid, value from pragma_table_info('integers') as a inner join join_table on a.name=join_table.name order by a.name;
select cid, name from (select * from pragma_table_info('integers')) as a;
select name from icu_calendar_names() group by 1 order by 1;
select * from duckdb_settings() where name = 'calendar';
select era, ts, date_part(['era', 'year', 'month', 'day'], ts) from timestamps order by 2;
select * from duckdb_settings() where name = 'timezone';
select name, abbrev, utc_offset from pg_timezone_names() order by name;
select b from test order by b desc limit 2;
select b from test order by b limit 1 offset 1;
select b from test order by b limit 10 offset 1;
select b from test order by b limit 10 offset 10;
select l from tbl order by l nulls first limit 5;
select l from tbl order by l nulls last limit 5;
select l from tbl order by l desc nulls first limit 5;
select l from tbl order by l desc nulls last limit 5;
select range(i) l from range(10) tbl(i) order by l desc limit 3;
select range(i) l from range(10) tbl(i) order by l asc limit 3;
select * from tbl order by j, i limit 5;
select * from tbl order by j desc, i desc limit 5;
select * from integers order by i nulls first limit 2;
select * from integers order by i nulls last limit 2;
select * from integers order by i desc nulls first limit 2;
select * from integers order by i desc nulls last limit 2;
select i from integers order by i asc nulls first limit 5;
select i from integers order by i asc nulls last limit 5;
select i from integers order by i desc nulls first limit 5;
select i from integers order by i desc nulls last limit 5;
select i from integers order by i nulls first limit 5 offset 1000;
select i from integers order by i desc nulls first limit 5 offset 1000;
select i from integers order by i nulls last limit 5 offset 1000;
select j, i from integers order by j, i nulls first limit 5;
select j, i from integers order by j, i nulls last limit 5;
select j, i from integers order by j desc, i desc nulls first limit 5;
select j, i from integers order by j desc, i desc nulls last limit 5;
select i, j from integers order by i desc nulls first, j desc limit 5;
select i, j from integers order by i desc nulls last, j asc limit 5;
select * from final order by channel nulls first, i_brand_id nulls first, i_class_id nulls first, i_category_id nulls first limit 100;
select * from final order by channel desc nulls first, i_brand_id desc nulls first, i_class_id desc nulls first, i_category_id desc nulls first limit 100;
select * from final order by channel nulls last, i_brand_id nulls last, i_class_id nulls last, i_category_id nulls last limit 100;
select * from final order by channel desc nulls last, i_brand_id desc nulls last, i_class_id desc nulls last, i_category_id desc nulls last limit 100;
select * from final order by s_store_name1 nulls first, s_store_id1 nulls first, d_week_seq1 nulls first limit 100;
select src.rowid sr, b, test.rowid tr, a from src, test where src.b = test.a;
select b from src;
select count(*)=0 from integers;
select (count(*)-2047)=0, min(i), max(i), (count(i)-2047)=0 from integers order by 1;
select count(*) from integers where i=4;
select i from integers where i=1;
select i from integers where i=4;
select i from integers order by i;
select j from integers where i=1;
select count(*), count(distinct rowid) from integers where i=1;
select count(*) from integers where i=2;
select count(*) from integers where i=3;
select i from a;
select nextval('seq');
select * from hugeints order by 1;
select count(distinct h) from hugeints;
select h, count(*) from hugeints group by h order by 2 desc;
select * from person where current_alias = 'sad';
select * from person where current_alias > 'ok';
select * from pets;
select person.name, pets.name from person inner join pets on (person.current_alias = pets.current_alias);
select * from aliens;
select * from person where current_alias = last_year_alias;
select * from person where current_alias = 'ok';
select count(*), current_alias from person group by current_alias;
select name, current_alias from person order by current_alias;
select ''::blob;
select null::blob;
select * from blob_empty;
select 'a'::bytea::varchar;
select 'a'::varchar::bytea;
select '\x20\x00\xff'::bytea;
select '\x20\x00\xff'::blob::varchar;
select '\x20\x00\xff'::blob::varchar::blob;
select '\x20\x00\xff'::blob::varchar::blob::varchar;
select '\x20\x00\xff'::varchar::blob::varchar::blob;
select b || 'zz'::bytea from blobs;
select 'abc '::bytea || 'klm *\xef\xbf\xbdt'::bytea;
select count(*) from blobs;
select octet_length(b) from blobs;
select b || '\x5a\x5a'::bytea from blobs;
select count(*), count(b), min(b), max(b) from blobs;
select * from blobs order by b;
select b, sum(g) from blobs group by b order by b;
select l.b, sum(l.g) from blobs as l join blobs2 as r on l.b=r.b group by l.b order by l.b;
select r.b, sum(r.g) from blobs as l, blobs2 as r where l.b=r.b group by r.b order by r.b;
select octet_length(b) from blobs order by 1;
select try_cast('\\' as blob);
select try_cast('\\x3' as blob);
select try_cast('\\b12' as blob);
select try_cast('\\xx2' as blob);
select try_cast('\\x2x' as blob);
select try_cast('ü' as blob);
select try_cast('\x12' as blob);
select cast('\x12' as blob);
select '1969-01-01'::date;
select '2370-01-01'::date;
select '5877642-06-25 (bc)'::date;
select '290308-01-01 (bc)'::date::timestamp;
select '5877642-06-25 (bc)'::date + 1;
select '5877642-06-25 (bc)'::date + interval (1) day;
select '5877642-06-25 (bc)'::date + interval (1) month;
select '5881580-07-10'::date;
select '294246-12-31'::date::timestamp;
select '5881580-07-10'::date - 1;
select '5881580-07-10'::date - interval (1) day;
select '5881580-07-10'::date - interval (1) month;
select '5881580-07-10'::date - '5877642-06-25 (bc)'::date;
select try_cast('' as date);
select try_cast(' ' as date);
select try_cast('1111' as date);
select try_cast(' 1111 ' as date);
select try_cast('1111-' as date);
select try_cast('1111-11' as date);
select try_cast('1111-11-' as date);
select try_cast('1111-111-1' as date);
select try_cast('1111-11-111' as date);
select try_cast('1111-11-11' as date);
select try_cast('1111-11-11 (bc)' as date);
select try_cast('2001-02-29' as date);
select try_cast('2004-02-29' as date);
select try_cast('2004/02/29' as date);
select try_cast('2004/02-29' as date);
select try_cast('5877642-06-25 (bc)' as date);
select try_cast('5877642-06-24 (bc)' as date);
select try_cast('-infinity' as date);
select try_cast('99999999-06-22 (bc)' as date);
select try_cast('290308-01-01 (bc)'::date as timestamp);
select try_cast('290309-01-01 (bc)'::date as timestamp);
select try_cast('5877642-06-25 (bc)'::date as timestamp);
select try_cast('5881580-07-10' as date);
select try_cast('5881580-07-11' as date);
select try_cast('infinity' as date);
select try_cast('5881580-08-11' as date);
select try_cast('99999999-01-01' as date);
select try_cast('294246-12-31'::date as timestamp);
select try_cast('294247-12-31'::date as timestamp);
select year(i) from dates;
select cast(i as varchar) from dates;
select date '0000-01-01';
select date '1992-01-01 (bc)';
select date '-1992-01-01';
select d, d::varchar from bc_dates order by 1;
select i + 5 from dates;
select i - 5 from dates;
select (i + 5) - i from dates;
select count(*) from dates inner join timestamp on (timestamp.i::date = dates.i);
select 127::decimal(3,0)::tinyint, -127::decimal(3,0)::tinyint, -7::decimal(9,1)::tinyint, 27::decimal(18,1)::tinyint, 33::decimal(38,1)::tinyint;
select 127::decimal(3,0)::smallint, -32767::decimal(5,0)::smallint, -7::decimal(9,1)::smallint, 27::decimal(18,1)::smallint, 33::decimal(38,1)::smallint;
select 127::decimal(3,0)::integer, -2147483647::decimal(10,0)::integer, -7::decimal(9,1)::integer, 27::decimal(18,1)::integer, 33::decimal(38,1)::integer;
select 127::decimal(3,0)::bigint, -9223372036854775807::decimal(19,0)::bigint, -7::decimal(9,1)::bigint, 27::decimal(18,1)::bigint, 33::decimal(38,1)::bigint;
select 127::decimal(3,0)::hugeint, -17014118346046923173168730371588410572::decimal(38,0)::hugeint, -7::decimal(9,1)::hugeint, 27::decimal(18,1)::hugeint, 33::decimal(38,1)::hugeint;
select 127::decimal(3,0)::float, -17014118346046923173168730371588410572::decimal(38,0)::float, -7::decimal(9,1)::float, 27::decimal(18,1)::float, 33::decimal(38,1)::float;
select 127::decimal(3,0)::double, -17014118346046923173168730371588410572::decimal(38,0)::double, -7::decimal(9,1)::double, 27::decimal(18,1)::double, 33::decimal(38,1)::double;
select 100::tinyint::decimal(18,3), 100::tinyint::decimal(3,0), (-100)::tinyint::decimal(3,0), 0::tinyint::decimal(3,3);
select 100::tinyint::decimal(38,35), 100::tinyint::decimal(9,6);
select 100::smallint::decimal(18,3), 100::smallint::decimal(3,0), (-100)::smallint::decimal(3,0), 0::smallint::decimal(3,3);
select 100::smallint::decimal(38,35), 100::smallint::decimal(9,6);
select 100::integer::decimal(18,3), 100::integer::decimal(3,0), (-100)::integer::decimal(3,0), 0::integer::decimal(3,3);
select 100::integer::decimal(38,35), 100::integer::decimal(9,6), 2147483647::integer::decimal(10,0), (-2147483647)::integer::decimal(10,0);
select 100::bigint::decimal(18,3), 100::bigint::decimal(3,0), (-100)::bigint::decimal(3,0), 0::bigint::decimal(3,3);
select 100::bigint::decimal(38,35), 100::bigint::decimal(9,6), 9223372036854775807::bigint::decimal(19,0), (-9223372036854775807)::bigint::decimal(19,0);
select 922337203685477580::bigint::decimal(18,0), (-922337203685477580)::bigint::decimal(18,0);
select 100::hugeint::decimal(18,3), 100::hugeint::decimal(3,0), (-100)::hugeint::decimal(3,0), 0::hugeint::decimal(3,3);
select 100::hugeint::decimal(38,35), 100::hugeint::decimal(9,6), 17014118346046923173168730371588410572::hugeint::decimal(38,0), (-17014118346046923173168730371588410572)::hugeint::decimal(38,0);
select 100::float::decimal(18,3), 100::float::decimal(3,0), (-100)::float::decimal(3,0), 0::float::decimal(3,3);
select 100::float::decimal(38,35)::float, 100::float::decimal(9,6)::float, 17014118346046923173168730371588410572::float::decimal(38,0)::float, (-17014118346046923173168730371588410572)::float::decimal(38,0)::float;
select 1.25::float::decimal(3,2);
select 100::double::decimal(18,3), 100::double::decimal(3,0), (-100)::double::decimal(3,0), 0::double::decimal(3,3);
select 100::double::decimal(38,35)::double, 100::double::decimal(9,6)::double, 17014118346046923173168730371588410572::double::decimal(38,0)::double, (-17014118346046923173168730371588410572)::double::decimal(38,0)::double;
select 1.25::double::decimal(3,2);
select typeof(first('0.1'::decimal(4,1)));
select first(null::decimal), first('0.1'::decimal(4,1))::varchar, first('4938245.1'::decimal(9,1))::varchar, first('45672564564938245.1'::decimal(18,1))::varchar, first('4567645908450368043562342564564938245.1'::decimal(38,1))::varchar;
select min(null::decimal), min('0.1'::decimal(4,1))::varchar, min('4938245.1'::decimal(9,1))::varchar, min('45672564564938245.1'::decimal(18,1))::varchar, min('4567645908450368043562342564564938245.1'::decimal(38,1))::varchar;
select max(null::decimal), max('0.1'::decimal(4,1))::varchar, max('4938245.1'::decimal(9,1))::varchar, max('45672564564938245.1'::decimal(18,1))::varchar, max('4567645908450368043562342564564938245.1'::decimal(38,1))::varchar;
select sum(null::decimal), sum('0.1'::decimal(4,1))::varchar, sum('4938245.1'::decimal(9,1))::varchar, sum('45672564564938245.1'::decimal(18,1))::varchar, sum('4567645908450368043562342564564938245.1'::decimal(38,1))::varchar;
select sum(d1)::varchar, sum(d2)::varchar, sum(d3)::varchar, sum(d4)::varchar from decimals;
select -('0.1'::decimal), -('-0.1'::decimal);
select +('0.1'::decimal), +('-0.1'::decimal);
select '0.1'::decimal + '0.1'::decimal;
select '0.1'::decimal + 1::integer;
select '0.5'::decimal(4,4) + '0.5'::decimal(4,4);
select '0.5'::decimal(1,1) + '100.0'::decimal(3,0);
select ('0.5'::decimal(1,1) + 10000)::varchar, ('0.54321'::decimal(5,5) + 10000)::varchar, ('0.5432154321'::decimal(10,10) + 10000)::varchar, ('0.543215432154321'::decimal(15,15) + 10000::decimal(20,15))::varchar, ('0.54321543215432154321'::decimal(20,20) + 10000)::varchar, ('0.5432154321543215432154321'::decimal(25,25) + 10000)::varchar;
select '0.5'::decimal(1,1) + 1::tinyint, '0.5'::decimal(1,1) + 1::smallint, '0.5'::decimal(1,1) + 1::integer, '0.5'::decimal(1,1) + 1::bigint, '0.5'::decimal(1,1) + 1::hugeint;
select '0.5'::decimal(1,1) + -1::tinyint, '0.5'::decimal(1,1) + -1::smallint, '0.5'::decimal(1,1) + -1::integer, '0.5'::decimal(1,1) + -1::bigint, '0.5'::decimal(1,1) + -1::hugeint;
select '0.5'::decimal(1,1) - 1::tinyint, '0.5'::decimal(1,1) - 1::smallint, '0.5'::decimal(1,1) - 1::integer, '0.5'::decimal(1,1) - 1::bigint, '0.5'::decimal(1,1) - 1::hugeint;
select '0.5'::decimal(1,1) - -1::tinyint, '0.5'::decimal(1,1) - -1::smallint, '0.5'::decimal(1,1) - -1::integer, '0.5'::decimal(1,1) - -1::bigint, '0.5'::decimal(1,1) - -1::hugeint;
select d + '0.1'::decimal, d + 10000 from decimals;
select '0.1'::decimal * '10.0'::decimal;
select typeof('0.1'::decimal(2,1) * '10.0'::decimal(3,1));
select '0.1'::decimal * '0.1'::decimal;
select '0.1'::decimal * 10::integer;
select '5.0'::decimal(4,3) * '5.0'::decimal(4,3);
select '-5.0'::decimal(4,3) * '5.0'::decimal(4,3);
select ('18.25'::decimal(4,2) * '17.25'::decimal(4,2))::varchar;
select '0.001'::decimal * 100::tinyint, '0.001'::decimal * 10000::smallint, '0.001'::decimal * 1000000::integer, '0.001'::decimal * 100000000::bigint, '0.001'::decimal * 10000000000::hugeint;
select 2.0 + 1.0, 2.0000 + 1.0000, 2.000000000000 + 1.000000000000, 2.00000000000000000000 + 1.00000000000000000000;
select 2.0 - 1.0, 2.0000 - 1.0000, 2.000000000000 - 1.000000000000, 2.00000000000000000000 - 1.00000000000000000000;
select 2.0 * 1.0, 2.0000 * 1.0000;
select [1.33, 10.0];
select [0.1, 1.33, 10.0, 9999999.999999999];
select [99999999999999999999999999999999999.9, 9.99999999999999999999999999999999999];
select 1.0::decimal(4,3)::decimal(2,1), 1.0::decimal(4,3)::decimal(9,1), 1.0::decimal(4,3)::decimal(18,1), 1.0::decimal(4,3)::decimal(38,1);
select 1.0::decimal(9,8)::decimal(2,1), 1.0::decimal(9,8)::decimal(9,1), 1.0::decimal(9,8)::decimal(18,1), 1.0::decimal(9,8)::decimal(38,1);
select 1.0::decimal(18,17)::decimal(2,1), 1.0::decimal(18,17)::decimal(9,1), 1.0::decimal(18,17)::decimal(18,1), 1.0::decimal(18,17)::decimal(38,1);
select 1.0::decimal(38,37)::decimal(2,1), 1.0::decimal(38,37)::decimal(9,1), 1.0::decimal(38,37)::decimal(18,1), 1.0::decimal(38,37)::decimal(38,1);
select 1.0::decimal(3,1)::decimal(18,2), 1.0::decimal(3,1)::decimal(38,2);
select 1.0::decimal(3,1)::decimal(2,1), 1.0::decimal(3,1)::decimal(9,1), 1.0::decimal(3,1)::decimal(18,1), 1.0::decimal(3,1)::decimal(38,1);
select 1.0::decimal(9,1)::decimal(2,1), 1.0::decimal(9,1)::decimal(8,1), 1.0::decimal(9,1)::decimal(18,1), 1.0::decimal(9,1)::decimal(38,1);
select 1.0::decimal(18,1)::decimal(2,1), 1.0::decimal(18,1)::decimal(8,1), 1.0::decimal(18,1)::decimal(17,1), 1.0::decimal(18,1)::decimal(38,1);
select 1.0::decimal(38,1)::decimal(2,1), 1.0::decimal(38,1)::decimal(8,1), 1.0::decimal(38,1)::decimal(17,1), 1.0::decimal(38,1)::decimal(37,1);
select '1e3'::decimal, '1e-1'::decimal, '.1e3'::decimal, '0.1e3'::decimal;
select '-1e3'::decimal, '-0.1e3'::decimal, '-.1e-1'::decimal, '-0.1e-1'::decimal;
select '0e1'::decimal, '-0e1'::decimal, '00000e1'::decimal, '-00000e1'::decimal;
select '1e-100'::decimal;
select '1e-99999999'::decimal;
select '1e3'::decimal(4,0);
select '1e8'::decimal(9,0);
select '1e17'::decimal(18,0);
select '1e37'::decimal(38,0);
select d+1 from decimals;
select -1-d from decimals;
select 1*d from decimals;
select try_cast(1000 as decimal(3,0));
select try_cast(100 as decimal(2,0));
select try_cast('100' as decimal(2,0));
select try_cast('100'::double as decimal(2,0));
select try_cast(100::decimal(3,0) as decimal(2,0));
select try_cast(10000::decimal(5,0) as decimal(2,0));
select try_cast(1000000000::decimal(10,0) as decimal(2,0));
select try_cast(1000000000::decimal(20,0) as decimal(2,0));
select try_cast(1000000 as decimal(5,0));
select try_cast('100000' as decimal(5,0));
select try_cast('100000'::double as decimal(5,0));
select try_cast(100000::decimal(6,0) as decimal(5,0));
select try_cast(1000000000::decimal(20,0) as decimal(5,0));
select try_cast(10000000000 as decimal(10,0));
select try_cast('10000000000' as decimal(10,0));
select try_cast('10000000000'::double as decimal(10,0));
select try_cast(10000000000::decimal(11,0) as decimal(10,0));
select try_cast(10000000000::decimal(20,0) as decimal(10,0));
select try_cast(100000000000000000000 as decimal(20,0));
select try_cast('100000000000000000000' as decimal(20,0));
select try_cast('100000000000000000000'::double as decimal(20,0));
select try_cast(100000000000000000000::decimal(25,0) as decimal(20,0));
select 42.1, -10239814.1, 1049185157.12345, 102398294123451814.12345, -49238409238403918140294812084.12490812490;
select typeof(42.1), typeof(-10239814.1), typeof(1049185157.12345), typeof(102398294123451814.12345), typeof(-49238409238403918140294812084.12490812490);
select 42., 42e3, 4.23e1, 10e20, .34, - 2.3;
select typeof(42.), typeof(42e3), typeof(4.23e1), typeof(10e20), typeof(.34), typeof(-2.3), typeof(10e100);
select typeof('0.1'::decimal);
select '0.1'::decimal::varchar, '922337203685478.758'::decimal::varchar;
select '-0.1'::decimal::varchar, '-922337203685478.758'::decimal::varchar;
select ' 7 '::decimal::varchar, '9.'::decimal::varchar, '.1'::decimal::varchar;
select '0.123456789'::decimal::varchar, '-0.123456789'::decimal::varchar;
select '0.1'::decimal(3, 0)::varchar;
select '123.4'::decimal(9)::varchar;
select '0.1'::decimal(3, 3)::varchar, '-0.1'::decimal(3, 3)::varchar;
select '0.1'::decimal::decimal::decimal;
select '123.4'::decimal(4,1)::varchar;
select '2.001'::decimal(4,3)::varchar;
select '123456.789'::decimal(9,3)::varchar;
select '123456789'::decimal(9,0)::varchar;
select '123456789'::decimal(18,3)::varchar;
select '1701411834604692317316873037.1588410572'::decimal(38,10)::varchar;
select '0'::decimal(38,10)::varchar;
select '0.00003'::decimal(38,10)::varchar;
select count(*) from decimals inner join decimals2 on (decimals.i = decimals2.i);
select * from q;
select * from decimals;
select * from decimals order by d desc;
select * from decimals where d='0.1'::decimal(3,2);
select * from decimals where d>='0.1'::decimal(3,2);
select * from decimals where d='0.1'::decimal(9,5);
select * from decimals where d >= '0.1'::decimal(9,5) order by 1;
select * from decimals where d = '0.1'::decimal(9,1);
select * from decimals where d > '0.1'::decimal(9,1) order by 1;
select abs('-0.1'::decimal), abs('0.1'::decimal), abs(null::decimal);
select abs('-0.1'::decimal(4,3)), abs('-0.1'::decimal(9,3)), abs('-0.1'::decimal(18,3)), abs('-0.1'::decimal(38,3));
select ceil('0.1'::decimal), ceil('-0.1'::decimal), ceil(null::decimal);
select ceil('100.3'::decimal), ceil('-127012.3'::decimal);
select ceil('10.5'::decimal), ceil('-10.5'::decimal);
select ceil('999.9'::decimal(4,1)), ceil('99999999.9'::decimal(9,1)), ceil('99999999999999999.9'::decimal(18,1)), ceil('9999999999999999999999999999999999999.9'::decimal(38,1));
select ceil('-999.9'::decimal(4,1)), ceil('-99999999.9'::decimal(9,1)), ceil('-99999999999999999.9'::decimal(18,1)), ceil('-9999999999999999999999999999999999999.9'::decimal(38,1));
select floor('0.1'::decimal), floor('-0.1'::decimal), floor(null::decimal);
select floor('100.3'::decimal), floor('-127012.3'::decimal);
select floor('10.5'::decimal), floor('-10.5'::decimal);
select floor('999.9'::decimal(4,1)), floor('99999999.9'::decimal(9,1)), floor('99999999999999999.9'::decimal(18,1)), floor('9999999999999999999999999999999999999.9'::decimal(38,1));
select floor('-999.9'::decimal(4,1)), floor('-99999999.9'::decimal(9,1)), floor('-99999999999999999.9'::decimal(18,1)), floor('-9999999999999999999999999999999999999.9'::decimal(38,1));
select round('0.1'::decimal), round('-0.1'::decimal), round(null::decimal);
select round('100.3'::decimal), round('-127012.3'::decimal);
select round('10.5'::decimal), round('-10.5'::decimal);
select round('999.9'::decimal(4,1)), round('99999999.9'::decimal(9,1)), round('99999999999999999.9'::decimal(18,1)), round('9999999999999999999999999999999999999.9'::decimal(38,1));
select round('-999.9'::decimal(4,1)), round('-99999999.9'::decimal(9,1)), round('-99999999999999999.9'::decimal(18,1)), round('-9999999999999999999999999999999999999.9'::decimal(38,1));
select round('100.3908147521'::decimal(18,10), 0)::varchar, round('100.3908147521'::decimal(18,10), 1)::varchar, round('100.3908147521'::decimal(18,10), 2)::varchar, round('100.3908147521'::decimal(18,10), 3)::varchar, round('100.3908147521'::decimal(18,10), 4)::varchar, round('100.3908147521'::decimal(18,10), 5)::varchar, round('100.3908147521'::decimal(18,10), 6)::varchar, round('100.3908147521'::decimal(18,10), 7)::varchar, round('100.3908147521'::decimal(18,10), 8)::varchar, round('100.3908147521'::decimal(18,10), 9)::varchar, round('100.3908147521'::decimal(18,10), 10)::varchar, round('100.3908147521'::decimal(18,10), 100000)::varchar, round(null::decimal, 0);
select round('1049578239572094512.32415'::decimal(30,10), 0)::varchar, round('1049578239572094512.32415'::decimal(30,10), -1)::varchar, round('1049578239572094512.32415'::decimal(30,10), -2)::varchar, round('1049578239572094512.32415'::decimal(30,10), -3)::varchar, round('1049578239572094512.32415'::decimal(30,10), -4)::varchar, round('1049578239572094512.32415'::decimal(30,10), -5)::varchar, round('1049578239572094512.32415'::decimal(30,10), -6)::varchar, round('1049578239572094512.32415'::decimal(30,10), -7)::varchar, round('1049578239572094512.32415'::decimal(30,10), -8)::varchar, round('1049578239572094512.32415'::decimal(30,10), -9)::varchar, round('1049578239572094512.32415'::decimal(30,10), -10)::varchar, round('1049578239572094512.32415'::decimal(30,10), -11)::varchar, round('1049578239572094512.32415'::decimal(30,10), -12)::varchar, round('1049578239572094512.32415'::decimal(30,10), -13)::varchar, round('1049578239572094512.32415'::decimal(30,10), -14)::varchar, round('1049578239572094512.32415'::decimal(30,10), -15)::varchar, round('1049578239572094512.32415'::decimal(30,10), -16)::varchar, round('1049578239572094512.32415'::decimal(30,10), -18)::varchar, round('1049578239572094512.32415'::decimal(30,10), -19)::varchar, round('1049578239572094512.32415'::decimal(30,10), -20)::varchar, round('1049578239572094512.32415'::decimal(30,10), -19842)::varchar;
select round('-100.3908147521'::decimal(18,10), 0)::varchar, round('-100.3908147521'::decimal(18,10), 1)::varchar, round('-100.3908147521'::decimal(18,10), 2)::varchar, round('-100.3908147521'::decimal(18,10), 3)::varchar, round('-100.3908147521'::decimal(18,10), 4)::varchar, round('-100.3908147521'::decimal(18,10), 5)::varchar, round('-100.3908147521'::decimal(18,10), 6)::varchar, round('-100.3908147521'::decimal(18,10), 7)::varchar, round('-100.3908147521'::decimal(18,10), 8)::varchar, round('-100.3908147521'::decimal(18,10), 9)::varchar, round('-100.3908147521'::decimal(18,10), 10)::varchar, round('-100.3908147521'::decimal(18,10), 100000)::varchar, round(null::decimal, 0);
select round('-1049578239572094512.32415'::decimal(30,10), 0)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -1)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -2)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -3)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -4)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -5)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -6)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -7)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -8)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -9)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -10)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -11)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -12)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -13)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -14)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -15)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -16)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -18)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -19)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -20)::varchar, round('-1049578239572094512.32415'::decimal(30,10), -19842)::varchar;
select round(12::decimal(3,0));
select round(12::decimal(3,0), null);
select round('-100.3'::decimal(4,1), 1)::varchar, round('104.3'::decimal(4,1), 0)::varchar, round('104.3'::decimal(4,1), -1)::varchar;
select round('-100.3'::decimal(9,1), 1)::varchar, round('104.3'::decimal(9,1), 0)::varchar, round('104.3'::decimal(9,1), -1)::varchar;
select round('-100.3'::decimal(18,1), 1)::varchar, round('104.3'::decimal(18,1), 0)::varchar, round('104.3'::decimal(18,1), -1)::varchar;
select printf('%.2f', '0.12345'::decimal(30,10));
select (select '1.0'::decimal(2,1));
select * from decs;
select * from m where m = '';
select m='' from m;
select * from m where m=m_2;
select typeof(name) from person limit 1;
select 'happy'::mood;
select ['happy']::mood[];
select [null,'happy',null]::mood[];
select ['happy','ok','ok']::mood[];
select []::mood[];
select [null]::mood[];
select {'a': 'happy'::mood};
select {'a': 'happy'::mood, 'b': 'ok'::mood};
select {'a': 'happy'::mood, 'b': 1, 'c': 'ok'::mood};
select map([1,2,3,4],['happy','ok','ok','sad']::mood[]);
select current_mood::varchar from person;
select name, year_release::int from albums;
select name from albums where year_release::int > 2010;
select name, year_release::int from albums_error where year_release = '2001';
select name, try_cast(year_release as int) from albums_error;
select name, year_release::double from albums;
select year_release::date from dates_table;
select year_release::timestamp from dates_table;
select person.name, robots.name from person inner join robots on (person.current_mood = robots.current_mood);
select person.name, pet.name from person inner join pet on (person.current_mood > pet.current_mood) where person.name = 'pedro';
select person.name, pet.name from person inner join pet on (person.current_mood = pet.current_mood);
select person_name,pet_name from (select person.name as person_name, pet.name as pet_name, person.current_mood as person_mood, pet.current_mood as pet_mood from person,pet) as t where person_mood = pet_mood;
select person_name,pet_name from (select person.name as person_name, pet.name as pet_name, person.current_mood as person_mood, pet.current_mood as pet_mood from person,pet) as t where pet_mood = person_mood;
select person.current_mood from person union all select pet.current_mood from pet;
select * from person_pet_den;
select case when person_name = 'tim' then person_mood else pet_mood end from person_pet_den;
select person_mood in ('sad') from person_pet_den;
select person_mood in ('beaming'::pet_mood) from person_pet_den;
select [person_mood, pet_mood] from person_pet_den;
select person_mood from person_pet_den where person_mood like '%a%';
select regexp_matches(person_mood, '.*a.*') from person_pet_den;
select a = b from test;
select * from test where a = b;
select * from test where (a = b) is null;
select type_name, logical_type from duckdb_types() where not internal;
select * from person where current_mood = 'sad';
select * from person where current_mood > 'sad';
select person.name, pets.name from person inner join pets on (person.current_mood = pets.current_mood);
select * from person where current_mood = last_year_mood;
select * from person where current_mood = 'ok';
select count(*), current_mood from person group by current_mood;
select name, current_mood from person order by current_mood;
select cast (current_mood as string) from person;
select try_cast (current_mood as string) from person;
select cast ('ok' as mood);
select try_cast ('ok' as mood);
select try_cast ('bla' as mood);
select name,current_mood::mood from person_string where current_mood = 'sad';
select * from large_enum_tbl;
select 'inf'::smallint, '-inf'::smallint;
select 'inf'::integer, '-inf'::integer;
select 'inf'::bigint, '-inf'::bigint;
select 'inf'::hugeint, '-inf'::hugeint;
select 'inf'::float, '-inf'::float;
select 'inf'::double, '-inf'::double;
select 'inf'::smallint <> 'inf'::smallint;
select 'inf'::integer <> 'inf'::integer;
select 'inf'::bigint <> 'inf'::bigint;
select 'inf'::hugeint <> 'inf'::hugeint;
select 'inf'::float <> 'inf'::float;
select 'inf'::double <> 'inf'::double;
select 'inf'::smallint <> 3.0::smallint;
select 'inf'::integer <> 3.0::integer;
select 'inf'::bigint <> 3.0::bigint;
select 'inf'::hugeint <> 3.0::hugeint;
select 'inf'::float <> 3.0::float;
select 'inf'::double <> 3.0::double;
select * from floats;
select f from floats where f=1;
select f from floats where f='inf'::smallint;
select f from floats where f='inf'::integer;
select f from floats where f='inf'::bigint;
select f from floats where f='inf'::hugeint;
select f from floats where f='inf'::float;
select f from floats where f='inf'::double;
select f from floats where f='-inf'::smallint;
select f from floats where f='-inf'::integer;
select f from floats where f='-inf'::bigint;
select f from floats where f='-inf'::hugeint;
select f from floats where f='-inf'::float;
select f from floats where f='-inf'::double;
select f from floats where f<>1 order by 1;
select f from floats where f<>'inf'::smallint order by 1;
select f from floats where f<>'inf'::integer order by 1;
select f from floats where f<>'inf'::bigint order by 1;
select f from floats where f<>'inf'::hugeint order by 1;
select f from floats where f<>'inf'::float order by 1;
select f from floats where f<>'inf'::double order by 1;
select f from floats where f<>'-inf'::smallint order by 1;
select f from floats where f<>'-inf'::integer order by 1;
select f from floats where f<>'-inf'::bigint order by 1;
select f from floats where f<>'-inf'::hugeint order by 1;
select f from floats where f<>'-inf'::float order by 1;
select f from floats where f<>'-inf'::double order by 1;
select f from floats where f>1 order by 1;
select f from floats where f>'-inf'::smallint order by 1;
select f from floats where f>'-inf'::integer order by 1;
select f from floats where f>'-inf'::bigint order by 1;
select f from floats where f>'-inf'::hugeint order by 1;
select f from floats where f>'-inf'::float order by 1;
select f from floats where f>'-inf'::double order by 1;
select f from floats where f>'inf'::smallint;
select f from floats where f>'inf'::integer;
select f from floats where f>'inf'::bigint;
select f from floats where f>'inf'::hugeint;
select f from floats where f>'inf'::float;
select f from floats where f>'inf'::double;
select f from floats where f<1;
select f, sum(i) from floats group by f order by f;
select min('inf'::smallint), min('-inf'::smallint), min('nan'::smallint);
select min('inf'::integer), min('-inf'::integer), min('nan'::integer);
select min('inf'::bigint), min('-inf'::bigint), min('nan'::bigint);
select min('inf'::hugeint), min('-inf'::hugeint), min('nan'::hugeint);
select min('inf'::float), min('-inf'::float), min('nan'::float);
select min('inf'::double), min('-inf'::double), min('nan'::double);
select max('inf'::smallint), max('-inf'::smallint), max('nan'::smallint);
select max('inf'::integer), max('-inf'::integer), max('nan'::integer);
select max('inf'::bigint), max('-inf'::bigint), max('nan'::bigint);
select max('inf'::hugeint), max('-inf'::hugeint), max('nan'::hugeint);
select max('inf'::float), max('-inf'::float), max('nan'::float);
select max('inf'::double), max('-inf'::double), max('nan'::double);
select min(f), max(f) from floats;
select 'nan'::float::float;
select 'inf'::float::float;
select '-inf'::float::float;
select nextafter(3, '-inf'::smallint);
select nextafter(3, '-inf'::integer);
select nextafter(3, '-inf'::bigint);
select nextafter(3, '-inf'::hugeint);
select nextafter(3, '-inf'::float);
select nextafter(3, '-inf'::double);
select nextafter(3, 'inf'::smallint);
select nextafter(3, 'inf'::integer);
select nextafter(3, 'inf'::bigint);
select nextafter(3, 'inf'::hugeint);
select nextafter(3, 'inf'::float);
select nextafter(3, 'inf'::double);
select nextafter('inf'::smallint, 'inf'::smallint);
select nextafter('inf'::integer, 'inf'::integer);
select nextafter('inf'::bigint, 'inf'::bigint);
select nextafter('inf'::hugeint, 'inf'::hugeint);
select nextafter('inf'::float, 'inf'::float);
select nextafter('inf'::double, 'inf'::double);
select nextafter('-inf'::smallint, '-inf'::smallint);
select nextafter('-inf'::integer, '-inf'::integer);
select nextafter('-inf'::bigint, '-inf'::bigint);
select nextafter('-inf'::hugeint, '-inf'::hugeint);
select nextafter('-inf'::float, '-inf'::float);
select nextafter('-inf'::double, '-inf'::double);
select nextafter('nan'::smallint, '-inf'::smallint);
select nextafter('nan'::integer, '-inf'::integer);
select nextafter('nan'::bigint, '-inf'::bigint);
select nextafter('nan'::hugeint, '-inf'::hugeint);
select nextafter('nan'::float, '-inf'::float);
select nextafter('nan'::double, '-inf'::double);
select nextafter(0, 'nan'::smallint);
select nextafter(0, 'nan'::integer);
select nextafter(0, 'nan'::bigint);
select nextafter(0, 'nan'::hugeint);
select nextafter(0, 'nan'::float);
select nextafter(0, 'nan'::double);
select sign('-inf'::smallint);
select sign('-inf'::integer);
select sign('-inf'::bigint);
select sign('-inf'::hugeint);
select sign('-inf'::float);
select sign('-inf'::double);
select sign('inf'::smallint);
select sign('inf'::integer);
select sign('inf'::bigint);
select sign('inf'::hugeint);
select sign('inf'::float);
select sign('inf'::double);
select sign('nan'::smallint);
select sign('nan'::integer);
select sign('nan'::bigint);
select sign('nan'::hugeint);
select sign('nan'::float);
select sign('nan'::double);
select floor('-inf'::smallint);
select floor('-inf'::integer);
select floor('-inf'::bigint);
select floor('-inf'::hugeint);
select floor('-inf'::float);
select floor('-inf'::double);
select floor('inf'::smallint);
select floor('inf'::integer);
select floor('inf'::bigint);
select floor('inf'::hugeint);
select floor('inf'::float);
select floor('inf'::double);
select floor('nan'::smallint);
select floor('nan'::integer);
select floor('nan'::bigint);
select floor('nan'::hugeint);
select floor('nan'::float);
select floor('nan'::double);
select f, abs(f), exp(f), pow(f, 2), sqrt(case when f < 0 then null else f end), cbrt(f), ln(case when f < 0 then null else f end), degrees(f), radians(f), gamma(f), lgamma(f), atan(f), atan2(f, 0) from floats;
select nextafter('inf'::float, '-inf'::float);
select nextafter('-inf'::float, 'inf'::float);
select nextafter('inf'::double, '-inf'::double);
select nextafter('-inf'::double, 'inf'::double);
select * from floats join (select 'inf'::smallint) tbl(f) using (f);
select * from floats join (select 'inf'::integer) tbl(f) using (f);
select * from floats join (select 'inf'::bigint) tbl(f) using (f);
select * from floats join (select 'inf'::hugeint) tbl(f) using (f);
select * from floats join (select 'inf'::float) tbl(f) using (f);
select * from floats join (select 'inf'::double) tbl(f) using (f);
select * from floats join (select '-inf'::smallint) tbl(f) using (f);
select * from floats join (select '-inf'::integer) tbl(f) using (f);
select * from floats join (select '-inf'::bigint) tbl(f) using (f);
select * from floats join (select '-inf'::hugeint) tbl(f) using (f);
select * from floats join (select '-inf'::float) tbl(f) using (f);
select * from floats join (select '-inf'::double) tbl(f) using (f);
select * from floats join (select 'inf'::smallint) tbl(f) on (floats.f >= tbl.f) order by 1;
select * from floats join (select 'inf'::integer) tbl(f) on (floats.f >= tbl.f) order by 1;
select * from floats join (select 'inf'::bigint) tbl(f) on (floats.f >= tbl.f) order by 1;
select * from floats join (select 'inf'::hugeint) tbl(f) on (floats.f >= tbl.f) order by 1;
select * from floats join (select 'inf'::float) tbl(f) on (floats.f >= tbl.f) order by 1;
select * from floats join (select 'inf'::double) tbl(f) on (floats.f >= tbl.f) order by 1;
select * from floats join (select 'inf'::smallint) tbl(f) on (floats.f <= tbl.f) order by 1;
select * from floats join (select 'inf'::integer) tbl(f) on (floats.f <= tbl.f) order by 1;
select * from floats join (select 'inf'::bigint) tbl(f) on (floats.f <= tbl.f) order by 1;
select * from floats join (select 'inf'::hugeint) tbl(f) on (floats.f <= tbl.f) order by 1;
select * from floats join (select 'inf'::float) tbl(f) on (floats.f <= tbl.f) order by 1;
select * from floats join (select 'inf'::double) tbl(f) on (floats.f <= tbl.f) order by 1;
select * from floats join (select '-inf'::smallint, 'inf'::smallint) tbl(f,g ) on (floats.f >= tbl.f and floats.f <= tbl.g) order by 1;
select * from floats join (select '-inf'::integer, 'inf'::integer) tbl(f,g ) on (floats.f >= tbl.f and floats.f <= tbl.g) order by 1;
select * from floats join (select '-inf'::bigint, 'inf'::bigint) tbl(f,g ) on (floats.f >= tbl.f and floats.f <= tbl.g) order by 1;
select * from floats join (select '-inf'::hugeint, 'inf'::hugeint) tbl(f,g ) on (floats.f >= tbl.f and floats.f <= tbl.g) order by 1;
select * from floats join (select '-inf'::float, 'inf'::float) tbl(f,g ) on (floats.f >= tbl.f and floats.f <= tbl.g) order by 1;
select * from floats join (select '-inf'::double, 'inf'::double) tbl(f,g ) on (floats.f >= tbl.f and floats.f <= tbl.g) order by 1;
select f from floats order by f;
select f from floats order by f desc;
select f from floats order by f desc nulls last limit 2;
select f from floats order by f nulls last limit 2;
select f from floats order by f desc nulls last limit 4;
select f from floats order by f nulls last limit 4;
select count(*) from floats where f > 0;
select count(*) from floats where f < 0;
select 'nan'::smallint;
select 'nan'::integer;
select 'nan'::bigint;
select 'nan'::hugeint;
select 'nan'::float;
select 'nan'::double;
select 'nan'::smallint <> 'nan'::smallint;
select 'nan'::integer <> 'nan'::integer;
select 'nan'::bigint <> 'nan'::bigint;
select 'nan'::hugeint <> 'nan'::hugeint;
select 'nan'::float <> 'nan'::float;
select 'nan'::double <> 'nan'::double;
select 'nan'::smallint <> 3.0::smallint;
select 'nan'::integer <> 3.0::integer;
select 'nan'::bigint <> 3.0::bigint;
select 'nan'::hugeint <> 3.0::hugeint;
select 'nan'::float <> 3.0::float;
select 'nan'::double <> 3.0::double;
select f from floats where f='nan'::smallint;
select f from floats where f='nan'::integer;
select f from floats where f='nan'::bigint;
select f from floats where f='nan'::hugeint;
select f from floats where f='nan'::float;
select f from floats where f='nan'::double;
select f from floats where f<>1;
select f from floats where f<>'nan'::smallint;
select f from floats where f<>'nan'::integer;
select f from floats where f<>'nan'::bigint;
select f from floats where f<>'nan'::hugeint;
select f from floats where f<>'nan'::float;
select f from floats where f<>'nan'::double;
select f from floats where f>0;
select f from floats where f>'nan'::smallint;
select f from floats where f>'nan'::integer;
select f from floats where f>'nan'::bigint;
select f from floats where f>'nan'::hugeint;
select f from floats where f>'nan'::float;
select f from floats where f>'nan'::double;
select f from floats where f>=1;
select f from floats where f>='nan'::smallint;
select f from floats where f>='nan'::integer;
select f from floats where f>='nan'::bigint;
select f from floats where f>='nan'::hugeint;
select f from floats where f>='nan'::float;
select f from floats where f>='nan'::double;
select f from floats where f<'nan'::smallint;
select f from floats where f<'nan'::integer;
select f from floats where f<'nan'::bigint;
select f from floats where f<'nan'::hugeint;
select f from floats where f<'nan'::float;
select f from floats where f<'nan'::double;
select f from floats where f<=1;
select f from floats where f<='nan'::smallint;
select f from floats where f<='nan'::integer;
select f from floats where f<='nan'::bigint;
select f from floats where f<='nan'::hugeint;
select f from floats where f<='nan'::float;
select f from floats where f<='nan'::double;
select f, sum(i) over (partition by f) from floats order by f;
select f, i, sum(i) over (order by f, i) from floats order by f, i;
select f, i, sum(i) over (partition by f order by f, i) from floats order by f, i;
select i, f, sum(i) over (order by i, f) from floats order by i, f;
select ['nan'::double];
select unnest(['nan'::double]);
select {'a': 'nan'::double};
select ({'a': 'nan'::double}).a;
select 251658240::hugeint * 251658240::hugeint;
select 251658240::hugeint * 1080863910568919040::hugeint;
select 251658240::hugeint * 4642275147320176030871715840::hugeint;
select 1080863910568919040::hugeint * 251658240::hugeint;
select 1080863910568919040::hugeint * 1080863910568919040::hugeint;
select 4642275147320176030871715840::hugeint * 251658240::hugeint;
select 85070591730234615865843651857942052863::hugeint * 2::hugeint;
select 19807040628566084398385987583::hugeint * 8589934592::hugeint;
select 36893488147419103231::hugeint * 4611686018427387904::hugeint;
select 2::hugeint * 85070591730234615865843651857942052863::hugeint;
select 8589934592::hugeint * 19807040628566084398385987583::hugeint;
select 4611686018427387904::hugeint * 36893488147419103231::hugeint;
select 10376293541461622783::hugeint * 10376293541461622783::hugeint;
select try_cast('170141183460469231731687303715884105728' as hugeint);
select try_cast('270141183460469231731687303715884105728'::double as hugeint);
select try_cast('-170141183460469231731687303715884105728' as hugeint);
select try_cast('-270141183460469231731687303715884105728'::double as hugeint);
select min(h), max(h), sum(h), first(h), last(h) from hugeints;
select g, min(h), max(h), sum(h), first(h), last(h) from hugeints group by g order by 1;
select first(h), last(h) from hugeints;
select g, first(h), last(h) from hugeints group by g order by 1;
select -(100::hugeint), -(-(50::hugeint));
select -(0::hugeint);
select -(100000000000000000000::hugeint), -(-(100000000000000000000::hugeint));
select 42::hugeint + 42::hugeint;
select 42::hugeint + -42::hugeint, -42::hugeint + 100::hugeint, -42::hugeint+-42::hugeint;
select '100000000000000000000'::hugeint + '100000000000000000000'::hugeint;
select '100000000000000000000'::hugeint + '-1000000000000000000000'::hugeint;
select '5'::hugeint + '-10000000000000000002'::hugeint;
select '170141183460469231731687303715884105727'::hugeint - 10::hugeint + 10::hugeint;
select '-170141183460469231731687303715884105727'::hugeint + 10::hugeint - 10::hugeint;
select 100::hugeint - 42::hugeint, 3::hugeint - 5::hugeint;
select -100::hugeint - 42::hugeint, -3::hugeint - 5::hugeint, 12::hugeint-(-12::hugeint);
select '-10000000000000000002'::hugeint - '-10000000000000000002'::hugeint;
select 100::hugeint * 50::hugeint;
select 100::hugeint * -50::hugeint, -100::hugeint * 50::hugeint, -100::hugeint * -50::hugeint;
select '1701411834604692317'::hugeint * '2'::hugeint, '100000000000000000000'::hugeint * '1000000000000000000'::hugeint;
select '170141183460469231731687303715884105727'::hugeint * 1::hugeint;
select 100::hugeint / 20::hugeint, 90::hugeint / 20::hugeint;
select -100::hugeint / 20::hugeint, 100::hugeint / -20::hugeint, -100::hugeint / -20::hugeint;
select 100::hugeint / 0::hugeint;
select '100000000000000000000000000000000000000'::hugeint / '10000000000000'::hugeint, '100000000000000000000000000000000000000'::hugeint / '2'::hugeint;
select 100::hugeint % 20::hugeint, 90::hugeint % 20::hugeint;
select -90 % 20, 90 % -20, -90 % -20;
select -90::hugeint % 20::hugeint, 90::hugeint % -20::hugeint, -90::hugeint % -20::hugeint;
select 100::hugeint % 0::hugeint;
select '100000000000000000000000000000000000000'::hugeint % '6587689457689375689735'::hugeint, '100000000000000000000000000000000000000'::hugeint % '3'::hugeint;
select abs('100'::hugeint), abs('-100'::hugeint);
select '-170141183460469231731687303715884105726'::hugeint + -1;
select '170141183460469231731687303715884105726'::hugeint + 1;
select '170141183460469231731687303715884105727'::hugeint + -1;
select '-170141183460469231731687303715884105727'::hugeint + 1;
select -1 + '-170141183460469231731687303715884105726'::hugeint;
select 1 + '170141183460469231731687303715884105726'::hugeint;
select -1 + '170141183460469231731687303715884105727'::hugeint;
select 1 + '-170141183460469231731687303715884105727'::hugeint;
select '-170141183460469231731687303715884105726'::hugeint - 1;
select 170141183460469231731687303715884105724 - (-1);
select 170141183460469231731687303715884105725 - (-1);
select 170141183460469231731687303715884105726 - (-1);
select 170141183460469231731687303715884105727 - 1;
select -170141183460469231731687303715884105727 - (-1);
select -1 - 170141183460469231731687303715884105726;
select 1 - (-170141183460469231731687303715884105724);
select 1 - (-170141183460469231731687303715884105725);
select 1 - (-170141183460469231731687303715884105726);
select -1 - (-170141183460469231731687303715884105727);
select 1 - 170141183460469231731687303715884105727;
select 170141183460469231731687303715884105727 * 1;
select 170141183460469231731687303715884105727 * -1;
select -170141183460469231731687303715884105727 * 1;
select -170141183460469231731687303715884105727 * -1;
select 170141183460469231731687303715884105727 / 1;
select 170141183460469231731687303715884105727 / -1;
select -170141183460469231731687303715884105727 / 1;
select -170141183460469231731687303715884105727 / -1;
select '5'::hugeint <> '5'::hugeint, '5'::hugeint <> '18446744073709551621'::hugeint;
select 10000000000000000000::hugeint + 100::tinyint, 10000000000000000000::hugeint + 100::smallint, 10000000000000000000::hugeint + 100::integer, 10000000000000000000::hugeint + 100::bigint;
select 100::hugeint + 0.5;
select cos(100::hugeint);
select concat('hello number ', 100::hugeint);
select 1::hugeint << 3;
select 27::hugeint << 0;
select 1::hugeint << 50, 1::hugeint << 100;
select (((((1::hugeint << 50) << 50) << 2) << 3) << 8), (1::hugeint)<<50<<20<<7<<18<<3<<6<<9;
select 1::hugeint << 64;
select 8::hugeint >> 3;
select 27::hugeint >> 0;
select -27::hugeint >> 1;
select 27::hugeint >> -1;
select (1::hugeint << 100) >> 50, (1::hugeint << 120)>>108;
select '1329227995784915872903807060280344576'::hugeint >> 200;
select -11367237885269962203896920952509169001 >> 200;
select '1329227995784915872903807060280344576'::hugeint >> 64;
select -11367237885269962203896920952509169001 >> 64;
select '1329227995784915872903807060280344576'::hugeint >> 96;
select -11367237885269962203896920952509169001 >> 96;
select '1329227995784915872903807060280344576'::hugeint >> 4 >> 5 >> 7 >> 9 >> 12 >> 13;
select -11367237885269962203896920952509169001 >> 4 >> 5 >> 7 >> 9 >> 12 >> 13;
select 1::hugeint & 3::hugeint;
select 51290852742897895128414::hugeint & 4923847238975289723895239078235::hugeint;
select 1::hugeint | 2::hugeint;
select 51290852742897895128414::hugeint | 4923847238975289723895239078235::hugeint;
select xor(1::hugeint, 3::hugeint);
select xor(51290852742897895128414::hugeint, 4923847238975289723895239078235::hugeint);
select ~(1::hugeint);
select ~(4923847238975289723895239078235::hugeint);
select 1::hugeint >> 1000;
select 1 >> 170141183460469231731687303715884105727::hugeint;
select '7'::hugeint, '130'::hugeint, '924829852'::hugeint;
select '0'::hugeint, '-0'::hugeint;
select '-7'::hugeint, '-130'::hugeint, '-924829852'::hugeint;
select '10000000000000000000000000000'::hugeint;
select '1267650600228229401496703205376'::hugeint, '17014118346046923173168730371588410572'::hugeint;
select '-1267650600228229401496703205376'::hugeint, '-17014118346046923173168730371588410572'::hugeint;
select '170141183460469231731687303715884105727'::hugeint, '-170141183460469231731687303715884105727'::hugeint;
select 42::tinyint::hugeint, 42::smallint::hugeint, 42::integer::hugeint, 42::bigint::hugeint, 42::float::hugeint, 42::double::hugeint;
select (-42)::tinyint::hugeint, (-42)::smallint::hugeint, (-42)::integer::hugeint, (-42)::bigint::hugeint, (-42)::float::hugeint, (-42)::double::hugeint;
select 42::hugeint::tinyint, 42::hugeint::smallint, 42::hugeint::integer, 42::hugeint::bigint, 42::hugeint::float, 42::hugeint::double;
select (-42)::hugeint::tinyint, (-42)::hugeint::smallint, (-42)::hugeint::integer, (-42)::hugeint::bigint, (-42)::hugeint::float, (-42)::hugeint::double;
select typeof(10), typeof(10000000000), typeof(170141183460469231731687303715884105727), typeof(170141183460469231731687303715884105728), typeof(170141183460469231731687303715884105728000);
select 1e30, 1e100, 1e-1;
select typeof(1e30), typeof(1e100), typeof(1e-1);
select '170141183460469231731687303715884105700e0'::hugeint;
select '170141183460469231731687303715884105727e0'::hugeint;
select abs(1::hugeint), abs('-1329227995784915872903807060280344576'::hugeint), abs(0::hugeint);
select sign(1::hugeint), sign('-1329227995784915872903807060280344576'::hugeint), sign(0::hugeint);
select round(1::hugeint, 0), round('-1329227995784915872903807060280344576'::hugeint, 0), round(0::hugeint, 0);
select floor(1::hugeint), floor('-1329227995784915872903807060280344576'::hugeint), floor(0::hugeint);
select ceil(1::hugeint), ceil('-1329227995784915872903807060280344576'::hugeint), ceil(0::hugeint);
select least(1::hugeint, '-1329227995784915872903807060280344576'::hugeint, 0::hugeint);
select greatest(1::hugeint, '-1329227995784915872903807060280344576'::hugeint, 0::hugeint);
select null::hugeint;
select id, first(h), last(h) from hugeints where h is null group by id;
select h, sum(id) from hugeints group by h order by 1;
select id, h1.h, h2.h from hugeints h1 join hugeints h2 using (id) where h1.h is null and h2.h is null;
select (select h1.h) from hugeints h1 order by 1;
select h1.h not in (select h1.h+h2.h from hugeints h2) from hugeints h1 order by 1;
select h::integer from hugeints where h < 100;
select count(*) from hugeints where h = 42::hugeint;
select count(*) from hugeints where h <> '1267650600228229401496703205376'::hugeint;
select count(*) from hugeints where h < '1267650600228229401496703205376'::hugeint;
select count(*) from hugeints where h <= '1267650600228229401496703205376'::hugeint;
select count(*) from hugeints where h > '1267650600228229401496703205375'::hugeint;
select count(*) from hugeints where h >= 42::hugeint;
select * from hugeints join hugeints2 using (h);
select * from hugeints t1 join hugeints2 t2 on t1.h <> t2.h;
select * from hugeints t1 join hugeints2 t2 on t1.h >= t2.h order by 1 limit 2;
select interval 2 days;
select interval (2) day;
select interval (1+1) days;
select interval '2' days;
select to_years(2), to_months(2), to_days(2), to_hours(2), to_minutes(2), to_seconds(2);
select interval (i) day from range(1, 4) tbl(i);
select interval (i + 1) day from range(1, 4) tbl(i);
select interval 2 years, interval 2 year;
select interval 2 months, interval 2 month;
select interval 2 days, interval 2 day;
select interval 2 hours, interval 2 hour;
select interval 2 minutes, interval 2 minute;
select interval 2 seconds, interval 2 second;
select interval 3 milliseconds;
select interval 3 microseconds;
select timestamp '1992-01-01 12:00:00' + interval 3 microseconds + interval 3 milliseconds;
select timestamp '1992-01-01 12:00:00' + (interval 3 microseconds + interval 3 milliseconds);
select cast(null as interval);
select try_cast(' ' as interval);
select try_cast('aaaa' as interval);
select try_cast('00:00:' as interval);
select try_cast('3 doopiedoos' as interval);
select try_cast('3 years 2 doy' as interval);
select try_cast(null as interval);
select interval '90' day;
select interval '90' year;
select interval '90' month;
select interval '90' second;
select interval '90' minute;
select interval '90' hour;
select date '1992-03-01' + interval '1' year;
select date '1992-03-01' + interval '0' month;
select date '1992-03-01' - interval '0' month;
select date '1992-03-01' + interval '1' month;
select date '1992-03-01' - interval '1' month;
select date '1992-03-01' + interval '2' month;
select date '1992-03-01' - interval '2' month;
select date '1992-03-01' + interval '3' month;
select date '1992-03-01' - interval '3' month;
select date '1992-03-01' + interval '4' month;
select date '1992-03-01' - interval '4' month;
select date '1992-03-01' + interval '5' month;
select date '1992-03-01' - interval '5' month;
select date '1992-03-01' + interval '6' month;
select date '1992-03-01' - interval '6' month;
select date '1992-03-01' + interval '7' month;
select date '1992-03-01' - interval '7' month;
select date '1992-03-01' + interval '8' month;
select date '1992-03-01' - interval '8' month;
select date '1992-03-01' + interval '9' month;
select date '1992-03-01' - interval '9' month;
select date '1992-03-01' + interval '10' month;
select date '1992-03-01' - interval '10' month;
select date '1992-03-01' + interval '11' month;
select date '1992-03-01' - interval '11' month;
select date '1992-03-01' + interval '12' month;
select date '1992-03-01' - interval '12' month;
select date '1992-03-01' + interval '10' day;
select date '1992-03-01' - interval '10' day;
select date '1993-03-01' - interval '10' day;
select date '1993-03-01' - interval '1' second;
select date '1993-03-01' + interval '1' second;
select date '1993-03-01' + interval '1000000' second;
select date '1993-03-01' - interval '1000000' second;
select time '10:00:00' + interval '5' second;
select interval '5' second + time '10:00:00';
select time '10:00:00' - interval '5' second;
select time '10:00:00' + interval '1' day;
select time '23:00:00' + interval '1' hour;
select time '00:00:00' - interval '1' hour;
select time '00:00:00' + interval '-1' hour;
select timestamp '1992-01-01 10:00:00' + interval '1' day;
select interval '1' day + timestamp '1992-01-01 10:00:00';
select timestamp '1992-01-01 10:00:00' - interval '1' day;
select timestamp '1993-01-01 00:00:00' - timestamp '1991-01-01 01:00:30';
select id, lhs - rhs from issue1998 order by 1;
select interval '30' day > interval '1' month;
select interval '30' day = interval '1' month;
select interval '30' day >= interval '1' month;
select interval '31' day > interval '1' month;
select interval '1' hour < interval '1' day;
select interval '30' hour <= interval '1' day;
select interval '1' hour = interval '1' hour;
select interval '1' year = interval '12' month;
select count(k), min(k), max(k) from (select unnest(l) from (select list(i) l from range(20000) tbl(i)) tbl2(l)) tbl3(k);
select count(k), min(k), max(k) from (select unnest(l) from (select list(i::varchar || '0abcdefghijklmnopqrstuvwxyz') l from range(20000) tbl(i)) tbl2(l)) tbl3(k);
select case when 1=1 then [1] else [2] end;
select case when 1=0 then [1] else [2] end;
select case when i%2=0 then [i] else [-i] end from range(5) tbl(i);
select case when i=[1] then [3] else [4] end from a;
select [1] < [2];
select [1] < [1];
select null < [1];
select [1] < null;
select [1] <= [2];
select [1] <= [1];
select null <= [1];
select [1] <= null;
select [1] = [2];
select [1] = [1];
select null = [1];
select [1] = null;
select [1] <> [2];
select [1] <> [1];
select null <> [1];
select [1] <> null;
select [1] >= [2];
select [1] >= [1];
select null >= [1];
select [1] >= null;
select [1] > [2];
select [1] > [1];
select null > [1];
select [1] > null;
select l < r from list_int1;
select l <= r from list_int1;
select l = r from list_int1;
select l <> r from list_int1;
select l >= r from list_int1;
select l > r from list_int1;
select [1] < [1, 2];
select [1] <= [1, 2];
select [1] = [1, 2];
select [1] <> [1, 2];
select [1] >= [1, 2];
select [1] > [1, 2];
select l < r from list_int;
select l <= r from list_int;
select l = r from list_int;
select l <> r from list_int;
select l >= r from list_int;
select l > r from list_int;
select [] < [1, 2];
select [] < [];
select null < [];
select [] < null;
select [] <= [1, 2];
select [] <= [];
select null <= [];
select [] <= null;
select [] = [1, 2];
select [] = [];
select null = [];
select [] = null;
select [] <> [1, 2];
select [] <> [];
select null <> [];
select [] <> null;
select [] >= [1, 2];
select [] >= [];
select null >= [];
select [] >= null;
select [] > [1, 2];
select [] > [];
select null > [];
select [] > null;
select l < r from list_int_empty;
select l <= r from list_int_empty;
select l = r from list_int_empty;
select l <> r from list_int_empty;
select l >= r from list_int_empty;
select l > r from list_int_empty;
select ['duck'] < ['duck', 'goose'];
select ['duck'] < ['duck'];
select null < ['duck'];
select ['duck'] < null;
select ['duck'] <= ['duck', 'goose'];
select ['duck'] <= ['duck'];
select null <= ['duck'];
select ['duck'] <= null;
select ['duck'] = ['duck', 'goose'];
select ['duck'] = ['duck'];
select null = ['duck'];
select ['duck'] = null;
select ['duck'] <> ['duck', 'goose'];
select ['duck'] <> ['duck'];
select null <> ['duck'];
select ['duck'] <> null;
select ['duck'] >= ['duck', 'goose'];
select ['duck'] >= ['duck'];
select null >= ['duck'];
select ['duck'] >= null;
select ['duck'] > ['duck', 'goose'];
select ['duck'] > ['duck'];
select null > ['duck'];
select ['duck'] > null;
select l < r from list_str;
select l <= r from list_str;
select l = r from list_str;
select l <> r from list_str;
select l >= r from list_str;
select l > r from list_str;
select [{'x': 'duck', 'y': 1}] < [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];
select [{'x': 'duck', 'y': 1}] < [{'x': 'duck', 'y': 1}];
select null < [{'x': 'duck', 'y': 1}];
select [{'x': 'duck', 'y': 1}] < null;
select [{'x': 'duck', 'y': 1}] <= [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];
select [{'x': 'duck', 'y': 1}] <= [{'x': 'duck', 'y': 1}];
select null <= [{'x': 'duck', 'y': 1}];
select [{'x': 'duck', 'y': 1}] <= null;
select [{'x': 'duck', 'y': 1}] = [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];
select [{'x': 'duck', 'y': 1}] = [{'x': 'duck', 'y': 1}];
select null = [{'x': 'duck', 'y': 1}];
select [{'x': 'duck', 'y': 1}] = null;
select [{'x': 'duck', 'y': 1}] <> [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];
select [{'x': 'duck', 'y': 1}] <> [{'x': 'duck', 'y': 1}];
select null <> [{'x': 'duck', 'y': 1}];
select [{'x': 'duck', 'y': 1}] <> null;
select [{'x': 'duck', 'y': 1}] >= [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];
select [{'x': 'duck', 'y': 1}] >= [{'x': 'duck', 'y': 1}];
select null >= [{'x': 'duck', 'y': 1}];
select [{'x': 'duck', 'y': 1}] >= null;
select [{'x': 'duck', 'y': 1}] > [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];
select [{'x': 'duck', 'y': 1}] > [{'x': 'duck', 'y': 1}];
select null > [{'x': 'duck', 'y': 1}];
select [{'x': 'duck', 'y': 1}] > null;
select l < r from list_of_struct;
select l <= r from list_of_struct;
select l = r from list_of_struct;
select l <> r from list_of_struct;
select l >= r from list_of_struct;
select l > r from list_of_struct;
select [a,a+1,a+2]<[1,2,3] from range(5) tbl(a);
select [a,a+1,a+2]<=[1,2,3] from range(5) tbl(a);
select [a,a+1,a+2]=[1,2,3] from range(5) tbl(a);
select [a,a+1,a+2]<>[1,2,3] from range(5) tbl(a);
select [a,a+1,a+2]>=[1,2,3] from range(5) tbl(a);
select [a,a+1,a+2]>[1,2,3] from range(5) tbl(a);
select * from v1 v, v1 w order by v.a, w.a;
select * from v1 v, v1 w where v.a >= w.a order by v.a, w.a;
select * from v1 v, v1 w where v.a <> w.a order by v.a, w.a;
select * from v1 v, v1 w where v.a <> w.a or v.a>w.a order by v.a, w.a;
select * from v2 v, v2 w order by v.a, w.a;
select * from v2 v, v2 w where v.a >= w.a order by v.a, w.a;
select * from v2 v, v2 w where v.a <> w.a order by v.a, w.a;
select * from v2 v, v2 w where v.a <> w.a or v.a > w.a order by v.a, w.a;
select * from v3 v, v3 w order by v.a, w.a;
select * from v3 v, v3 w where v.a >= w.a order by v.a, w.a;
select * from v3 v, v3 w where v.a <> w.a order by v.a, w.a;
select * from v3 v, v3 w where v.a <> w.a or v.a > w.a order by v.a, w.a;
select l[1] from a;
select l[2] from a;
select l[3] from a;
select * from nested;
select l[1] from nested;
select l[2] from nested;
select l[3] from nested;
select l[4] from nested;
select l[5] from nested;
select l[5]['b'] from nested;
select count(*) from a join all_types on (a.col=all_types.`${colname}`);
select * from a where id=1;
select * from a where id=2;
select * from a where id=3;
select * from a where id=4;
select * from a where id=1 order by c[1] nulls first;
select list_extract(l, 0) from test;
select list_extract(l, 1) from test;
select l[:] from test;
select l[0:0] from test;
select l[0:1] from test;
select l[1:0] from test;
select unnest(l) from a;
select * from b;
select unnest(l) from b;
select unnest(l)['a']['a1'] from b;
select unnest(l)['a']['a2'] from b;
select unnest(l)['a'] from b;
select stats([3, 4]);
select [3, 4];
select stats(null::int[]);
select null::int[];
select ['hello', 'world'];
select [interval 1 year, interval 2 year];
select stats([i]) from integers limit 1;
select [i] from integers;
select stats(l[1]) from lists limit 1;
select l[1] from lists;
select * from lists;
select * from a order by id;
select * from lists order by id;
select count(*) from t1;
select count(k), min(k), max(k) from (select unnest(l) from t1) tbl(k);
select count(*) from t2;
select count(k), min(k), max(k) from (select unnest(l) from t2) tbl(k);
select count(*) from t3;
select count(k), min(k['a']), max(k['a']), min(k['b']), max(k['b']) from (select unnest(l) from t3) tbl(k);
select count(*) from t4;
select count(k), min(k[1]), max(k[1]), min(k[2]), max(k[2]) from (select unnest(l) from t4) tbl(k);
select id, b[1] from a order by id;
select id, b[1][1] from a order by id;
select id, b[0][0] from a order by id;
select id, b[0][1] from a order by id;
select id, b[1][0] from a order by id;
select id, b[1][4] from a order by id;
select * from a where b[1][1]=1;
select * from a where b[1][1]=1 or b[1][2]=2;
select * from nested order by id;
select id, b[1] from nested order by id;
select id, b[1][1] from nested order by id;
select id, b[1][3] from nested order by id;
select id, b[1][3][1] from nested order by id;
select id, b[1][3][4] from nested order by id;
select id, b[0:1] from a order by id;
select id, b[0:2] from a order by id;
select id, b[1:1] from a order by id;
select id, b[1:2] from a order by id;
select id, b[0:0] from a order by id;
select id, b[:] from a order by id;
select id, list_extract(b[:], 0) from a order by id;
select id, unnest(i), unnest(j) from (values (1, ['abcd', 'efgh'], ['123456789abcd']), (2, null, ['123456789efgh', '123456789klmnop']), (3, ['hello', null, 'world'], [null])) tbl(id, i, j);
select id, unnest(i), unnest(j) from (values (1, [1, 2], [10]), (2, null, [11, 12]), (3, [3, null, 4], [null])) tbl(id, i, j);
select unnest(i) from (values ([[1, 2, 3], [4, 5]]), (null), ([[6, 7], null, [8, 9, null]])) tbl(i);
select unnest(i), unnest(j) from (values ([[1, 2, 3], [4, 5]], [[10, 11], [12, 13]]), (null, [[14, 15], [null, 16], null, null]), ([[6, 7], null, [8, 9, null]], null)) tbl(i, j);
select unnest(i) from (values ([{'a': 10, 'b': 1}, {'a': 11, 'b': 2}]), (null), ([{'a': 12, 'b': 3}, null, {'a': null, 'b': null}])) tbl(i);
select unnest(i) from (values ([{'a': {'a1': 7, 'a2': null}, 'b': 1}, {'a': {'a1': 9, 'a2': 10}, 'b': 2}]), (null), ([{'a': {'a1': 11, 'a2': 12}, 'b': 3}, null, {'a': null, 'b': null}, {'a': {'a1': null, 'a2': null}, 'b': 3}])) tbl(i);
select id, unnest(i), unnest(j) from (values (1, [{'a': 1, 'b': null}, {'a': 2, 'b': 'hello'}], [[1, 2, 3], [4, 5]]), (2, null, [[11, 12], null]), (3, [{'a': 3, 'b': 'test the best unnest fest'}, null, {'a': 4, 'b': 'abcd'}], [null])) tbl(id, i, j);
select id, unnest(i), unnest(j) from (values (1, [{'a': [1, 2], 'b': null}, {'a': null, 'b': 'hello'}], [[1, 2, 3], [4, 5]]), (2, null, [[11, 12], null]), (3, [{'a': [null, 4, 5], 'b': 'test the best unnest fest'}, null, {'a': [6, 7, null, 9], 'b': 'abcd'}], [null])) tbl(id, i, j);
select unnest(i) from t1;
select unnest(null);
select unnest(null::boolean[]);
select name, unnest(address) from people;
select name, unnest(address), unnest([1]) from people;
select * from unnest(array[1, 2, 3]);
select * from unnest([1, 2, 3]::int[]);
select i from unnest(array[1, 2, 3]) as tbl(i);
select i from unnest(array[null, 'hello', 'world', 'bleorkbaejkoreijgaiorjgare']) as tbl(i);
select i from unnest([[1, 2], [3, 4], null, [4, 5, 6, 7]]) as tbl(i);
select i from unnest([{'a': [1, 2, 3], 'b': [4, 5, 6]}, {'a': [4, 5], 'b': [7, 8, 9, 10]}]) as tbl(i);
select count(*) from unnest(array[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024]) as tbl(i);
select i from unnest(null::int[]) as tbl(i);
select i from unnest([]::int[]) as tbl(i);
select * from unnest((select [1,2,3] union all select [4,5]));
select * from unnest((select l from lists));
select l from a order by 1;
select unnest(l) from a order by 1;
select unnest(l) from a order by 1;
select 1=all([1, 2, 3]);
select 1=all([1, 2, 3, null]);
select 1=any([1, 2, 3]);
select 4=any([1, 2, 3]);
select 4=any([1, 2, 3, null]);
select 4>all([1, 2, 3]);
select 4>all([1, 2, 3, null]);
select 1=any(null);
select 1=any(l) from v1;
select 6=any(l) from v1;
select null=any(l) from v1;
select 1=any(l) from v2;
select 6=any(l) from v2;
select null=any(l) from v2;
select g, 5=any(l) from v3 order by g;
select g, 3>any(l) from v3 order by g;
select g, 100>all(l) from v3 order by g;
select g, (select 5=any(l)) from v3 order by g;
select array[1,2], array[null], array['hello', 'world'], array[];
select array[array[1,2]], array[array[array[1, 2], array[2, 3]], array[array[5], array[3, 4]]];
select array[1,2,3,4,5,6,7,8,9,10,null];
select array[1, i] from range(3) tbl(i) order by i;
select array[array[1], array['hello']];
select array[1]::bigint[];
select array[1]::bigint array;
select array[[1, 2], [3, 4]]::bigint[][];
select array[[1, 2], [3, 4]]::varchar[];
select unnest(unnest(array[[1, 2], [3, 4]]::varchar[][]));
select unnest(array[[1, 2], [3, 4]]::varchar[]);
select array[[1, 2], [3, 4]]::varchar;
select array_agg(null), array_agg(42);
select array_agg(i) from range(0, 3) tbl(i);
select array_agg(i) from range(0, 0) tbl(i);
select title, array_agg ( case when first_name='matt' and title='team america' then 'matt daaamon' else first_name || ' ' || last_name end) actors from films join film_actor using (film_id) join actors using (actor_id) group by title order by title;
select film_id, array_agg(actor_id order by actor_id) from film_actor group by film_id;
select min(i::varchar), max(i::varchar) from range(10) tbl(i);
select min(list_value(i)), max(list_value(i)) from range(10) tbl(i);
select min(list_value(-i)), max(list_value(i+2)) from range(10) tbl(i);
select min(i), max(i), first(i) from list_int;
select first([i]) from range(10) tbl(i);
select first([0]) from range(10) tbl(i);
select first(i) from range(10) tbl(i) where i=-1;
select first(null::int[]) from range(10) tbl(i) where i=-1;
select i%3 a, first([i]) from range(10) tbl(i) group by a order by a;
select i%3 a, unnest(first([i])) from range(10) tbl(i) group by a order by a;
select string_agg(list_value(i), ',') from range(10) tbl(i);
select i, i % 2, min(list_value(i)) over(partition by i % 2 order by i) from range(10) tbl(i) order by 1;
select i, i % 2, list(i) over(partition by i % 2 order by i) from range(10) tbl(i) order by 2, 1;
select i, i % 2, list(i) over(partition by i % 2 order by i rows between 1 preceding and 1 following) from range(10) tbl(i) order by 2, 1;
select (select [1, 2]);
select unnest((select [1, 2]));
select (select [[1, 2], [3, 4]]);
select (select {'a': [1, 2, 3], 'b': 7});
select (select list_value());
select (select case when 1=0 then list_value() else null end);
select list_extract(null, 1);
select list_extract(42, 1);
select list_extract(list_value(), 1);
select list_extract(list_value(null), 1);
select list_extract(list_value(null), -1);
select list_extract(list_value(42), null);
select list_extract(list_value(42), 1);
select list_element(list_value(42), 1);
select list_extract(list_value(42, 43), 2);
select list_extract(list_value(42, 43, 44, 45), -1);
select list_extract(list_value(42, 43, 44, 45), -2);
select list_extract(list_value(42, 43, 44, 45), -4);
select list_extract(list_value(42, 43, 44, 45), -5);
select list_extract(list_value(42), 2);
select list_extract(list_value('hello', 'world'), 1);
select list_extract(list_value('hello', 'world'), 2);
select list_extract(list_value(42::utinyint), 1);
select list_extract(list_value(42::tinyint), 1);
select list_extract(list_value(42::usmallint), 1);
select list_extract(list_value(42::smallint), 1);
select list_extract(list_value(42::uinteger), 1);
select list_extract(list_value(42::integer), 1);
select list_extract(list_value(42::ubigint), 1);
select list_extract(list_value(42::bigint), 1);
select list_extract(list_value(42::hugeint), 1);
select list_extract(list_value(42::float), 1);
select list_extract(list_value(42::double), 1);
select list_extract(list_value('2019-11-26'::date), 1);
select list_extract(list_value('21:42:00'::time), 1);
select list_extract(list_value('2019-11-26 09:42:00'::timestamp), 1);
select a[1] from (values (list_value())) tbl(a);
select a[1] from (values (list_value(null))) tbl(a);
select a[-1] from (values (list_value(null))) tbl(a);
select a[null] from (values (list_value(42))) tbl(a);
select a[1] from (values (list_value(42))) tbl(a);
select a[1+1-1] from (values (list_value(42))) tbl(a);
select a[b] from (values (list_value(42), 1)) tbl(a, b);
select (list_value(42))[1];
select list_value(42)[1];
select a[2:] from (values (list_value(42, 43, 44))) tbl(a);
select a[1:] from (values (list_value(42, 43, 44))) tbl(a);
select a[:1] from (values (list_value(42, 43, 44))) tbl(a);
select a[0:1] from (values (list_value(42, 43, 44))) tbl(a);
select a[0:-1] from (values (list_value(42, 43, 44))) tbl(a);
select a[-3:-1] from (values (list_value(42, 43, 44))) tbl(a);
select a[-5:] from (values (list_value(42, 43, 44))) tbl(a);
select a[:5] from (values (list_value(42, 43, 44))) tbl(a);
select s from lists;
select d from ducks;
select d[0:0] from ducks;
select s[1:2] from lists;
select s[1:3] from lists;
select s[off:length+off] from lists;
select s[off:2+off] from lists;
select s[0:length] from lists;
select hello[off:length+off] from lists, hello;
select n[off:length+off] from lists, nulltable;
select hello[null:length+null] from lists, hello;
select hello[off:null+off] from lists, hello;
select n[null:length+null] from lists, nulltable;
select hello[null:null+null] from lists, hello;
select n[off:null+off] from lists, nulltable;
select n[null:null+null] from lists, nulltable;
select s[-2:] from lists;
select s[0:1] from lists;
select s[-4:-2] from lists;
select s[1:1] from lists;
select s[1:] from lists;
select s[2:] from lists;
select s[(2147483647-1):1] from lists;
select s[(2147483647-1):-1] from lists;
select s[(-2147483646-1):-1] from lists;
select s[(-2147483646-1):-2147483647] from lists;
select array_pop_back(s) from lists;
select array_pop_front(s) from lists;
select [{'i': 1,'j': [2, 3]}, null, {'i': 1, 'j': [2, 3]}];
select list(a) l1 from (values (1), (2), (3)) as t1 (a);
select unnest(l1) from (select list(a) l1 from (values (1), (2), (3)) as t1 (a)) t1;
select * from (select list(a) l1 from (values (1), (2), (3)) as t1 (a)) t1, (select list(b) l2 from (values (4), (5), (6), (7)) as t2 (b)) t2;
select unnest(l1) u1, unnest(l2) u2 from (select list(a) l1 from (values (1), (2), (3)) as t1 (a)) t1, (select list(b) l2 from (values (4), (5), (6), (7)) as t2 (b)) t2;
select unnest(l1), l2 from (select list(a) l1 from (values (1), (2), (3)) as t1 (a)) t1, (select list(b) l2 from (values (4), (5), (6), (7)) as t2 (b)) t2;
select l1, unnest(l2) from (select list(a) l1 from (values (1), (2), (3)) as t1 (a)) t1, (select list(b) l2 from (values (4), (5), (6), (7)) as t2 (b)) t2;
select unnest(list(e)) ue, list(g) from list_data order by 1 nulls last;
select g, list(e) from list_data group by g order by g;
select g, list(e) l1, list(e) l2 from list_data group by g order by g;
select g, list(e/2.0) from list_data group by g order by g;
select g, list(cast(e as varchar)) from list_data group by g order by g;
select list(e) from list_data;
select unnest(list(e)) ue from list_data order by ue;
select list(e), list(g) from list_data;
select list(42);
select list(42) from list_data;
select unnest(list(42));
select unlist(list(42));
select unnest(list(e)) ue, unnest(list(g)) ug from list_data order by ue;
select g, unnest(list(e)) ue, unnest(list(e+1)) ue2 from list_data group by g order by ue;
select g, unnest(l) u from (select g, list(e) l from list_data group by g) u1 order by u;
select g, unnest(l)+1 u from (select g, list(e) l from list_data group by g) u1 order by u;
select g, struct_pack(a := g, b := le) sl from (select g, list(e) le from list_data group by g) xx where g < 3 order by g;
select list(struct_pack(a := g, b := le)) mind_blown from (select g, list(e) le from list_data group by g order by g) xx;
select g, list(struct_pack(a := e, b := e+1)) ls from list_data group by g order by g;
select g, list(struct_pack(a := e, b := e+1)) ls from list_data where g > 2group by g order by g;
select g2, list(le) from (select g % 2 g2, list(e) le from list_data group by g order by g) sq group by g2 order by g2;
select sum(ue) from (select unnest(le) ue from (select g, list(e) le from list_data group by g order by g) xx) xy;
select list_value('hello');
select list_value('hello')::varchar;
select l::varchar from (values (list_value('hello', 'world')), (list_value('a', 'b', 'c'))) t(l);
select list_value(1, 2, 3, '4') a, list_value('a','b','c') b, list_value(42, null) c, list_value(null, null, null) d, list_value() e;
select a from (values (list_value(1, 2, 3, 4)), (list_value()), (list_value(null::integer)), (list_value(42))) lv(a);
select a from (values (list_value('hello', 'world')), (list_value()), (list_value(null::varchar)), (list_value('42'))) lv(a);
select * from (values ((list_value()), (list_value(null)), list_value(1, 2))) lv(a);
select * from (values (list_value(1, 2)), (list_value()), (list_value(null::integer))) lv(a);
select list_value(1, 2, 3) union all select list_value(null::integer) union all select list_value() union all select null;
select null union all select list_value() union all select list_value(null::integer) union all select list_value(1, 2, 3);
select unnest(a) ua from (values (list_value(1, 2, 3, 4)), (list_value()), (list_value(null::integer)), (list_value(42))) lv(a);
select unnest(a) ua from (values (list_value()), (list_value(1, 2, 3, 4)), (list_value(null)), (list_value(42))) lv(a);
select * from (values (list_value(1, 2)), (list_value()), (list_value('a'))) lv(a);
select list_value(42, 'a');
select cast(unnest(list_value(42))+2 as integer);
select list_value(g, e, 42, null) from list_data where g > 2;
select case when g = 2 then list_value(g, e, 42) else list_value(84, null) end from list_data where g > 1 union all select list_value(null::integer);
select case when g = 2 then list_value(g, e, 42) else list_value('eeek') end from list_data where g > 1;
select * from (values ([1, null, 3]), ([null, 2, 3]), ([1, 2, null]), (null), ([1, 2, 3])) tbl(i);
select map(list_value({'i':1,'j':2},{'i':3,'j':4}),list_value({'i':1,'j':2},{'i':3,'j':4})) as a;
select map(list_value(1,2,3), list_value(6,null,4));
select map(list_value(1, 2, 3, 4),list_value(10, 9, 8, 7));
select map(list_value(),list_value());
select map();
select map(a, b) from tbl;
select map(list_value([1],[2],[3],[4]),list_value(10,9,8,7));
select cardinality(map(list_value(1, 2, 3, 4),list_value(10, 9, 8, 7)));
select cardinality(map(list_value(),list_value()));
select cardinality(map());
select a, cardinality(m) from (select a,map(lsta,lstb) as m from (select list(a) as lsta, list(b) as lstb, a from ints group by a) as lst_tbl) as t;
select a, cardinality(m) from (select a,map(lsta,lstb) as m from (select list(a) as lsta, list(b) as lstb, a from ints where b < 3 group by a) as lst_tbl) as t;
select cardinality(m) from (select map(list_value(1), list_value(2)) from range(5) tbl(i)) tbl(m);
select grp, m, case when grp>1 then cardinality(m) else 0 end from (select grp, map(lsta,lstb) as m from (select a%4 as grp, list(a) as lsta, list(a) as lstb from range(7) tbl(a) group by grp) as lst_tbl) as t;
select map( [ [1],[2],[3] ], [ 4,2,0 ] );
select map( [ {'foo': true}, {'foo': false}, {'foo': null} ], [ 4,2,0 ] );
select map( [ map([5],[4]), map([10],[2]), map([2,3],[3,2]), map([10],[3]), map([3,2], [2,3]) ], [ 0,1,2,3,4 ] );
select m[1] from (select map(list_value(1, 2, 3, 4),list_value(10, 9, 8, 7)) as m) as t;
select m[0] from (select map(list_value(1, 2, 3, 4,5),list_value(10, 9, 8, 7,11)) as m) as t;
select m[null] from (select map(list_value(1, 2, 3, 4,5),list_value(10, 9, 8, 7,11)) as m) as t;
select m[2] from (select map(list_value(),list_value()) as m) as t;
select m[2] from (select map() as m) as t;
select m[2::tinyint] from (select map(list_value(1, 2, 3, 4,5),list_value(10, 9, 8, 7,11)) as m) as t;
select m['spice girls'] from (select map(list_value('jon lajoie', 'backstreet boys', 'tenacious d' ),list_value(10,9,10)) as m) as t;
select m[null] from (select map(list_value('jon lajoie', 'backstreet boys', 'tenacious d' ),list_value(10,9,10)) as m) as t;
select m['tenacious d'] from (select map(list_value('jon lajoie', 'backstreet boys', 'tenacious d'),list_value(10,9,1)) as m) as t;
select m[0] from (select map(list_value('jon lajoie', 'backstreet boys', 'tenacious d' ),list_value(10,9,10)) as m) as t;
select map_extract(m,1) from (select map(list_value(1, 2, 3, 4),list_value(10, 9, 8, 7)) as m) as t;
select map_extract(m,3) from (select map(list_value(1, 2, 3, 4),list_value(10, 9, 8, 7)) as m) as t;
select element_at(m,1) from (select map(list_value(1, 2, 3, 4),list_value(10, 9, 8, 7)) as m) as t;
select element_at(m,3) from (select map(list_value(1, 2, 3, 4),list_value(10, 9, 8, 7)) as m) as t;
select m[10] from (select map(lst,lst) as m from (select list(i) as lst from range(10000) tbl(i)) as lst_tbl) as t;
select m['jon lajoie'] from (select map(list_value('jon lajoie', 'tenacious d'),list_value(10,1)) as m) as t;
select m[10] from (select map(list_value(10,9,1,11,13),list_value(null, null, null,null,null)) as m) as t;
select m from (select map(lsta,lstb) as m from (select list(a) as lsta, list(b) as lstb from ints where a < 4 and b > 1) as lst_tbl) as t;
select m[2] from (select map(lsta,lstb) as m from (select list(a) as lsta, list(b) as lstb from ints where a < 4 and b > 1) as lst_tbl) as t;
select m from (select map(lsta,lstb) as m from (select list(a) as lsta, list(b) as lstb from ints group by b) as lst_tbl) as t;
select m[1] from (select map(lsta,lstb) as m from (select list(a) as lsta, list(b) as lstb from ints group by b) as lst_tbl) as t;
select m[1] from (select map(lsta,lstb) as m from (select list(a) as lsta, list(b) as lstb from ints where b <4 group by b) as lst_tbl) as t;
select map_extract(map(list_value(10,9,12,11,13),list_value(10,9,10,11,13)),10);
select m[1] from (select map(list_value(1), list_value(2)) from range(5) tbl(i)) tbl(m);
select grp, m, case when grp>1 then m[0] else list_value(null) end from (select grp, map(lsta,lstb) as m from (select a%4 as grp, list(a) as lsta, list(a) as lstb from range(7) tbl(a) group by grp) as lst_tbl) as t;
select [{'i':1,'j':[2,3]},null];
select [{'i':1,'j':[2,3]},null, {'i':1,'j':[2,3]}];
select * from (values (map(list_value(1,2),list_value(3,4))), (null), (map(list_value(1,2),list_value(3,4))), (null)) as a;
select map(list_value({'i':1,'j':2},{'i':3,'j':4}),list_value({'i':1,'j':2},{'i':3,'j':4}));
select min(struct_pack(i := i, j := i + 2)), max(struct_pack(i := i, j := i + 2)), first(struct_pack(i := i, j := i + 2)) from range(10) tbl(i);
select min(struct_pack(i := -i, j := -i - 2)), max(struct_pack(i := i + 2, j := i + 4)), first(struct_pack(i := i, j := i + 2)) from range(10) tbl(i);
select string_agg(struct_pack(i := i, j := i + 2), ',') from range(10) tbl(i);
select min(i), max(i), first(i) from struct_int;
select min(s), max(s) from structs;
select min(s)['i'], max(s)['i'] from structs;
select {'i': 1, 'j': 2};
select {'i': null, 'j': 2};
select {'i': [], 'j': 2};
select {'i': [1, 2, 3], 'j': 2};
select {i: r, j: 2} from range(3) tbl(r);
select (select {'a': 3});
select (select {'a': 3})['a'];
select (select case when 1=0 then {'a': 3} else null end);
select e, struct_pack(e) from struct_data order by e limit 2;
select struct_pack(a := 42, b := 43) as struct;
select struct_pack(a := null, b := null) as struct;
select e, struct_extract(struct_pack(xx := e, yy := g), 'xx') as ee from struct_data;
select e, (struct_pack(xx := e, yy := g)).xx as ee from struct_data;
select e, (a).xx as ee from (select e, struct_pack(xx := e, yy := g) from struct_data) tbl(e, a);
select e, struct_extract(struct_pack(xx := e, yy := g), 'xx') as s from struct_data where e > 4;
select e, struct_extract(struct_pack(xx := e, yy := g), 'xx') as s from struct_data where e is null;
select e, struct_extract(struct_pack(xx := e/2), 'xx') as s from struct_data where e > 4;
select e, struct_extract(struct_pack(xx := e/2), 'xx')*2 as s from struct_data where e > 4;
select e, struct_extract(struct_pack(xx := e, yy := g), 'xx') as ee from struct_data order by e desc;
select e, struct_extract(struct_pack(a := e, b := rowid, c := 42), 'c') as ee from struct_data order by rowid;
select struct_extract(struct_pack(a := 42, b := 43), 'a') from struct_data;
select struct_extract(struct_pack(a := 42, b := 43), 'a') s;
select struct_extract(struct_extract(struct_pack(a := struct_pack(x := 'asdf', y := null), b := 43), 'a'), 'x') s;
select 0 and 0, 0 and 1, 1 and 0, 1 and 1, null and 0, null and 1, 0 and null, 1 and null, null and null;
select 0 or 0, 0 or 1, 1 or 0, 1 or 1, null or 0, null or 1, 0 or null, 1 or null, null or null;
select not(0), not(1), not(null);
select null is null, null is not null, 42 is null, 42 is not null;
select null = null, null <> null, 42 = null, 42 <> null;
select b, count(a), sum(a), min(a), max(a) from test group by b order by b;
select a is null, a is not null, rowid is null, (a = null) is null from test order by b;
select a is null, a is not null, rowid is null, (a = null) is null from test where b != 1 order by b;
select 3 + null;
select null + 3;
select null + null;
select 1 + (null + null);
select 4 / 0;
select a from test;
select cast(a as bigint) from test;
select a / 0 from test;
select a / (a - a) from test;
select a + b from test;
select sum(a), min(a), max(a) from test;
select count(*), count(a), count(b) from test;
select i::ubigint from bigints where i>=0 order by i;
select try_cast(i as utinyint) from bigints order by i;
select try_cast(i as usmallint) from bigints order by i;
select try_cast(i as uinteger) from bigints order by i;
select try_cast(i as ubigint) from bigints order by i;
select try_cast(i as tinyint) from bigints order by i;
select try_cast(i as smallint) from bigints order by i;
select try_cast(i as integer) from bigints order by i;
select i::hugeint::bigint from bigints order by i;
select i::float from bigints order by i;
select i::double from bigints order by i;
select i::bool from bigints order by i;
select i::varchar from bigints order by i;
select try_cast(s as bigint) from strings;
select i::decimal(38,0)::bigint from bigints order by i;
select try_cast(i as decimal(3,0))::bigint from bigints order by i;
select try_cast(i as decimal(9,0))::bigint from bigints order by i;
select try_cast(i as decimal(18,0))::bigint from bigints order by i;
select try_cast(i as decimal(38,20))::bigint from bigints order by i;
select b::smallint from booleans;
select b::integer from booleans;
select b::bigint from booleans;
select b::hugeint from booleans;
select b::float from booleans;
select b::double from booleans;
select b::smallint::bool from booleans;
select b::integer::bool from booleans;
select b::bigint::bool from booleans;
select b::hugeint::bool from booleans;
select b::float::bool from booleans;
select b::double::bool from booleans;
select try_cast(i as utinyint) from hugeints order by i;
select try_cast(i as usmallint) from hugeints order by i;
select try_cast(i as uinteger) from hugeints order by i;
select try_cast(i as ubigint) from hugeints order by i;
select try_cast(i as tinyint) from hugeints order by i;
select try_cast(i as smallint) from hugeints order by i;
select try_cast(i as integer) from hugeints order by i;
select try_cast(i as bigint) from hugeints order by i;
select i::float from hugeints order by i;
select i::double from hugeints order by i;
select i::bool from hugeints order by i;
select i::varchar from hugeints order by i;
select try_cast(s as hugeint) from strings;
select try_cast(i as decimal(3,0))::hugeint from hugeints order by i;
select try_cast(i as decimal(9,0))::hugeint from hugeints order by i;
select try_cast(i as decimal(18,0))::hugeint from hugeints order by i;
select try_cast(i as decimal(38,0))::hugeint from hugeints order by i;
select i::uinteger from integers where i>=0 order by i;
select i::ubigint from integers where i>=0 order by i;
select try_cast(i as utinyint)::integer from integers order by i;
select try_cast(i as usmallint)::integer from integers order by i;
select try_cast(i as uinteger)::integer from integers order by i;
select try_cast(i as ubigint)::integer from integers order by i;
select try_cast(i as tinyint) from integers order by i;
select try_cast(i as smallint) from integers order by i;
select i::bigint::integer from integers order by i;
select i::hugeint::integer from integers order by i;
select i::float from integers order by i;
select i::double from integers order by i;
select i::bool from integers order by i;
select i::varchar from integers order by i;
select try_cast(s as integer) from strings;
select i::decimal(18,0)::integer from integers order by i;
select i::decimal(38,0)::integer from integers order by i;
select try_cast(i as decimal(3,0))::integer from integers order by i;
select try_cast(i as decimal(9,0))::integer from integers order by i;
select try_cast(i as decimal(18,9))::integer from integers order by i;
select try_cast(i as decimal(38,29))::integer from integers order by i;
select i::usmallint from smallints where i>=0 order by i;
select i::uinteger from smallints where i>=0 order by i;
select i::ubigint from smallints where i>=0 order by i;
select try_cast(i as utinyint)::smallint from smallints order by i;
select try_cast(i as usmallint)::smallint from smallints order by i;
select try_cast(i as uinteger)::smallint from smallints order by i;
select try_cast(i as ubigint)::smallint from smallints order by i;
select try_cast(i as tinyint)::smallint from smallints order by i;
select i::integer::smallint from smallints order by i;
select i::bigint::smallint from smallints order by i;
select i::hugeint::smallint from smallints order by i;
select i::float from smallints order by i;
select i::double from smallints order by i;
select i::bool from smallints order by i;
select i::varchar from smallints order by i;
select try_cast(s as smallint) from strings;
select i::decimal(9,0)::smallint from smallints order by i;
select i::decimal(18,0)::smallint from smallints order by i;
select i::decimal(38,0)::smallint from smallints order by i;
select try_cast(i as decimal(3,0))::smallint from smallints order by i;
select try_cast(i as decimal(9,5))::smallint from smallints order by i;
select try_cast(i as decimal(18,14))::smallint from smallints order by i;
select try_cast(i as decimal(38,34))::smallint from smallints order by i;
select * from numerics;
select i::utinyint::tinyint from tinyints where i>=0 order by i;
select i::usmallint::tinyint from tinyints where i>=0 order by i;
select i::uinteger::tinyint from tinyints where i>=0 order by i;
select i::ubigint::tinyint from tinyints where i>=0 order by i;
select try_cast(i as utinyint) from tinyints order by i;
select try_cast(i as usmallint) from tinyints order by i;
select try_cast(i as uinteger) from tinyints order by i;
select try_cast(i as ubigint) from tinyints order by i;
select i::smallint::tinyint from tinyints order by i;
select i::integer::tinyint from tinyints order by i;
select i::bigint::tinyint from tinyints order by i;
select i::hugeint::tinyint from tinyints order by i;
select i::float from tinyints order by i;
select i::double from tinyints order by i;
select i::bool from tinyints order by i;
select i::varchar::tinyint from tinyints order by i;
select try_cast(s as tinyint) from strings;
select i::decimal(3,0)::tinyint from tinyints order by i;
select i::decimal(9,0)::tinyint from tinyints order by i;
select i::decimal(18,0)::tinyint from tinyints order by i;
select i::decimal(38,0)::tinyint from tinyints order by i;
select try_cast(i as decimal(3,1))::tinyint from tinyints order by i;
select try_cast(i as decimal(9,7))::tinyint from tinyints order by i;
select try_cast(i as decimal(18,16))::tinyint from tinyints order by i;
select try_cast(i as decimal(38,36))::tinyint from tinyints order by i;
select try_cast(i as utinyint) from ubigints order by i;
select try_cast(i as usmallint) from ubigints order by i;
select try_cast(i as uinteger) from ubigints order by i;
select try_cast(i as tinyint) from ubigints order by i;
select try_cast(i as smallint) from ubigints order by i;
select try_cast(i as integer) from ubigints order by i;
select try_cast(i as bigint) from ubigints order by i;
select i::hugeint from ubigints order by i;
select i::float from ubigints order by i;
select i::double from ubigints order by i;
select i::bool from ubigints order by i;
select i::varchar from ubigints order by i;
select try_cast(s as ubigint) from strings;
select i::decimal(38,0)::ubigint from ubigints order by i;
select try_cast(i as decimal(3,0))::ubigint from ubigints order by i;
select try_cast(i as decimal(9,0))::ubigint from ubigints order by i;
select try_cast(i as decimal(18,0))::ubigint from ubigints order by i;
select try_cast(i as decimal(38,20))::ubigint from ubigints order by i;
select try_cast(i as utinyint) from uintegers order by i;
select try_cast(i as usmallint) from uintegers order by i;
select i::ubigint from uintegers order by i;
select try_cast(i as tinyint) from uintegers order by i;
select try_cast(i as smallint) from uintegers order by i;
select try_cast(i as integer) from uintegers order by i;
select i::bigint from uintegers order by i;
select i::hugeint from uintegers order by i;
select i::float from uintegers order by i;
select i::double from uintegers order by i;
select i::bool from uintegers order by i;
select i::varchar from uintegers order by i;
select try_cast(s as uinteger) from strings;
select i::decimal(18,0)::uinteger from uintegers order by i;
select i::decimal(38,0)::uinteger from uintegers order by i;
select try_cast(i as decimal(3,0))::uinteger from uintegers order by i;
select try_cast(i as decimal(9,0))::uinteger from uintegers order by i;
select try_cast(i as decimal(18,9))::uinteger from uintegers order by i;
select try_cast(i as decimal(38,29))::uinteger from uintegers order by i;
select try_cast(i as utinyint) from usmallints order by i;
select i::uinteger from usmallints order by i;
select i::ubigint from usmallints order by i;
select try_cast(i as tinyint) from usmallints order by i;
select try_cast(i as smallint) from usmallints order by i;
select i::integer from usmallints order by i;
select i::bigint from usmallints order by i;
select i::hugeint::usmallint from usmallints order by i;
select i::float from usmallints order by i;
select i::double from usmallints order by i;
select i::bool from usmallints order by i;
select i::varchar from usmallints order by i;
select try_cast(s as usmallint) from strings;
select i::decimal(9,0)::usmallint from usmallints order by i;
select i::decimal(18,0)::usmallint from usmallints order by i;
select i::decimal(38,0)::usmallint from usmallints order by i;
select try_cast(i as decimal(3,0))::usmallint from usmallints order by i;
select try_cast(i as decimal(9,5))::usmallint from usmallints order by i;
select try_cast(i as decimal(18,14))::usmallint from usmallints order by i;
select try_cast(i as decimal(38,34))::usmallint from usmallints order by i;
select i::usmallint from utinyints order by i;
select i::uinteger from utinyints order by i;
select i::ubigint from utinyints order by i;
select try_cast(i as tinyint) from utinyints order by i;
select i::smallint from utinyints order by i;
select i::integer from utinyints order by i;
select i::bigint from utinyints order by i;
select i::hugeint from utinyints order by i;
select i::float from utinyints order by i;
select i::double from utinyints order by i;
select i::bool from utinyints order by i;
select i::varchar from utinyints order by i;
select try_cast(s as utinyint) from strings;
select i::decimal(3,0)::utinyint from utinyints order by i;
select i::decimal(9,0)::utinyint from utinyints order by i;
select i::decimal(18,0)::utinyint from utinyints order by i;
select i::decimal(38,0)::utinyint from utinyints order by i;
select try_cast(i as decimal(3,1))::utinyint from utinyints order by i;
select try_cast(i as decimal(9,7))::utinyint from utinyints order by i;
select try_cast(i as decimal(18,16))::utinyint from utinyints order by i;
select try_cast(i as decimal(38,36))::utinyint from utinyints order by i;
select length(a) from test order by 1;
select * from emojis order by id;
select substring(s, 1, 1), substring(s, 2, 1) from emojis order by id;
select length(s) from emojis order by id;
select ((c).i).a from a;
select (c).a from b;
select case when 1=1 then {'i': 1} else {'i': 2} end;
select case when 1=0 then {'i': 1} else {'i': 2} end;
select case when 1=1 then null else {'i': 2} end;
select case when 1=0 then null else {'i': null} end;
select i, case when i%2=0 then {'i': 1} else {'i': 2} end from range(6) tbl(i);
select i, case when i%2=0 then {'i': 'hello'} else {'i': 'world'} end from range(6) tbl(i);
select i, case when i%2=0 then {'i': 'hello', 'j': {'a': 3, 'b': null}} else {'i': 'world', 'j': {'a': 7, 'b': 22}} end from range(6) tbl(i);
select i, case when i%2=0 then {'i': [1,2,3]} else {'i': [7,8]} end from range(6) tbl(i);
select i, case when i%2=0 then {'i': [1,2,3]} else null end from range(6) tbl(i);
select i, case when i%2=0 then {'i': [1,2,3]} else {'i': null} end from range(6) tbl(i);
select i, case when i%2=0 then {'i': [1,2,3]} else {'i': ['hello']} end from range(6) tbl(i);
select col['hello'] from tbl;
select col.hello from tbl;
select `col`.`hello` from tbl;
select ({'i': null, 'j': null})['i'];
select {'x': 1} < {'x': 2};
select {'x': 1} < {'x': 1};
select null < {'x': 1};
select {'x': 1} < null;
select {'x': 1} <= {'x': 2};
select {'x': 1} <= {'x': 1};
select null <= {'x': 1};
select {'x': 1} <= null;
select {'x': 1} = {'x': 2};
select {'x': 1} = {'x': 1};
select null = {'x': 1};
select {'x': 1} = null;
select {'x': 1} <> {'x': 2};
select {'x': 1} <> {'x': 1};
select {'x': 1} <> null;
select null <>{'x': 1};
select {'x': 1} >= {'x': 2};
select {'x': 1} >= {'x': 1};
select null >= {'x': 1};
select {'x': 1} >= null;
select {'x': 1} > {'x': 2};
select {'x': 1} > {'x': 1};
select null > {'x': 1};
select {'x': 1} > null;
select l < r from struct_int;
select l <= r from struct_int;
select l = r from struct_int;
select l <> r from struct_int;
select l >= r from struct_int;
select l > r from struct_int;
select {'x': 'duck'} < {'x': 'goose'};
select {'x': 'duck'} < {'x': 'duck'};
select null < {'x': 'duck'};
select {'x': 'duck'} < null;
select {'x': 'duck'} <= {'x': 'goose'};
select {'x': 'duck'} <= {'x': 'duck'};
select null <= {'x': 'duck'};
select {'x': 'duck'} <= null;
select {'x': 'duck'} = {'x': 'goose'};
select {'x': 'duck'} = {'x': 'duck'};
select null = {'x': 'duck'};
select {'x': 'duck'} = null;
select {'x': 'duck'} <> {'x': 'goose'};
select {'x': 'duck'} <> {'x': 'duck'};
select null <> {'x': 'duck'};
select {'x': 'duck'} <> null;
select {'x': 'duck'} >= {'x': 'goose'};
select {'x': 'duck'} >= {'x': 'duck'};
select null >= {'x': 'duck'};
select {'x': 'duck'} >= null;
select {'x': 'duck'} > {'x': 'goose'};
select {'x': 'duck'} > {'x': 'duck'};
select null > {'x': 'duck'};
select {'x': 'duck'} > null;
select l < r from struct_str;
select l <= r from struct_str;
select l = r from struct_str;
select l <> r from struct_str;
select l >= r from struct_str;
select l > r from struct_str;
select {'x': 'duck', 'y': 1} < {'x': 'goose', 'y': 2};
select {'x': 'duck', 'y': 1} < {'x': 'duck', 'y': 1};
select {'x': 'duck', 'y': 1} < {'x': 'duck', 'y': 2};
select null < {'x': 'duck', 'y': 1};
select {'x': 'duck', 'y': 1} < null;
select {'x': 'duck', 'y': 1} <= {'x': 'goose', 'y': 2};
select {'x': 'duck', 'y': 1} <= {'x': 'duck', 'y': 1};
select {'x': 'duck', 'y': 1} <= {'x': 'duck', 'y': 2};
select null <= {'x': 'duck', 'y': 1};
select {'x': 'duck', 'y': 1} <= null;
select {'x': 'duck', 'y': 1} = {'x': 'goose', 'y': 2};
select {'x': 'duck', 'y': 1} = {'x': 'duck', 'y': 1};
select null = {'x': 'duck', 'y': 1};
select {'x': 'duck', 'y': 1} = null;
select {'x': 'duck', 'y': 1} <> {'x': 'goose', 'y': 2};
select {'x': 'duck', 'y': 1} <> {'x': 'duck', 'y': 1};
select null <> {'x': 'duck', 'y': 1};
select {'x': 'duck', 'y': 1} <> null;
select {'x': 'duck', 'y': 1} >= {'x': 'goose', 'y': 2};
select {'x': 'duck', 'y': 1} >= {'x': 'duck', 'y': 1};
select null >= {'x': 'duck', 'y': 1};
select {'x': 'duck', 'y': 1} >= null;
select {'x': 'duck', 'y': 1} > {'x': 'goose', 'y': 2};
select {'x': 'duck', 'y': 1} > {'x': 'duck', 'y': 1};
select {'x': 'duck', 'y': 2} > {'x': 'duck', 'y': 1};
select null > {'x': 'duck', 'y': 1};
select {'x': 'duck', 'y': 1} > null;
select l < r from struct_str_int;
select l <= r from struct_str_int;
select l = r from struct_str_int;
select l <> r from struct_str_int;
select l >= r from struct_str_int;
select l > r from struct_str_int;
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} < {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} < {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select null < {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} < null;
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <= {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <= {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select null <= {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <= null;
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} = {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} = {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select null = {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} = null;
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <> {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <> {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select null <> {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <> null;
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} >= {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} >= {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select null >= {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} >= null;
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} > {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} > {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select null > {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
select {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} > null;
select l < r from struct_nested;
select l <= r from struct_nested;
select l = r from struct_nested;
select l <> r from struct_nested;
select l >= r from struct_nested;
select l > r from struct_nested;
select {'x': 1, 'y': ['duck', 'somateria']} < {'x': 2, 'y': ['goose']};
select {'x': 1, 'y': ['duck', 'somateria']} < {'x': 1, 'y': ['duck', 'somateria']};
select null < {'x': 1, 'y': ['duck', 'somateria']};
select {'x': 1, 'y': ['duck', 'somateria']} < null;
select {'x': 1, 'y': ['duck', 'somateria']} <= {'x': 2, 'y': ['goose']};
select {'x': 1, 'y': ['duck', 'somateria']} <= {'x': 1, 'y': ['duck', 'somateria']};
select null <= {'x': 1, 'y': ['duck', 'somateria']};
select {'x': 1, 'y': ['duck', 'somateria']} <= null;
select {'x': 1, 'y': ['duck', 'somateria']} = {'x': 2, 'y': ['goose']};
select {'x': 1, 'y': ['duck', 'somateria']} = {'x': 1, 'y': ['duck', 'somateria']};
select null = {'x': 1, 'y': ['duck', 'somateria']};
select {'x': 1, 'y': ['duck', 'somateria']} = null;
select {'x': 1, 'y': ['duck', 'somateria']} <> {'x': 2, 'y': ['goose']};
select {'x': 1, 'y': ['duck', 'somateria']} <> {'x': 1, 'y': ['duck', 'somateria']};
select null <> {'x': 1, 'y': ['duck', 'somateria']};
select {'x': 1, 'y': ['duck', 'somateria']} <> null;
select {'x': 1, 'y': ['duck', 'somateria']} >= {'x': 2, 'y': ['goose']};
select {'x': 1, 'y': ['duck', 'somateria']} >= {'x': 1, 'y': ['duck', 'somateria']};
select null >= {'x': 1, 'y': ['duck', 'somateria']};
select {'x': 1, 'y': ['duck', 'somateria']} >= null;
select {'x': 1, 'y': ['duck', 'somateria']} > {'x': 2, 'y': ['goose']};
select {'x': 1, 'y': ['duck', 'somateria']} > {'x': 1, 'y': ['duck', 'somateria']};
select null > {'x': 1, 'y': ['duck', 'somateria']};
select {'x': 1, 'y': ['duck', 'somateria']} > null;
select l < r from list_in_struct;
select l <= r from list_in_struct;
select l = r from list_in_struct;
select l <> r from list_in_struct;
select l >= r from list_in_struct;
select l > r from list_in_struct;
select {'x': a, 'y': a+1, 'z': a+2}<{'x': 1, 'y': 2, 'z': 3} from range(5) tbl(a);
select {'x': a, 'y': a+1, 'z': a+2}<={'x': 1, 'y': 2, 'z': 3} from range(5) tbl(a);
select {'x': a, 'y': a+1, 'z': a+2}={'x': 1, 'y': 2, 'z': 3} from range(5) tbl(a);
select {'x': a, 'y': a+1, 'z': a+2}<>{'x': 1, 'y': 2, 'z': 3} from range(5) tbl(a);
select {'x': a, 'y': a+1, 'z': a+2}>={'x': 1, 'y': 2, 'z': 3} from range(5) tbl(a);
select {'x': a, 'y': a+1, 'z': a+2}>{'x': 1, 'y': 2, 'z': 3} from range(5) tbl(a);
select * from v1 v, v1 w where v.a <> w.a or v.a > w.a order by v.a, w.a;
select * from a where id=5;
select * from a where id=1 order by c['i']['a'];
select * from a left join b on a.id<>b.id;
select * from a right join b on a.id<>b.id;
select * from a left join b on a.id>b.id;
select * from a right join b on a.id>b.id;
select (select b from a);
select stats({'i': 3, 'j': 4});
select stats({'i': i, 'j': j}) from integers;
select stats(s['i']) from structs;
select (select tbl.a['i'] + tbl.b['j'] from (values ({'i': 1, 'j': 2})) tbl(b)) from (values ({'i': 1, 'j': 2})) tbl(a);
select (select tbl2.a['i'] + tbl.b['j'] from (values ({'i': 1, 'j': 2})) tbl(b)) from (values ({'i': 1, 'j': 2})) tbl2(a);
select * from a order by (b).i;
select * from a order by (b).i, (b).j;
select * from test_all_types();
select i from null_list;
select i::smallint[] from null_list;
select i::integer[] from null_list;
select i::bigint[] from null_list;
select i::hugeint[] from null_list;
select i::float[] from null_list;
select i::double[] from null_list;
select i from null_struct;
select i::struct(n smallint) from null_struct;
select i::struct(n integer) from null_struct;
select i::struct(n bigint) from null_struct;
select i::struct(n hugeint) from null_struct;
select i::struct(n float) from null_struct;
select i::struct(n double) from null_struct;
select * from times;
select cast(i as varchar) from times;
select count(*) from times inner join timestamp on (timestamp.i::time = times.i);
select time '23:59:59.999999';
select time '23:59:59.999999' + interval (1) microsecond;
select time '23:59:59.999999' + interval (1) second;
select time '23:59:59.999999' + interval (1) minute;
select time '23:59:59.999999' + interval (1) hour;
select time '23:59:59.999999' + interval (1) day;
select time '23:59:59.999999' + interval (1) month;
select time '23:59:59.999999' + interval (1) year;
select '14:42:04'::time::varchar;
select '14:42:04.35'::time::varchar;
select '14:42:04.999999'::time::varchar;
select '14:42:04.999999999'::time::varchar;
select '14:42:04.000000'::time::varchar;
select '14:42:04.500'::time::varchar;
select try_cast('' as time);
select try_cast(' ' as time);
select try_cast('11' as time);
select try_cast('11:' as time);
select try_cast('11:11' as time);
select try_cast('11:11:' as time);
select try_cast('11:11:a' as time);
select try_cast('11:11:a1' as time);
select try_cast('11/11/11' as time);
select try_cast(' 11:11:11 ' as time);
select try_cast('24:00:00' as time);
select try_cast('23:60:00' as time);
select try_cast('23:59:60' as time);
select try_cast('23:59:59' as time);
select try_cast('23:59:59.999999' as time);
select date '1992-01-01'::timestamp_ms;
select date '1992-01-01'::timestamp_s;
select date '1992-01-01'::timestamp_ns;
select '1969-01-01 01:03:20.45432'::timestamp::varchar;
select '-1000-01-01 01:03:20.45432'::timestamp::varchar;
select '1000-01-01 (bc) 01:03:20.45432'::timestamp::varchar;
select '${str}'::date, '-${str}'::date;
select * from specials;
select lhs.ts, rhs.ts, lhs.ts < rhs.ts, lhs.ts <= rhs.ts, lhs.ts = rhs.ts, lhs.ts <> rhs.ts, lhs.ts >= rhs.ts, lhs.ts > rhs.ts, from specials lhs, specials rhs order by 1, 2;
select lhs.tstz, rhs.tstz, lhs.tstz < rhs.tstz, lhs.tstz <= rhs.tstz, lhs.tstz = rhs.tstz, lhs.tstz <> rhs.tstz, lhs.tstz >= rhs.tstz, lhs.tstz > rhs.tstz, from specials lhs, specials rhs order by 1, 2;
select lhs.dt, rhs.dt, lhs.dt < rhs.dt, lhs.dt <= rhs.dt, lhs.dt = rhs.dt, lhs.dt <> rhs.dt, lhs.dt >= rhs.dt, lhs.dt > rhs.dt, from specials lhs, specials rhs order by 1, 2;
select min(ts), max(ts), min(tstz), max(tstz), min(dt), max(dt) from specials;
select median(ts), median(tstz), median(dt) from specials;
select mode(ts), mode(tstz), mode(dt) from specials;
select approx_count_distinct(ts), approx_count_distinct(tstz), approx_count_distinct(dt) from specials;
select arbitrary(ts), first(ts), last(ts) from specials;
select arbitrary(tstz), first(tstz), last(tstz) from specials;
select arbitrary(dt), first(dt), last(dt) from specials;
select arg_min(tstz, tstz), arg_max(tstz, tstz) from specials;
select histogram(ts), histogram(tstz), histogram(dt) from specials;
select quantile_disc(ts, 0.34), quantile_disc(tstz, 0.34), quantile_disc(dt, 0.34) from specials;
select quantile_disc(ts, [0.0, 0.5, 1.0]), quantile_disc(tstz, [0.0, 0.5, 1.0]), quantile_disc(dt, [0.0, 0.5, 1.0]) from specials;
select quantile_cont(ts, 0.25), quantile_cont(tstz, 0.25), quantile_cont(dt, 0.25) from specials;
select quantile_cont(ts, [0.25, 0.5, 0.75]), quantile_cont(tstz, [0.25, 0.5, 0.75]), quantile_cont(dt, [0.25, 0.5, 0.75]) from specials;
select mad(ts), mad(tstz), mad(dt) from specials;
select entropy(ts), entropy(tstz), entropy(dt) from specials;
select 'infinity'::date + interval (1) year;
select 'infinity'::date + interval (1) quarter;
select 'infinity'::date + interval (1) month;
select 'infinity'::date + interval (1) day;
select 'infinity'::date + interval (1) week;
select '-infinity'::date + interval (1) year;
select '-infinity'::date + interval (1) quarter;
select '-infinity'::date + interval (1) month;
select '-infinity'::date + interval (1) day;
select '-infinity'::date + interval (1) week;
select 'infinity'::date - interval (1) year;
select 'infinity'::date - interval (1) quarter;
select 'infinity'::date - interval (1) month;
select 'infinity'::date - interval (1) day;
select 'infinity'::date - interval (1) week;
select '-infinity'::date - interval (1) year;
select '-infinity'::date - interval (1) quarter;
select '-infinity'::date - interval (1) month;
select '-infinity'::date - interval (1) day;
select '-infinity'::date - interval (1) week;
select dt + 1, dt - 1 from specials;
select dt + '12:34:56'::time from specials;
select isfinite(ts), isfinite(tstz), isfinite(dt) from specials;
select isinf(ts), isinf(tstz), isinf(dt) from specials;
select ts::varchar, tstz::varchar, dt::varchar from specials;
select timestamp '2017-07-23 13:10:11';
select timestamp '2017-07-23t13:10:11', timestamp '2017-07-23t13:10:11z';
select timestamp ' 2017-07-23 13:10:11 ';
select t from timestamp order by t;
select min(t) from timestamp;
select max(t) from timestamp;
select t-t from timestamp;
select year(timestamp '1992-01-01 01:01:01');
select year(timestamp '1992-01-01 01:01:01'::date);
select (timestamp '1992-01-01 01:01:01')::date;
select (timestamp '1992-01-01 01:01:01')::time;
select t::date from timestamp where extract(year from t)=2007 order by 1;
select t::time from timestamp where extract(year from t)=2007 order by 1;
select (date '1992-01-01')::timestamp;
select timestamp '2008-01-01 00:00:01.5'::varchar;
select timestamp '-8-01-01 00:00:01.5'::varchar;
select timestamp '100000-01-01 00:00:01.5'::varchar;
select count(*) from timestamp2 inner join timestamp1 on (timestamp1.i = timestamp2.i);
select cast('2001-04-20 14:42:11.123' as timestamp) a, cast('2001-04-20 14:42:11.0' as timestamp) b;
select timestamp '2001-04-20 14:42:11.12300000000000000000';
select * from timestamp;
select year(sec),year(milli),year(nano) from timestamp;
select nano::timestamp, milli::timestamp,sec::timestamp from timestamp;
select micro::timestamp_s, micro::timestamp_ms,micro::timestamp_ns from timestamp;
select sec from timestamp order by sec;
select milli from timestamp order by milli;
select nano from timestamp order by nano;
select count(*), nano from timestamp group by nano order by nano;
select count(*), sec from timestamp group by sec order by sec;
select count(*), milli from timestamp group by milli order by milli;
select timestamp.sec from timestamp inner join timestamp_two on (timestamp.sec = timestamp_two.sec);
select timestamp.milli from timestamp inner join timestamp_two on (timestamp.milli = timestamp_two.milli);
select timestamp.nano from timestamp inner join timestamp_two on (timestamp.nano = timestamp_two.nano);
select '2008-01-01 00:00:11'::timestamp_us = '2008-01-01 00:00:11'::timestamp_ms;
select '2008-01-01 00:00:11'::timestamp_us = '2008-01-01 00:00:11'::timestamp_ns;
select '2008-01-01 00:00:11'::timestamp_us = '2008-01-01 00:00:11'::timestamp_s;
select '2008-01-01 00:00:11.1'::timestamp_us = '2008-01-01 00:00:11'::timestamp_ms;
select '2008-01-01 00:00:11.1'::timestamp_us = '2008-01-01 00:00:11'::timestamp_ns;
select '2008-01-01 00:00:11.1'::timestamp_us = '2008-01-01 00:00:11.1'::timestamp_s;
select timestamp '1970-01-01';
select '290309-12-22 (bc) 00:00:00'::timestamp;
select '290309-12-22 (bc) 00:00:00'::timestamp + interval (1) day;
select timestamp '294247-01-10 04:00:54.775806';
select year(timestamp '294247-01-10 04:00:54.775806'), year(timestamp '290309-12-22 (bc) 00:00:00');
select monthname(timestamp '294247-01-10 04:00:54.775806'), monthname(timestamp '290309-12-22 (bc) 00:00:00');
select age(timestamp '294247-01-10 04:00:54.775806', '290309-12-22 (bc) 00:00:00'::timestamp);
select try_cast('' as timestamp);
select try_cast(' ' as timestamp);
select try_cast('1111' as timestamp);
select try_cast(' 1111 ' as timestamp);
select try_cast('1111-' as timestamp);
select try_cast('1111-11' as timestamp);
select try_cast('1111-11-' as timestamp);
select try_cast('1111-111-1' as timestamp);
select try_cast('1111-11-111' as timestamp);
select try_cast('1111-11-11 11' as timestamp);
select try_cast('1111-11-11 11:11' as timestamp);
select try_cast('1111-11-11 11:11:999' as timestamp);
select try_cast('1111-11-11 11:11:11.aaa' as timestamp);
select try_cast('1111-11-11 11x11a11' as timestamp);
select try_cast('1111-11-11 11:11:11' as timestamp);
select try_cast('290309-12-21 (bc) 12:59:59.999999' as timestamp);
select try_cast('294247-01-10 04:00:54.775807' as timestamp);
select try_cast('290309-12-22 (bc) 00:00:00' as timestamp);
select try_cast('294247-01-10 04:00:54.775806' as timestamp);
select try_cast('infinity' as timestamp);
select try_cast('-infinity' as timestamp);
select timestamp '2020-12-31 21:25:58.745232';
select timestamp '2020-12-31 21:25:58.745232+00';
select timestamp '2020-12-31 21:25:58.745232+0000';
select timestamp '2020-12-31 21:25:58.745232+02';
select timestamp '2020-12-31 21:25:58.745232-02';
select timestamp '2020-12-31 21:25:58.745232+0215';
select timestamp '2020-12-31 21:25:58.745232+02:15';
select timestamp '2020-12-31 21:25:58.745232-0215';
select timestamp '2020-12-31 21:25:58+02:15';
select * from unsigned;
select (20)::utinyint + (200)::usmallint;
select (20)::ubigint + (200)::ubigint;
select (200)::utinyint * (200)::usmallint;
select (200)::ubigint * (200)::ubigint;
select (200)::utinyint - (20)::usmallint;
select 100::utinyint / 20::utinyint, 90::utinyint / 20::utinyint;
select 100::utinyint / 20::ubigint, 90::utinyint / 20::ubigint;
select 100::utinyint / 0::utinyint;
select 100::utinyint % 20::utinyint, 90::utinyint % 20::utinyint;
select 100::utinyint % 0::utinyint;
select 200::utinyint + 0.5;
select cos(100::utinyint);
select concat('hello number ', 100::utinyint);
select 100000000::integer + 100::usmallint;
select 100::usmallint + 0.5;
select cos(100::usmallint);
select concat('hello number ', 100::usmallint);
select 100000000::integer + 100::uinteger;
select 100::uinteger + 0.5;
select cos(100::uinteger);
select concat('hello number ', 100::uinteger);
select 100000000::integer + 100::ubigint;
select 100::ubigint + 0.5;
select cos(100::ubigint);
select concat('hello number ', 100::ubigint);
select '255'::utinyint;
select '255'::usmallint;
select '65535'::uinteger;
select '4294967295'::ubigint;
select '18446744073709551615'::ubigint;
select (100::utinyint)::decimal(3,0);
select 100::utinyint * 100::decimal(3,0);
select (100::usmallint)::decimal(3,0);
select 100::usmallint * 100::decimal(3,0);
select (100::uinteger)::decimal(3,0);
select 100::uinteger * 100::decimal(3,0);
select (100::ubigint)::decimal(3,0);
select 100::ubigint * 100::decimal(3,0);
select '7'::utinyint, '130'::utinyint, '255'::utinyint;
select '7'::usmallint, '130'::usmallint, '65535'::usmallint;
select '7'::uinteger, '130'::uinteger, '4294967295'::uinteger;
select '7'::ubigint, '130'::ubigint, '18446744073709551615'::ubigint;
select '0'::utinyint, '-0'::utinyint;
select 42::tinyint::utinyint, 42::smallint::utinyint, 42::integer::utinyint, 42::bigint::utinyint, 42::float::utinyint, 42::double::utinyint;
select 42::tinyint::usmallint, 42::smallint::usmallint, 42::integer::usmallint, 42::bigint::usmallint, 42::float::usmallint, 42::double::usmallint;
select 42::tinyint::uinteger, 42::smallint::uinteger, 42::integer::uinteger, 42::bigint::uinteger, 42::float::uinteger, 42::double::uinteger;
select 42::tinyint::ubigint, 42::smallint::ubigint, 42::integer::ubigint, 42::bigint::ubigint, 42::float::ubigint, 42::double::ubigint;
select (9223372036854775807)::bigint::ubigint;
select (9223372036854775808)::hugeint::ubigint;
select -42::tinyint::utinyint;
select -42::tinyint::usmallint;
select -42::tinyint::uinteger;
select -42::tinyint::ubigint;
select -42::smallint::utinyint;
select -42::smallint::usmallint;
select -42::smallint::uinteger;
select -42::smallint::ubigint;
select -42::integer::utinyint;
select -42::integer::usmallint;
select -42::integer::uinteger;
select -42::integer::ubigint;
select -42::bigint::utinyint;
select -42::bigint::usmallint;
select -42::bigint::uinteger;
select -42::bigint::ubigint;
select -42::float::utinyint;
select -42::float::usmallint;
select -42::float::uinteger;
select -42::float::ubigint;
select -42::double::utinyint;
select -42::double::usmallint;
select -42::double::uinteger;
select -42::double::ubigint;
select (10)::utinyint::tinyint;
select (10)::utinyint::smallint;
select (10)::utinyint::integer;
select (10)::utinyint::bigint;
select (10)::usmallint::tinyint;
select (10)::usmallint::smallint;
select (10)::usmallint::integer;
select (10)::usmallint::bigint;
select (10)::uinteger::tinyint;
select (10)::uinteger::smallint;
select (10)::uinteger::integer;
select (10)::uinteger::bigint;
select (10)::ubigint::tinyint;
select (10)::ubigint::smallint;
select (10)::ubigint::integer;
select (10)::ubigint::bigint;
select (200.32)::decimal::utinyint;
select (200.32)::decimal::usmallint;
select (65535.32)::decimal::usmallint;
select (200.32)::decimal::uinteger;
select (4294967295.32)::decimal::uinteger;
select (200.32)::decimal::ubigint;
select (200.32)::real::utinyint;
select (200.32)::real::usmallint;
select (65534.32)::real::usmallint;
select (200.32)::real::uinteger;
select (4294967296.32)::real::ubigint;
select []::uint16[];
select []::uint32[];
select []::uint64[];
select 'a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11';
select 'a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11'::uuid;
select 'a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11'::uuid::varchar;
select 'a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11'::uuid::varchar::uuid;
select 'a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11'::uuid::varchar::uuid::varchar;
select u from uuid order by u;
select u from uuid order by u::varchar;
select min(u) from uuid;
select max(u) from uuid;
select u from uuid where u='8fffffff-ffff-ffff-ffff-ffffffffffff';
select u from uuid where u<>'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11' order by u;
select u from uuid where u>='80000000-0000-0000-0000-000000000000' order by u;
select u from uuid where u<'80000000-0000-0000-0000-000000000000' order by u;
select u, count(1) from uuid where u<'80000000-0000-0000-0000-000000000000' group by u order by u;
select * from test order by id;
select length(a) from test;
select sum(i) from t1;
select sum(i) from t2;
select count(*) from t1, t2 where t1.i<33;
select count(*) from t1, t2 where t2.i<33;
select * from test where a=3;
select * from test where a=1;
select * from src;
select * from docs;
select count(*) from test where a is null;
select sum(a) from test;
select * from test where a=4;
select * from test where a=5;
select stats(j) from test limit 1;
select depname, empno, salary, sum(salary) over (partition by depname order by empno) from empsalary order by depname, empno;
select sum(salary) over (partition by depname order by salary) ss from empsalary order by depname, ss;
select row_number() over (partition by depname order by salary) rn from empsalary order by depname, rn;
select empno, first_value(empno) over (partition by depname order by empno) fv from empsalary order by 2 desc, 1 asc;
select depname, empno, last_value(empno) over ( partition by depname order by empno asc rows between current row and unbounded following ) fv from empsalary order by 1, 2;
select depname, salary, dense_rank() over (partition by depname order by salary) from empsalary order by depname, salary;
select depname, salary, rank() over (partition by depname order by salary) from empsalary order by depname, salary;
select depname, min(salary) over (partition by depname order by salary, empno) m1, max(salary) over (partition by depname order by salary, empno) m2, avg(salary) over (partition by depname order by salary, empno) m3 from empsalary order by depname, empno;
select depname, stddev_pop(salary) over (partition by depname order by salary, empno) s from empsalary order by depname, empno;
select depname, covar_pop(salary, empno) over (partition by depname order by salary, empno) c from empsalary order by depname, empno;
select sum(unique1) over (order by unique1 rows between 2 preceding and 2 following) su from tenk1 order by unique1;
select sum(unique1) over (order by unique1 rows between 2 preceding and 1 preceding) su from tenk1 order by unique1;
select sum(unique1) over (order by unique1 rows between 1 following and 3 following) su from tenk1 order by unique1;
select sum(unique1) over (order by unique1 rows between unbounded preceding and 1 following) su from tenk1 order by unique1;
select permno, sum(log(ret+1)) over (partition by permno order by date rows between 12 preceding and 2 preceding), ret from issue1472 order by permno, date;
select * from ( select lag(i, -1) over () as negative, lead(i, 1) over () as positive from generate_series(0, 10, 1) tbl(i) ) w where negative <> positive;
select depname, sum(sum(salary)) over (partition by depname order by salary) from empsalary group by depname, salary order by depname, salary;
select empno, sum(salary*2) over (partition by depname order by empno) from empsalary order by depname, empno;
select empno, 2*sum(salary) over (partition by depname order by empno) from empsalary order by depname, empno;
select depname, sum(salary)*100.0000/sum(sum(salary)) over (partition by depname order by salary) as revenueratio from empsalary group by depname, salary order by depname, revenueratio;
select id, user_id, order_id, last_value (order_id ignore nulls) over ( partition by user_id order by id rows between unbounded preceding and 1 preceding ) as last_order_id from issue2549;
select id, user_id, order_id, first_value (order_id ignore nulls) over ( partition by user_id order by id rows between 1 preceding and unbounded following ) as last_order_id from issue2549;
select id, user_id, order_id, nth_value (order_id, 2 ignore nulls) over ( partition by user_id order by id rows between unbounded preceding and 1 preceding ) as last_order_id from issue2549;
select id, user_id, order_id, lead(order_id, 1, -1 ignore nulls) over ( partition by user_id order by id ) as last_order_id from issue2549;
select id, user_id, order_id, lag(order_id, 1, -1 ignore nulls) over ( partition by user_id order by id ) as last_order_id from issue2549;
select id, user_id, order_id, lag(order_id, 0, -1 ignore nulls) over ( partition by user_id order by id ) as last_order_id from issue2549;
select id, user_id, order_id, last_value (order_id respect nulls) over ( partition by user_id order by id rows between unbounded preceding and 1 preceding ) as last_order_id from issue2549;
select id, user_id, order_id, first_value (order_id respect nulls) over ( partition by user_id order by id rows between unbounded preceding and 1 preceding ) as last_order_id from issue2549;
select id, user_id, order_id, nth_value (order_id, 2 respect nulls) over ( partition by user_id order by id rows between unbounded preceding and 1 preceding ) as last_order_id from issue2549;
select id, user_id, order_id, lead(order_id, 1, -1 respect nulls) over ( partition by user_id order by id ) as last_order_id from issue2549;
select id, user_id, order_id, lag(order_id, 1, -1 respect nulls) over ( partition by user_id order by id ) as last_order_id from issue2549;
select id, user_id, order_id, lag(order_id, 0, -1 respect nulls) over ( partition by user_id order by id ) as last_order_id from issue2549;
select * from list_window order by g;
select first(list_extract(l, 1)) from list_window group by g order by g;
select first(list_extract(l, 2)) from list_window group by g order by g;
select first(list_extract(l, 3)) from list_window group by g order by g;
select r % 2 as p, r, r/3.0, mad(r/3.0) over (partition by r % 2 order by r) from mads order by 1, 2;
select r, r/3.0, mad(r/3.0) over (order by r rows between 1 preceding and 1 following) from mads order by 1, 2;
select r, r/3.0, mad(r/3.0) over (order by r rows between 1 preceding and 3 following) from mads order by 1, 2;
select r % 3 as p, r, n, mad(n) over (partition by r % 3 order by r) from (select r, case r % 2 when 0 then r else null end as n from mads) nulls order by 1;
select r, n, mad(n) over (order by r rows between 1 preceding and 1 following) from (select r, case r % 2 when 0 then r else null end as n from mads) nulls order by 1;
select r, n, mad(n) over (order by r rows between 1 preceding and 3 following) from (select r, case r % 2 when 0 then r else null end as n from mads) nulls order by 1;
select r, n, mad(n) over (order by r rows between unbounded preceding and unbounded following) from (select r, case r % 2 when 0 then r else null end as n from mads) nulls order by 1;
select r, mad(r) over (order by r rows between 1 preceding and 1 following) from coverage order by 1;
select r % 2, r, r/3, mode(r/3) over (partition by r % 2 order by r) from modes order by 1, 2;
select r, r/3, mode(r/3) over (order by r rows between 1 preceding and 1 following) from modes order by 1, 2;
select r, r/3, mode(r/3) over (order by r rows between 1 preceding and 3 following) from modes order by 1, 2;
select r, r / 3, n, mode(n) over (partition by r % 3 order by r) from (select r, case r % 2 when 0 then r else null end as n from modes) nulls order by 1;
select r, n, mode(n) over (order by r rows between 1 preceding and 1 following) from (select r, case r % 2 when 0 then r else null end as n from modes) nulls order by 1;
select r, n, mode(n) over (order by r rows between 1 preceding and 3 following) from (select r, case r % 2 when 0 then r else null end as n from modes) nulls order by 1;
select r, n, mode(n) over (order by r rows between unbounded preceding and unbounded following) from (select r, case r % 2 when 0 then r else null end as n from modes) nulls order by 1;
with t(r) as (values (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (null), (null), (null)) select r, r/3, mode(r/3) over (order by r rows between 1 preceding and 1 following) from t order by 1, 2;
select four, ten, sum(ten) over (partition by four order by ten) st, last_value(ten) over (partition by four order by ten) lt from tenk1d order by four, ten;
select four, ten, sum(ten) over (partition by four order by ten range between unbounded preceding and current row) st, last_value(ten) over (partition by four order by ten range between unbounded preceding and current row) lt from tenk1d order by four, ten;
select four, ten, sum(ten) over (partition by four order by ten range between unbounded preceding and unbounded following) st, last_value(ten) over (partition by four order by ten range between unbounded preceding and unbounded following) lt from tenk1d order by four, ten;
select four, ten/4 as two, sum(ten/4) over (partition by four order by ten/4 range between unbounded preceding and current row) st, last_value(ten/4) over (partition by four order by ten/4 range between unbounded preceding and current row) lt from tenk1d order by four, ten/4;
select four, ten/4 as two, sum(ten/4) over w st, last_value(ten/4) over w lt from tenk1d window w as (partition by four order by ten/4 range between unbounded preceding and current row) order by four, ten/4;
select depname, empno, nth_value(empno, 2) over ( partition by depname order by empno asc rows between current row and unbounded following ) fv from empsalary order by 1, 2;
select depname, empno, nth_value(empno, null) over ( partition by depname order by empno asc rows between current row and unbounded following ) fv from empsalary order by 1, 2;
select depname, empno, nth_value(null, 2) over ( partition by depname order by empno asc rows between current row and unbounded following ) fv from empsalary order by 1, 2;
select depname, empno, nth_value(empno, case empno % 3 when 1 then 2 else null end) over ( partition by depname order by empno asc rows between current row and unbounded following ) fv from empsalary order by 1, 2;
select depname, empno, nth_value(empno, 2) over ( partition by depname order by empno asc rows between current row and unbounded following ) fv from empno_nulls order by 1, 2;
select depname, empno, 1 + empno %3 as offset, nth_value(empno, 1 + empno %3) over ( partition by depname order by empno asc rows between current row and unbounded following ) fv from empsalary order by 1, 2;
select depname, empno, nth_value(-1, 2) over ( partition by depname order by empno asc rows between current row and unbounded following ) fv from empsalary order by 1, 2;
select teamname, player, score, ntile(2) over (partition by teamname order by score asc) as ntile from scoreboard s order by teamname, score;
select teamname, player, score, ntile(2) over (order by score asc) as ntile from scoreboard s order by score;
select teamname, player, score, ntile(1000) over (partition by teamname order by score asc) as ntile from scoreboard s order by teamname, score;
select teamname, player, score, ntile(1) over (partition by teamname order by score asc) as ntile from scoreboard s order by teamname, score;
select teamname, player, score, ntile(null) over (partition by teamname order by score asc) as ntile from scoreboard s order by teamname, score;
select r % 2, r, median(r) over (partition by r % 2 order by r) from quantiles order by 1, 2;
select r, median(r) over (order by r rows between 1 preceding and 1 following) from quantiles order by 1, 2;
select r, median(r) over (order by r rows between 1 preceding and 3 following) from quantiles order by 1, 2;
select r, quantile(r, 0.5) over (order by r rows between 1 preceding and 3 following) from quantiles order by 1, 2;
select r % 2, r, median(r::varchar) over (partition by r % 2 order by r) from quantiles order by 1, 2;
select r, median(r::varchar) over (order by r rows between 1 preceding and 1 following) from quantiles order by 1, 2;
select r, quantile(r::varchar, 0.5) over (order by r rows between 1 preceding and 3 following) from quantiles order by 1, 2;
select r, median('prefix-' || r::varchar || '-suffix') over (order by r rows between 1 preceding and 1 following) from quantiles order by 1, 2;
select r % 3, r, n, median(n) over (partition by r % 3 order by r) from (select r, case r % 2 when 0 then r else null end as n from quantiles) nulls order by 1, 2;
select r, n, median(n) over (order by r rows between 1 preceding and 1 following) from (select r, case r % 2 when 0 then r else null end as n from quantiles) nulls order by 1;
select r, n, median(n) over (order by r rows between 1 preceding and 3 following) from (select r, case r % 2 when 0 then r else null end as n from quantiles) nulls order by 1;
select r, n, median(n) over (order by r rows between unbounded preceding and unbounded following) from (select r, case r % 2 when 0 then r else null end as n from quantiles) nulls order by 1;
with t(i, p, f) as (values (0, 1, 1), (1, 1, 1), (2, 1, 1), (3, 3, 1), (4, 1, 1), (5, 3, 1) ) select i, median(i) over (order by i rows between p preceding and f following) from t order by 1;
with t(r, i, p, f) as (values (0, 0, 1, 1), (1, 1, 1, 1), (2, 2, 1, 1), (3, 0, 1, 1), (4, 1, 1, 1), (5, 2, 1, 1) ) select r, median(i) over (order by r rows between p preceding and f following) from t order by 1;
with t(r, i, p, f) as (values (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2) ) select r, quantile_disc(i, [0.25, 0.5, 0.75]) over (order by r rows between p preceding and f following) from t order by 1;
with t(r, i, p, f) as (values (0, null, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2) ) select r, quantile_disc(i, [0.25, 0.5, 0.75]) over (order by r rows between p preceding and f following) from t order by 1;
with t(r, i, p, f) as (values (0, null, 1, 2), (1, null, 1, 2), (2, null, 1, 2), (3, null, 1, 2), (4, null, 1, 2), (5, null, 1, 2) ) select r, quantile_disc(i, [0.25, 0.5, 0.75]) over (order by r rows between p preceding and f following) from t order by 1;
with t(r, i, p, f) as (values (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2) ) select r, quantile_cont(i, [0.25, 0.5, 0.75]) over (order by r rows between p preceding and f following) from t order by 1;
with t(r, i, p, f) as (values (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 0, 1, 2), (4, 1, 1, 2), (5, 2, 1, 2) ) select r, quantile_cont(i, [0.25, 0.5, 0.75]) over (order by r rows between p preceding and f following) from t order by 1;
select r, quantile_disc(i, 0.5) over (order by r rows between 1 preceding and 1 following) q from (values (0, 0), (1, 1), (2, 2), (3, 0), (4, 1) ) tbl(r, i) order by 1, 2;
select r, quantile_cont(i, 0.5) over (order by r rows between 2 preceding and 1 following) q from (values (0, 0), (1, 1), (2, 2), (3, 3), (4, 0), (5, 1) ) tbl(r, i) order by 1, 2;
select r, quantile_cont(i, 0.5) over (order by r rows between 2 preceding and 1 following) q from (values (0, null), (1, 1), (2, 2), (3, 3), (4, null), (5, 1) ) tbl(r, i) order by 1, 2;
with t(r, i, p, f) as (values (0, 0, 1, 1), (1, 1, 1, 1), (2, 2, 1, 1), (3, 0, 1, 1), (4, 1, 1, 1), (5, 2, 1, 1) ) select r, quantile_disc(i, 0.5) over (order by r rows between p preceding and f following) from t order by 1;
select row_number() over ();
select avg(42) over ();
select row_number() over (), i, j from integers;
select rank() over (), i, j from integers;
select dense_rank() over (), i, j from integers;
select percent_rank() over (), i, j from integers;
select i, j, first_value(i) over (), first_value(j) over () from integers;
select row_number() over (), first_value(i) over (), first_value(j) over () from integers;
select row_number() over (), row_number() over () from integers;
select id as sparse_id, row_number() over () as rnum from vertices_view;
with recursive rte as ( select 1 l, 1::bigint r union all select l+1, row_number() over() from rte where l < 3 ) select * from rte;
select item, rank() over (order by return_ratio) as return_rank, rank() over (order by currency_ratio) as currency_rank from wintest order by item;
select min(i) over (partition by i order by i) from integers;
select i, lag(i) over named_window from (values (1), (2), (3)) as t (i) window named_window as (order by i);
with subquery as (select i, lag(i) over named_window from (values (1), (2), (3)) as t (i) window named_window as (order by i)) select * from subquery;
select * from (select i, lag(i) over named_window from (values (1), (2), (3)) as t (i) window named_window as (order by i)) t1;
select * from (select i, lag(i) over named_window from ( values (1), (2), (3)) as t (i) window named_window as ( order by i)) t1, (select i, lag(i) over named_window from ( values (1), (2), (3)) as t (i) window named_window as ( order by i)) t2 order by 1, 2, 3, 4;
select j, i, sum(i) over () from a order by 1,2;
select j, i, sum(i) over (partition by j) from a order by 1,2;
select j, i, sum(i) over (partition by j order by i) from a order by 1,2;
select j, i, bool_and(i) over (), bool_or(i) over () from a order by 1,2;
select j, i, bool_and(i) over (partition by j), bool_or(i) over (partition by j) from a order by 1,2;
select j, i, bool_and(not i) over (partition by j order by i), bool_and(i) over (partition by j order by i), bool_or(i) over (partition by j order by i) from a order by 1,2;
select max(base), max(referenced), sum(refined), sum(unrefined) from ( select row_number() over w as base, row_number() over (w) as referenced, sum(i % 4) over (w rows between 1 preceding and 1 following) as refined, sum(i % 4) over (rows between 1 preceding and 1 following) as unrefined from integers window w as (partition by i / 4 order by i % 4) ) q;
select x, g from (select x, g, sum(x) over (partition by g order by x rows unbounded preceding) as zzz67 from (select x, g from dbplyr_052 order by x) dbplyr_053) dbplyr_054 where (zzz67 > 3.0);
select x, g from (select x, g, sum(x) over (partition by g order by x rows unbounded preceding) as zzz67 from (select x, g from dbplyr_052 order by w) dbplyr_053) dbplyr_054 where (zzz67 > 3.0);
select x, g from (select x, g, sum(x) over (partition by g order by x rows unbounded preceding) as zzz67 from (select * from dbplyr_052 order by x) dbplyr_053) dbplyr_054 where (zzz67 > 3.0);
select x ,y ,z ,avg(x) over (partition by y) as plain_window ,avg(x) filter (where x = 1) over (partition by y) as x_filtered_window ,avg(x) filter (where z = 0) over (partition by y) as z_filtered_window from testing order by y, x;
select x ,y ,z ,count(*) over (partition by y) as plain_window ,count(*) filter (where x = 1) over (partition by y) as x_filtered_window ,count(*) filter (where z = 0) over (partition by y) as z_filtered_window from testing order by y, x;
select x ,y ,z ,median(x) over (partition by y) as plain_window ,median(x) filter (where x = 1) over (partition by y) as x_filtered_window ,median(x) filter (where z = 0) over (partition by y) as z_filtered_window from testing order by y, x;
select x, count(x) filter (where x % 2 = 0) over (order by x rows between 2 preceding and 2 following) from generate_series(0,10) tbl(x);
select a, sum(b) over win from c1 window win as ( order by a range between 5 preceding and 5 following );
select a, sum(b) over win from c1 window win as ( order by a range between interval 5 days preceding and interval 5 days following );
select a, sum(b) over win from c1 window win as ( order by a range between interval 5 hours preceding and interval 5 hours following );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a range between 5 preceding and 5 following );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a range between 10 preceding and 5 preceding );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a range between 2 following and 3 following );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a desc range between 5 preceding and 5 following );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a desc range between 10 preceding and 5 preceding );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a desc range between 2 following and 3 following );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a range between 5.1 preceding and 5.3 following );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a range between 10.2 preceding and 5.4 preceding );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a range between 2.6 following and 3.5 following );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a desc range between 5.7 preceding and 5.8 following );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a desc range between unbounded preceding and 5.9 preceding );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a desc range between 2.1 following and unbounded following );
select cast(a as integer), sum(b) over win from t1 window win as ( order by a range 5.1 preceding );
select sum(b) over ( order by a range between 5 preceding and 10 following ) from t1 order by 1;
select sum(b) over ( order by a desc range between 5 preceding and 10 following ) from t1 order by 1;
select sum(b) over ( order by a range between 5 following and 10 following ) from t1 order by 1 nulls first;
select sum(b) over ( order by a range between 5 following and 10 following ) from t1 order by 1 nulls last;
select sum(b) over ( order by a desc range between 5 following and 10 following ) from t1 order by 1 nulls first;
select sum(b) over ( order by a desc range between 5 following and 10 following ) from t1 order by 1 nulls last;
select sum(b) over ( order by a nulls first range between unbounded preceding and 10 following ) from t1 order by 1 nulls first;
select sum(b) over ( order by a nulls last range between unbounded preceding and 10 following ) from t1 order by 1 nulls last;
select sum(b) over ( order by a asc nulls last range between unbounded preceding and 10 following ) from t1 order by 1 nulls last;
select sum(b) over ( order by a desc nulls first range between unbounded preceding and 10 following ) from t1 order by 1 nulls last;
select group_concat(a, '.') over ( order by b nulls first range between 7 preceding and 2 preceding ) from t2;
select group_concat(a, '.') over ( order by b desc nulls last range between 7 preceding and 2 preceding ) from t2;
select sum (a) over win from t2 window win as ( order by b nulls last range between 6 following and unbounded following );
select sum (a) over win from t2 window win as ( order by b nulls last range between 1 preceding and 2 preceding );
select sum (a) over win from t2 window win as ( order by b nulls last range between 2 following and 1 following );
select sum (a) over win from t2 window win as ( order by b nulls first range between 1 preceding and 2 preceding );
select sum (a) over win from t2 window win as ( order by b nulls first range between 2 following and 1 following );
select sum (a) over win from t2 window win as ( order by b nulls last range between 1000 preceding and 2 preceding );
select sum (a) over win from t2 window win as ( order by b nulls last range between 2000 following and 1000 following );
select sum (a) over win from t2 window win as ( order by b nulls first range between 1000 preceding and 2000 preceding );
select sum (a) over win from t2 window win as ( order by b nulls first range between 2000 following and 1000 following );
select min (a) over win from t2 window win as ( order by b nulls last range between 6 following and unbounded following );
select min (a) over win from t2 window win as ( order by b nulls last range between 1 preceding and 2 preceding );
select min (a) over win from t2 window win as ( order by b nulls last range between 2 following and 1 following );
select min (a) over win from t2 window win as ( order by b nulls first range between 1 preceding and 2 preceding );
select min (a) over win from t2 window win as ( order by b nulls first range between 2 following and 1 following );
select min (a) over win from t2 window win as ( order by b nulls last range between 1000 preceding and 2 preceding );
select min (a) over win from t2 window win as ( order by b nulls last range between 2000 following and 1000 following );
select min (a) over win from t2 window win as ( order by b nulls first range between 1000 preceding and 2000 preceding );
select min (a) over win from t2 window win as ( order by b nulls first range between 2000 following and 1000 following );
select max (a) over win from t2 window win as ( order by b nulls last range between 6 following and unbounded following );
select max (a) over win from t2 window win as ( order by b nulls last range between 1 preceding and 2 preceding );
select max (a) over win from t2 window win as ( order by b nulls last range between 2 following and 1 following );
select max (a) over win from t2 window win as ( order by b nulls first range between 1 preceding and 2 preceding );
select max (a) over win from t2 window win as ( order by b nulls first range between 2 following and 1 following );
select max (a) over win from t2 window win as ( order by b nulls last range between 1000 preceding and 2 preceding );
select max (a) over win from t2 window win as ( order by b nulls last range between 2000 following and 1000 following );
select max (a) over win from t2 window win as ( order by b nulls first range between 1000 preceding and 2000 preceding );
select max (a) over win from t2 window win as ( order by b nulls first range between 2000 following and 1000 following );
select sum(a) over ( partition by ( select t from map where v=a ) order by a ) from tx;
select sum(a) over win from tx window win as ( partition by ( select t from map where v=a ) order by a );
select b, sum(b) over ( order by a nulls last range between unbounded preceding and 10 following ) from ( select case when b < 70 then null else 10 end as a, b from range(1, 129) tbl(b) ) t1 order by 1;
select j, s, string_agg(s) over (partition by j order by s) from a order by j, s;
select j, s, string_agg(s, '|') over (partition by j order by s) from a order by j, s;
select i_category, i_brand, avg(sum(i_price)) over (partition by i_category), rank() over (partition by i_category order by i_category, i_brand) rn from item group by i_category, i_brand;
select i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, sum(ss_sales_price) sum_sales, avg(sum(ss_sales_price)) over (partition by i_category, i_brand, s_store_name, s_company_name, d_year) avg_monthly_sales, rank() over (partition by i_category, i_brand, s_store_name, s_company_name order by d_year, d_moy) rn from item, store_sales, date_dim, store where ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and ss_store_sk = s_store_sk and (d_year = 1999 or (d_year = 1999-1 and d_moy =12) or (d_year = 1999+1 and d_moy =1)) group by i_category, i_brand, s_store_name, s_company_name, d_year, d_moy;
select count(*) over () from tenk1;
select sum(four) over (partition by ten order by unique2) as sum_1, ten, four from tenk1 where unique2 < 10 order by ten, unique2;
select row_number() over (order by unique2) rn from tenk1 where unique2 < 10 order by rn;
select rank() over (partition by four order by ten) as rank_1, ten, four from tenk1 where unique2 < 10 order by four, ten;
select dense_rank() over (partition by four order by ten) from tenk1 where unique2 < 10 order by four, ten;
select first_value(ten) over (partition by four order by ten) from tenk1 where unique2 < 10 order by four, ten;
select cast(percent_rank() over (partition by four order by ten)*10 as integer) from tenk1 order by four, ten;
select cast(cume_dist() over (partition by four order by ten)*10 as integer) from tenk1 where unique2 < 10 order by four, ten;
select ntile(2) over (order by ten, four) nn from tenk1 order by ten, four, nn;
select ntile(3) over (order by ten, four) nn from tenk1 order by ten, four, nn;
select ntile(4) over (order by ten, four) nn from tenk1 order by ten, four, nn;
select ntile(5) over (order by ten, four) nn from tenk1 order by ten, four, nn;
select lag(ten) over (partition by four order by ten) lt from tenk1 order by four, ten, lt;
select lead(ten) over (partition by four order by ten) lt from tenk1 order by four, ten, lt;
select lag(ten, four) over (partition by four order by ten) lt from tenk1 order by four, ten, lt;
select lag(ten, four, 0) over (partition by four order by ten) lt from tenk1 order by four, ten, lt;
select lead(ten * 2, 1) over (partition by four order by ten) lt from tenk1 order by four, ten, lt;
select lead(ten * 2, 1, -1) over (partition by four order by ten) lt from tenk1 order by four, ten, lt;
select count(*) over w c, sum(four) over w s, cast(avg(ten) over w * 10 as integer) a, rank() over w r, dense_rank() over w dr, row_number() over w rn from tenk1 window w as () order by rn;
select count(*) over w c, sum(four) over w s, cast(avg(ten) over w * 10 as integer) a, rank() over w r, dense_rank() over w dr, row_number() over w rn from tenk1 window w as (rows between 1 preceding and 1 following) order by rn;
select mpg, sum(mpg) over (rows between 1 preceding and current row) as mpg_roll from mtcars;
